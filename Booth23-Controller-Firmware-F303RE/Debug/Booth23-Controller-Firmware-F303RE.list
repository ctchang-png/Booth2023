
Booth23-Controller-Firmware-F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b210  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800b3b0  0800b3b0  0001b3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b90c  0800b90c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b90c  0800b90c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b90c  0800b90c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b90c  0800b90c  0001b90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b910  0800b910  0001b910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000002cc  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004ac  200004ac  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010076  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002051  00000000  00000000  00030286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  000322d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d10  00000000  00000000  000330b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000218f1  00000000  00000000  00033dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001105c  00000000  00000000  000556b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbda7  00000000  00000000  0006670d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001324b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ff8  00000000  00000000  00132504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b398 	.word	0x0800b398

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800b398 	.word	0x0800b398

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d04:	b5b0      	push	{r4, r5, r7, lr}
 8000d06:	b0da      	sub	sp, #360	; 0x168
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0a:	f001 fc41 	bl	8002590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0e:	f000 fa3b 	bl	8001188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d12:	f000 fca5 	bl	8001660 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d16:	f000 fc85 	bl	8001624 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000d1a:	f000 fc53 	bl	80015c4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000d1e:	f000 fa8f 	bl	8001240 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d22:	f000 fae7 	bl	80012f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d26:	f000 fb39 	bl	800139c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d2a:	f000 fb8d 	bl	8001448 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000d2e:	f000 fc19 	bl	8001564 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

    Motor_t motor1 = {
 8000d32:	4bd2      	ldr	r3, [pc, #840]	; (800107c <main+0x378>)
 8000d34:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8000d38:	461d      	mov	r5, r3
 8000d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	.pwm_tim = &htim4,
    	.pwm_tim_ch = TIM_CHANNEL_1,
    	.encoder_tim = &htim1
    };

    Motor_t motor2 = {
 8000d46:	4bce      	ldr	r3, [pc, #824]	; (8001080 <main+0x37c>)
 8000d48:	f507 7482 	add.w	r4, r7, #260	; 0x104
 8000d4c:	461d      	mov	r5, r3
 8000d4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	.pwm_tim = &htim4,
    	.pwm_tim_ch = TIM_CHANNEL_3,
    	.encoder_tim = &htim2
    };

    Motor_t motor3 = {
 8000d5a:	4bca      	ldr	r3, [pc, #808]	; (8001084 <main+0x380>)
 8000d5c:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 8000d60:	461d      	mov	r5, r3
 8000d62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	.pwm_tim_ch = TIM_CHANNEL_4,
    	.encoder_tim = &htim3
    };

    //float K_p = 500000.0; When E = 0.0011...
    float K_p12 = 1000.0;
 8000d6e:	4bc6      	ldr	r3, [pc, #792]	; (8001088 <main+0x384>)
 8000d70:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    float K_p3  = 500.0;
 8000d74:	4bc5      	ldr	r3, [pc, #788]	; (800108c <main+0x388>)
 8000d76:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    //float K_d = 100000.0; When E = 0.0011
    float K_d12 = 1000.0;
 8000d7a:	4bc3      	ldr	r3, [pc, #780]	; (8001088 <main+0x384>)
 8000d7c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    float K_d3  = 100.0;
 8000d80:	4bc3      	ldr	r3, [pc, #780]	; (8001090 <main+0x38c>)
 8000d82:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    float E12 = 1.178; //
 8000d86:	4bc3      	ldr	r3, [pc, #780]	; (8001094 <main+0x390>)
 8000d88:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    float E3  = 0.4712; //check this I coudn't find posted CPR
 8000d8c:	4bc2      	ldr	r3, [pc, #776]	; (8001098 <main+0x394>)
 8000d8e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    PID_Controller_t pid1;
    PID_Controller_t pid2;
    PID_Controller_t pid3;

    motor_init(&motor1);
 8000d92:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fd80 	bl	800189c <motor_init>
    motor_init(&motor2);
 8000d9c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 fd7b 	bl	800189c <motor_init>
    motor_init(&motor3);
 8000da6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 fd76 	bl	800189c <motor_init>

    pid_init(&pid1, &motor1, K_p12, K_d12, E12);
 8000db0:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000db4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000db8:	ed97 1a52 	vldr	s2, [r7, #328]	; 0x148
 8000dbc:	edd7 0a54 	vldr	s1, [r7, #336]	; 0x150
 8000dc0:	ed97 0a56 	vldr	s0, [r7, #344]	; 0x158
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 fd7e 	bl	80018c8 <pid_init>
    pid_init(&pid2, &motor2, K_p12, K_d12, E12);
 8000dcc:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8000dd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dd4:	ed97 1a52 	vldr	s2, [r7, #328]	; 0x148
 8000dd8:	edd7 0a54 	vldr	s1, [r7, #336]	; 0x150
 8000ddc:	ed97 0a56 	vldr	s0, [r7, #344]	; 0x158
 8000de0:	4611      	mov	r1, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 fd70 	bl	80018c8 <pid_init>
    pid_init(&pid3, &motor3, K_p3, K_d3, E3);
 8000de8:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	ed97 1a51 	vldr	s2, [r7, #324]	; 0x144
 8000df4:	edd7 0a53 	vldr	s1, [r7, #332]	; 0x14c
 8000df8:	ed97 0a55 	vldr	s0, [r7, #340]	; 0x154
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 fd62 	bl	80018c8 <pid_init>


    HAL_UART_Receive_DMA(&huart3, uart_rx_buf, RX_BUF_SIZE);
 8000e04:	2210      	movs	r2, #16
 8000e06:	49a5      	ldr	r1, [pc, #660]	; (800109c <main+0x398>)
 8000e08:	48a5      	ldr	r0, [pc, #660]	; (80010a0 <main+0x39c>)
 8000e0a:	f005 f81b 	bl	8005e44 <HAL_UART_Receive_DMA>
    HAL_UART_Transmit(&huart3, '0', 1, 100);
 8000e0e:	2364      	movs	r3, #100	; 0x64
 8000e10:	2201      	movs	r2, #1
 8000e12:	2130      	movs	r1, #48	; 0x30
 8000e14:	48a2      	ldr	r0, [pc, #648]	; (80010a0 <main+0x39c>)
 8000e16:	f004 ff8b 	bl	8005d30 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    int millis = HAL_GetTick();
 8000e1a:	f001 fc13 	bl	8002644 <HAL_GetTick>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    int prev_millis = millis;
 8000e24:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000e28:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

    bool continue_flag = false;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		millis = HAL_GetTick();
 8000e32:	f001 fc07 	bl	8002644 <HAL_GetTick>
 8000e36:	4603      	mov	r3, r0
 8000e38:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
		if (millis - prev_millis >= 100 && !uart_ready) {
 8000e3c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8000e40:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b63      	cmp	r3, #99	; 0x63
 8000e48:	dd11      	ble.n	8000e6e <main+0x16a>
 8000e4a:	4b96      	ldr	r3, [pc, #600]	; (80010a4 <main+0x3a0>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	f083 0301 	eor.w	r3, r3, #1
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d009      	beq.n	8000e6e <main+0x16a>
			// ready to receive every 100ms
			HAL_UART_Transmit(&huart3, '0', 1, 100);
 8000e5a:	2364      	movs	r3, #100	; 0x64
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2130      	movs	r1, #48	; 0x30
 8000e60:	488f      	ldr	r0, [pc, #572]	; (80010a0 <main+0x39c>)
 8000e62:	f004 ff65 	bl	8005d30 <HAL_UART_Transmit>
			prev_millis = millis;
 8000e66:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000e6a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
		}
		pid_loop(&pid1);
 8000e6e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 fd7e 	bl	8001974 <pid_loop>
		pid_loop(&pid2);
 8000e78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 fd79 	bl	8001974 <pid_loop>
		pid_loop(&pid3);
 8000e82:	f107 0310 	add.w	r3, r7, #16
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 fd74 	bl	8001974 <pid_loop>

		if (uart_ready) {
 8000e8c:	4b85      	ldr	r3, [pc, #532]	; (80010a4 <main+0x3a0>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f000 816d 	beq.w	8001172 <main+0x46e>
			Command_t cmd;
			uint8_t r = parse_command(&cmd, uart_rx_buf);
 8000e98:	463b      	mov	r3, r7
 8000e9a:	4980      	ldr	r1, [pc, #512]	; (800109c <main+0x398>)
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fdf1 	bl	8001a84 <parse_command>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			if (r == 0) {
 8000ea8:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f040 814c 	bne.w	800114a <main+0x446>
				switch(cmd.cmd) {
 8000eb2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000eb6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	f200 8146 	bhi.w	800114e <main+0x44a>
 8000ec2:	a201      	add	r2, pc, #4	; (adr r2, 8000ec8 <main+0x1c4>)
 8000ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec8:	08000edd 	.word	0x08000edd
 8000ecc:	08000f15 	.word	0x08000f15
 8000ed0:	08001023 	.word	0x08001023
 8000ed4:	080010a9 	.word	0x080010a9
 8000ed8:	080010f7 	.word	0x080010f7
				case Command_Word_GOTO:
					pid1.target = (float) cmd.p1;
 8000edc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000ee0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					pid2.target = (float) cmd.p2;
 8000eea:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000eee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000ef8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000efc:	60da      	str	r2, [r3, #12]
					pid3.target = (float) cmd.p3;
 8000efe:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000f02:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000f06:	68da      	ldr	r2, [r3, #12]
 8000f08:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000f0c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8000f10:	60da      	str	r2, [r3, #12]
					break;
 8000f12:	e11d      	b.n	8001150 <main+0x44c>
				case Command_Word_SET:
					pid1.pos = (float) cmd.p1;
 8000f14:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000f18:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					pid2.pos = (float) cmd.p2;
 8000f22:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000f26:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000f30:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000f34:	605a      	str	r2, [r3, #4]
					pid3.pos = (float) cmd.p3;
 8000f36:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000f3a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000f44:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8000f48:	605a      	str	r2, [r3, #4]

					pid1.target = pid1.pos;
 8000f4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000f4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					pid2.target = pid2.pos;
 8000f52:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000f56:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000f60:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000f64:	60da      	str	r2, [r3, #12]
					pid3.target = pid3.pos;
 8000f66:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000f6a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000f74:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8000f78:	60da      	str	r2, [r3, #12]

					pid1.u = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
					pid2.u = 0;
 8000f80:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000f84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000f88:	2200      	movs	r2, #0
 8000f8a:	645a      	str	r2, [r3, #68]	; 0x44
					pid3.u = 0;
 8000f8c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000f90:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8000f94:	2200      	movs	r2, #0
 8000f96:	645a      	str	r2, [r3, #68]	; 0x44

					pid1.velocity = 0.0;
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
					pid2.velocity = 0.0;
 8000fa0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000fa4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	631a      	str	r2, [r3, #48]	; 0x30
					pid3.velocity = 0.0;
 8000fae:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000fb2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	631a      	str	r2, [r3, #48]	; 0x30

					for (int i = 0; i < 5; i++) {
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8000fc2:	e029      	b.n	8001018 <main+0x314>
						pid1.velocity_buf[i] = 0.0;
 8000fc4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000fc8:	3306      	adds	r3, #6
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000fd0:	443b      	add	r3, r7
 8000fd2:	3bc4      	subs	r3, #196	; 0xc4
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
						pid2.velocity_buf[i] = 0.0;
 8000fda:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000fde:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8000fe2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000fe6:	3306      	adds	r3, #6
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	3304      	adds	r3, #4
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
						pid3.velocity_buf[i] = 0.0;
 8000ff4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000ff8:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8000ffc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001000:	3306      	adds	r3, #6
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	3304      	adds	r3, #4
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
					for (int i = 0; i < 5; i++) {
 800100e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001012:	3301      	adds	r3, #1
 8001014:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001018:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800101c:	2b04      	cmp	r3, #4
 800101e:	ddd1      	ble.n	8000fc4 <main+0x2c0>
					}
					break;
 8001020:	e096      	b.n	8001150 <main+0x44c>
				case Command_Word_OFF:
					off(pid1.motor, pid2.motor, pid3.motor);
 8001022:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8001026:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800102a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800102e:	6819      	ldr	r1, [r3, #0]
 8001030:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001034:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	f000 fe05 	bl	8001c4a <off>
					uart_ready = false;
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <main+0x3a0>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_DMA(&huart3, uart_rx_buf, RX_BUF_SIZE);
 8001046:	2210      	movs	r2, #16
 8001048:	4914      	ldr	r1, [pc, #80]	; (800109c <main+0x398>)
 800104a:	4815      	ldr	r0, [pc, #84]	; (80010a0 <main+0x39c>)
 800104c:	f004 fefa 	bl	8005e44 <HAL_UART_Receive_DMA>
					HAL_Delay(50);
 8001050:	2032      	movs	r0, #50	; 0x32
 8001052:	f001 fb03 	bl	800265c <HAL_Delay>
					HAL_UART_Transmit(&huart3, '0', 1, 100);
 8001056:	2364      	movs	r3, #100	; 0x64
 8001058:	2201      	movs	r2, #1
 800105a:	2130      	movs	r1, #48	; 0x30
 800105c:	4810      	ldr	r0, [pc, #64]	; (80010a0 <main+0x39c>)
 800105e:	f004 fe67 	bl	8005d30 <HAL_UART_Transmit>
					while (!uart_ready){}
 8001062:	bf00      	nop
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <main+0x3a0>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	f083 0301 	eor.w	r3, r3, #1
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1f7      	bne.n	8001064 <main+0x360>
					continue_flag = true;
 8001074:	2301      	movs	r3, #1
 8001076:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
					break;
 800107a:	e069      	b.n	8001150 <main+0x44c>
 800107c:	0800b3b0 	.word	0x0800b3b0
 8001080:	0800b3cc 	.word	0x0800b3cc
 8001084:	0800b3e8 	.word	0x0800b3e8
 8001088:	447a0000 	.word	0x447a0000
 800108c:	43fa0000 	.word	0x43fa0000
 8001090:	42c80000 	.word	0x42c80000
 8001094:	3f96c8b4 	.word	0x3f96c8b4
 8001098:	3ef14120 	.word	0x3ef14120
 800109c:	20000480 	.word	0x20000480
 80010a0:	200003b4 	.word	0x200003b4
 80010a4:	20000490 	.word	0x20000490
				case Command_Word_TENSION:
					tension(&pid1, &pid2, &pid3);
 80010a8:	f107 0210 	add.w	r2, r7, #16
 80010ac:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80010b0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fecb 	bl	8001e50 <tension>
					uart_ready = false;
 80010ba:	4b30      	ldr	r3, [pc, #192]	; (800117c <main+0x478>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_DMA(&huart3, uart_rx_buf, RX_BUF_SIZE);
 80010c0:	2210      	movs	r2, #16
 80010c2:	492f      	ldr	r1, [pc, #188]	; (8001180 <main+0x47c>)
 80010c4:	482f      	ldr	r0, [pc, #188]	; (8001184 <main+0x480>)
 80010c6:	f004 febd 	bl	8005e44 <HAL_UART_Receive_DMA>
					HAL_Delay(50);
 80010ca:	2032      	movs	r0, #50	; 0x32
 80010cc:	f001 fac6 	bl	800265c <HAL_Delay>
					HAL_UART_Transmit(&huart3, '0', 1, 100);
 80010d0:	2364      	movs	r3, #100	; 0x64
 80010d2:	2201      	movs	r2, #1
 80010d4:	2130      	movs	r1, #48	; 0x30
 80010d6:	482b      	ldr	r0, [pc, #172]	; (8001184 <main+0x480>)
 80010d8:	f004 fe2a 	bl	8005d30 <HAL_UART_Transmit>
					while (!uart_ready){}
 80010dc:	bf00      	nop
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <main+0x478>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	f083 0301 	eor.w	r3, r3, #1
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f7      	bne.n	80010de <main+0x3da>
					continue_flag = true;
 80010ee:	2301      	movs	r3, #1
 80010f0:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
					break;
 80010f4:	e02c      	b.n	8001150 <main+0x44c>
				case Command_Word_BLOCK:
					block(pid1.motor, pid2.motor, pid3.motor);
 80010f6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80010fa:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80010fe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001102:	6819      	ldr	r1, [r3, #0]
 8001104:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001108:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	f000 fdb4 	bl	8001c7c <block>
					uart_ready = false;
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <main+0x478>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_DMA(&huart3, uart_rx_buf, RX_BUF_SIZE);
 800111a:	2210      	movs	r2, #16
 800111c:	4918      	ldr	r1, [pc, #96]	; (8001180 <main+0x47c>)
 800111e:	4819      	ldr	r0, [pc, #100]	; (8001184 <main+0x480>)
 8001120:	f004 fe90 	bl	8005e44 <HAL_UART_Receive_DMA>
					HAL_UART_Transmit(&huart3, '0', 1, 100);
 8001124:	2364      	movs	r3, #100	; 0x64
 8001126:	2201      	movs	r2, #1
 8001128:	2130      	movs	r1, #48	; 0x30
 800112a:	4816      	ldr	r0, [pc, #88]	; (8001184 <main+0x480>)
 800112c:	f004 fe00 	bl	8005d30 <HAL_UART_Transmit>
					while (!uart_ready){}
 8001130:	bf00      	nop
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <main+0x478>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f083 0301 	eor.w	r3, r3, #1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f7      	bne.n	8001132 <main+0x42e>
					continue_flag = true;
 8001142:	2301      	movs	r3, #1
 8001144:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
					break;
 8001148:	e002      	b.n	8001150 <main+0x44c>
				default:
					break;
				}
			}
 800114a:	bf00      	nop
 800114c:	e000      	b.n	8001150 <main+0x44c>
					break;
 800114e:	bf00      	nop
			if (continue_flag) {
 8001150:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <main+0x45c>
				continue_flag = false;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
 800115e:	e668      	b.n	8000e32 <main+0x12e>
				continue;
			}
			HAL_UART_Transmit(&huart3, uart_rx_buf, sizeof(uart_rx_buf), 100);
 8001160:	2364      	movs	r3, #100	; 0x64
 8001162:	2210      	movs	r2, #16
 8001164:	4906      	ldr	r1, [pc, #24]	; (8001180 <main+0x47c>)
 8001166:	4807      	ldr	r0, [pc, #28]	; (8001184 <main+0x480>)
 8001168:	f004 fde2 	bl	8005d30 <HAL_UART_Transmit>
			uart_ready = false;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <main+0x478>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(5);
 8001172:	2005      	movs	r0, #5
 8001174:	f001 fa72 	bl	800265c <HAL_Delay>
		millis = HAL_GetTick();
 8001178:	e65b      	b.n	8000e32 <main+0x12e>
 800117a:	bf00      	nop
 800117c:	20000490 	.word	0x20000490
 8001180:	20000480 	.word	0x20000480
 8001184:	200003b4 	.word	0x200003b4

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0a6      	sub	sp, #152	; 0x98
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001192:	2228      	movs	r2, #40	; 0x28
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f005 fc84 	bl	8006aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	2258      	movs	r2, #88	; 0x58
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f005 fc76 	bl	8006aa4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b8:	2302      	movs	r3, #2
 80011ba:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011bc:	2301      	movs	r3, #1
 80011be:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c0:	2310      	movs	r3, #16
 80011c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 fef1 	bl	8002fb8 <HAL_RCC_OscConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011dc:	f000 fed4 	bl	8001f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e0:	230f      	movs	r3, #15
 80011e2:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011e4:	2300      	movs	r3, #0
 80011e6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 ff30 	bl	8004060 <HAL_RCC_ClockConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001206:	f000 febf 	bl	8001f88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <SystemClock_Config+0xb4>)
 800120c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001216:	2300      	movs	r3, #0
 8001218:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800121a:	2300      	movs	r3, #0
 800121c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800121e:	2300      	movs	r3, #0
 8001220:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4618      	mov	r0, r3
 8001226:	f003 f951 	bl	80044cc <HAL_RCCEx_PeriphCLKConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001230:	f000 feaa 	bl	8001f88 <Error_Handler>
  }
}
 8001234:	bf00      	nop
 8001236:	3798      	adds	r7, #152	; 0x98
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	00301006 	.word	0x00301006

08001240 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	; 0x30
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2224      	movs	r2, #36	; 0x24
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f005 fc28 	bl	8006aa4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	463b      	mov	r3, r7
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800125e:	4b23      	ldr	r3, [pc, #140]	; (80012ec <MX_TIM1_Init+0xac>)
 8001260:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <MX_TIM1_Init+0xb0>)
 8001262:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001264:	4b21      	ldr	r3, [pc, #132]	; (80012ec <MX_TIM1_Init+0xac>)
 8001266:	2200      	movs	r2, #0
 8001268:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <MX_TIM1_Init+0xac>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <MX_TIM1_Init+0xac>)
 8001272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001276:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001278:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <MX_TIM1_Init+0xac>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <MX_TIM1_Init+0xac>)
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <MX_TIM1_Init+0xac>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800128a:	2301      	movs	r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001292:	2301      	movs	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012a2:	2301      	movs	r3, #1
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	4619      	mov	r1, r3
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <MX_TIM1_Init+0xac>)
 80012b6:	f003 fceb 	bl	8004c90 <HAL_TIM_Encoder_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80012c0:	f000 fe62 	bl	8001f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012d0:	463b      	mov	r3, r7
 80012d2:	4619      	mov	r1, r3
 80012d4:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_TIM1_Init+0xac>)
 80012d6:	f004 fc51 	bl	8005b7c <HAL_TIMEx_MasterConfigSynchronization>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80012e0:	f000 fe52 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	3730      	adds	r7, #48	; 0x30
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200001fc 	.word	0x200001fc
 80012f0:	40012c00 	.word	0x40012c00

080012f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08c      	sub	sp, #48	; 0x30
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	2224      	movs	r2, #36	; 0x24
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f005 fbce 	bl	8006aa4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001308:	463b      	mov	r3, r7
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001312:	4b21      	ldr	r3, [pc, #132]	; (8001398 <MX_TIM2_Init+0xa4>)
 8001314:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001318:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <MX_TIM2_Init+0xa4>)
 800131c:	2200      	movs	r2, #0
 800131e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <MX_TIM2_Init+0xa4>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <MX_TIM2_Init+0xa4>)
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <MX_TIM2_Init+0xa4>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001334:	4b18      	ldr	r3, [pc, #96]	; (8001398 <MX_TIM2_Init+0xa4>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800133a:	2301      	movs	r3, #1
 800133c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001342:	2301      	movs	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001352:	2301      	movs	r3, #1
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	4619      	mov	r1, r3
 8001364:	480c      	ldr	r0, [pc, #48]	; (8001398 <MX_TIM2_Init+0xa4>)
 8001366:	f003 fc93 	bl	8004c90 <HAL_TIM_Encoder_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001370:	f000 fe0a 	bl	8001f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001374:	2300      	movs	r3, #0
 8001376:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800137c:	463b      	mov	r3, r7
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_TIM2_Init+0xa4>)
 8001382:	f004 fbfb 	bl	8005b7c <HAL_TIMEx_MasterConfigSynchronization>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800138c:	f000 fdfc 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	3730      	adds	r7, #48	; 0x30
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000248 	.word	0x20000248

0800139c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08c      	sub	sp, #48	; 0x30
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	2224      	movs	r2, #36	; 0x24
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f005 fb7a 	bl	8006aa4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ba:	4b21      	ldr	r3, [pc, #132]	; (8001440 <MX_TIM3_Init+0xa4>)
 80013bc:	4a21      	ldr	r2, [pc, #132]	; (8001444 <MX_TIM3_Init+0xa8>)
 80013be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <MX_TIM3_Init+0xa4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c6:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <MX_TIM3_Init+0xa4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013cc:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <MX_TIM3_Init+0xa4>)
 80013ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d4:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_TIM3_Init+0xa4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <MX_TIM3_Init+0xa4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013e8:	2301      	movs	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013f8:	2301      	movs	r3, #1
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4619      	mov	r1, r3
 800140a:	480d      	ldr	r0, [pc, #52]	; (8001440 <MX_TIM3_Init+0xa4>)
 800140c:	f003 fc40 	bl	8004c90 <HAL_TIM_Encoder_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001416:	f000 fdb7 	bl	8001f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001422:	463b      	mov	r3, r7
 8001424:	4619      	mov	r1, r3
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <MX_TIM3_Init+0xa4>)
 8001428:	f004 fba8 	bl	8005b7c <HAL_TIMEx_MasterConfigSynchronization>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001432:	f000 fda9 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	3730      	adds	r7, #48	; 0x30
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000294 	.word	0x20000294
 8001444:	40000400 	.word	0x40000400

08001448 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08e      	sub	sp, #56	; 0x38
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001468:	463b      	mov	r3, r7
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]
 8001476:	615a      	str	r2, [r3, #20]
 8001478:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800147a:	4b38      	ldr	r3, [pc, #224]	; (800155c <MX_TIM4_Init+0x114>)
 800147c:	4a38      	ldr	r2, [pc, #224]	; (8001560 <MX_TIM4_Init+0x118>)
 800147e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001480:	4b36      	ldr	r3, [pc, #216]	; (800155c <MX_TIM4_Init+0x114>)
 8001482:	2200      	movs	r2, #0
 8001484:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b35      	ldr	r3, [pc, #212]	; (800155c <MX_TIM4_Init+0x114>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800148c:	4b33      	ldr	r3, [pc, #204]	; (800155c <MX_TIM4_Init+0x114>)
 800148e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001492:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001494:	4b31      	ldr	r3, [pc, #196]	; (800155c <MX_TIM4_Init+0x114>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149a:	4b30      	ldr	r3, [pc, #192]	; (800155c <MX_TIM4_Init+0x114>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014a0:	482e      	ldr	r0, [pc, #184]	; (800155c <MX_TIM4_Init+0x114>)
 80014a2:	f003 fa31 	bl	8004908 <HAL_TIM_Base_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80014ac:	f000 fd6c 	bl	8001f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ba:	4619      	mov	r1, r3
 80014bc:	4827      	ldr	r0, [pc, #156]	; (800155c <MX_TIM4_Init+0x114>)
 80014be:	f003 fe2f 	bl	8005120 <HAL_TIM_ConfigClockSource>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80014c8:	f000 fd5e 	bl	8001f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014cc:	4823      	ldr	r0, [pc, #140]	; (800155c <MX_TIM4_Init+0x114>)
 80014ce:	f003 fa72 	bl	80049b6 <HAL_TIM_PWM_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80014d8:	f000 fd56 	bl	8001f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4619      	mov	r1, r3
 80014ea:	481c      	ldr	r0, [pc, #112]	; (800155c <MX_TIM4_Init+0x114>)
 80014ec:	f004 fb46 	bl	8005b7c <HAL_TIMEx_MasterConfigSynchronization>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80014f6:	f000 fd47 	bl	8001f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014fa:	2360      	movs	r3, #96	; 0x60
 80014fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800150a:	463b      	mov	r3, r7
 800150c:	2200      	movs	r2, #0
 800150e:	4619      	mov	r1, r3
 8001510:	4812      	ldr	r0, [pc, #72]	; (800155c <MX_TIM4_Init+0x114>)
 8001512:	f003 fcf1 	bl	8004ef8 <HAL_TIM_PWM_ConfigChannel>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800151c:	f000 fd34 	bl	8001f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001520:	463b      	mov	r3, r7
 8001522:	2208      	movs	r2, #8
 8001524:	4619      	mov	r1, r3
 8001526:	480d      	ldr	r0, [pc, #52]	; (800155c <MX_TIM4_Init+0x114>)
 8001528:	f003 fce6 	bl	8004ef8 <HAL_TIM_PWM_ConfigChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001532:	f000 fd29 	bl	8001f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001536:	463b      	mov	r3, r7
 8001538:	220c      	movs	r2, #12
 800153a:	4619      	mov	r1, r3
 800153c:	4807      	ldr	r0, [pc, #28]	; (800155c <MX_TIM4_Init+0x114>)
 800153e:	f003 fcdb 	bl	8004ef8 <HAL_TIM_PWM_ConfigChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001548:	f000 fd1e 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800154c:	4803      	ldr	r0, [pc, #12]	; (800155c <MX_TIM4_Init+0x114>)
 800154e:	f000 fe09 	bl	8002164 <HAL_TIM_MspPostInit>

}
 8001552:	bf00      	nop
 8001554:	3738      	adds	r7, #56	; 0x38
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200002e0 	.word	0x200002e0
 8001560:	40000800 	.word	0x40000800

08001564 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <MX_USART2_UART_Init+0x58>)
 800156a:	4a15      	ldr	r2, [pc, #84]	; (80015c0 <MX_USART2_UART_Init+0x5c>)
 800156c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <MX_USART2_UART_Init+0x58>)
 8001570:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001574:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_USART2_UART_Init+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <MX_USART2_UART_Init+0x58>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_USART2_UART_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_USART2_UART_Init+0x58>)
 800158a:	220c      	movs	r2, #12
 800158c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <MX_USART2_UART_Init+0x58>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_USART2_UART_Init+0x58>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <MX_USART2_UART_Init+0x58>)
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_USART2_UART_Init+0x58>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_USART2_UART_Init+0x58>)
 80015a8:	f004 fb74 	bl	8005c94 <HAL_UART_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015b2:	f000 fce9 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2000032c 	.word	0x2000032c
 80015c0:	40004400 	.word	0x40004400

080015c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <MX_USART3_UART_Init+0x58>)
 80015ca:	4a15      	ldr	r2, [pc, #84]	; (8001620 <MX_USART3_UART_Init+0x5c>)
 80015cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <MX_USART3_UART_Init+0x58>)
 80015d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_USART3_UART_Init+0x58>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <MX_USART3_UART_Init+0x58>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_USART3_UART_Init+0x58>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_USART3_UART_Init+0x58>)
 80015ea:	220c      	movs	r2, #12
 80015ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_USART3_UART_Init+0x58>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_USART3_UART_Init+0x58>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_USART3_UART_Init+0x58>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_USART3_UART_Init+0x58>)
 8001602:	2200      	movs	r2, #0
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_USART3_UART_Init+0x58>)
 8001608:	f004 fb44 	bl	8005c94 <HAL_UART_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001612:	f000 fcb9 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200003b4 	.word	0x200003b4
 8001620:	40004800 	.word	0x40004800

08001624 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_DMA_Init+0x38>)
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <MX_DMA_Init+0x38>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6153      	str	r3, [r2, #20]
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_DMA_Init+0x38>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	200d      	movs	r0, #13
 8001648:	f001 f907 	bl	800285a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800164c:	200d      	movs	r0, #13
 800164e:	f001 f920 	bl	8002892 <HAL_NVIC_EnableIRQ>

}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000

08001660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001676:	4b3b      	ldr	r3, [pc, #236]	; (8001764 <MX_GPIO_Init+0x104>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	4a3a      	ldr	r2, [pc, #232]	; (8001764 <MX_GPIO_Init+0x104>)
 800167c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001680:	6153      	str	r3, [r2, #20]
 8001682:	4b38      	ldr	r3, [pc, #224]	; (8001764 <MX_GPIO_Init+0x104>)
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800168e:	4b35      	ldr	r3, [pc, #212]	; (8001764 <MX_GPIO_Init+0x104>)
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	4a34      	ldr	r2, [pc, #208]	; (8001764 <MX_GPIO_Init+0x104>)
 8001694:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001698:	6153      	str	r3, [r2, #20]
 800169a:	4b32      	ldr	r3, [pc, #200]	; (8001764 <MX_GPIO_Init+0x104>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	4b2f      	ldr	r3, [pc, #188]	; (8001764 <MX_GPIO_Init+0x104>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	4a2e      	ldr	r2, [pc, #184]	; (8001764 <MX_GPIO_Init+0x104>)
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b0:	6153      	str	r3, [r2, #20]
 80016b2:	4b2c      	ldr	r3, [pc, #176]	; (8001764 <MX_GPIO_Init+0x104>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	4b29      	ldr	r3, [pc, #164]	; (8001764 <MX_GPIO_Init+0x104>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	4a28      	ldr	r2, [pc, #160]	; (8001764 <MX_GPIO_Init+0x104>)
 80016c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c8:	6153      	str	r3, [r2, #20]
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <MX_GPIO_Init+0x104>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR31_Pin|LD2_Pin|DIR11_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80016dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e0:	f001 fc2e 	bl	8002f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR32_Pin|DIR12_Pin|DIR22_Pin|DIR21_Pin, GPIO_PIN_RESET);
 80016e4:	2200      	movs	r2, #0
 80016e6:	f240 4131 	movw	r1, #1073	; 0x431
 80016ea:	481f      	ldr	r0, [pc, #124]	; (8001768 <MX_GPIO_Init+0x108>)
 80016ec:	f001 fc28 	bl	8002f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	4619      	mov	r1, r3
 8001706:	4819      	ldr	r0, [pc, #100]	; (800176c <MX_GPIO_Init+0x10c>)
 8001708:	f001 fa90 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR31_Pin LD2_Pin DIR11_Pin */
  GPIO_InitStruct.Pin = DIR31_Pin|LD2_Pin|DIR11_Pin;
 800170c:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001728:	f001 fa80 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR32_Pin DIR12_Pin DIR22_Pin DIR21_Pin */
  GPIO_InitStruct.Pin = DIR32_Pin|DIR12_Pin|DIR22_Pin|DIR21_Pin;
 800172c:	f240 4331 	movw	r3, #1073	; 0x431
 8001730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	2301      	movs	r3, #1
 8001734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	4808      	ldr	r0, [pc, #32]	; (8001768 <MX_GPIO_Init+0x108>)
 8001746:	f001 fa71 	bl	8002c2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	2028      	movs	r0, #40	; 0x28
 8001750:	f001 f883 	bl	800285a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001754:	2028      	movs	r0, #40	; 0x28
 8001756:	f001 f89c 	bl	8002892 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800175a:	bf00      	nop
 800175c:	3728      	adds	r7, #40	; 0x28
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000
 8001768:	48000400 	.word	0x48000400
 800176c:	48000800 	.word	0x48000800

08001770 <drive_motor>:

/* USER CODE BEGIN 4 */
void drive_motor(Motor_t* motor, Direction_t dir, uint16_t speed)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	70fb      	strb	r3, [r7, #3]
 800177c:	4613      	mov	r3, r2
 800177e:	803b      	strh	r3, [r7, #0]
	switch (dir) {
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	2b03      	cmp	r3, #3
 8001784:	d84e      	bhi.n	8001824 <drive_motor+0xb4>
 8001786:	a201      	add	r2, pc, #4	; (adr r2, 800178c <drive_motor+0x1c>)
 8001788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178c:	0800179d 	.word	0x0800179d
 8001790:	080017bf 	.word	0x080017bf
 8001794:	080017e1 	.word	0x080017e1
 8001798:	08001803 	.word	0x08001803
		case OFF:
			HAL_GPIO_WritePin(motor->dir1_port, motor->dir1_pin, 0);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	889b      	ldrh	r3, [r3, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	4619      	mov	r1, r3
 80017a8:	f001 fbca 	bl	8002f40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->dir2_port, motor->dir2_pin, 0);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6898      	ldr	r0, [r3, #8]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	899b      	ldrh	r3, [r3, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	4619      	mov	r1, r3
 80017b8:	f001 fbc2 	bl	8002f40 <HAL_GPIO_WritePin>
			break;
 80017bc:	e032      	b.n	8001824 <drive_motor+0xb4>
		case BLOCK:
			HAL_GPIO_WritePin(motor->dir1_port, motor->dir1_pin, 1);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	889b      	ldrh	r3, [r3, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	4619      	mov	r1, r3
 80017ca:	f001 fbb9 	bl	8002f40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->dir2_port, motor->dir2_pin, 1);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6898      	ldr	r0, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	899b      	ldrh	r3, [r3, #12]
 80017d6:	2201      	movs	r2, #1
 80017d8:	4619      	mov	r1, r3
 80017da:	f001 fbb1 	bl	8002f40 <HAL_GPIO_WritePin>
			break;
 80017de:	e021      	b.n	8001824 <drive_motor+0xb4>
		case FORWARD:
			HAL_GPIO_WritePin(motor->dir1_port, motor->dir1_pin, 1);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	889b      	ldrh	r3, [r3, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	4619      	mov	r1, r3
 80017ec:	f001 fba8 	bl	8002f40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->dir2_port, motor->dir2_pin, 0);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6898      	ldr	r0, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	899b      	ldrh	r3, [r3, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	4619      	mov	r1, r3
 80017fc:	f001 fba0 	bl	8002f40 <HAL_GPIO_WritePin>
			break;
 8001800:	e010      	b.n	8001824 <drive_motor+0xb4>
		case BACK:
			HAL_GPIO_WritePin(motor->dir1_port, motor->dir1_pin, 0);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6818      	ldr	r0, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	889b      	ldrh	r3, [r3, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	4619      	mov	r1, r3
 800180e:	f001 fb97 	bl	8002f40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->dir2_port, motor->dir2_pin, 1);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6898      	ldr	r0, [r3, #8]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	899b      	ldrh	r3, [r3, #12]
 800181a:	2201      	movs	r2, #1
 800181c:	4619      	mov	r1, r3
 800181e:	f001 fb8f 	bl	8002f40 <HAL_GPIO_WritePin>
			break;
 8001822:	bf00      	nop
	};

	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_tim_ch, speed);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	8a9b      	ldrh	r3, [r3, #20]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d105      	bne.n	8001838 <drive_motor+0xc8>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	883a      	ldrh	r2, [r7, #0]
 8001834:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001836:	e02c      	b.n	8001892 <drive_motor+0x122>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_tim_ch, speed);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	8a9b      	ldrh	r3, [r3, #20]
 800183c:	2b04      	cmp	r3, #4
 800183e:	d105      	bne.n	800184c <drive_motor+0xdc>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	883b      	ldrh	r3, [r7, #0]
 8001848:	6393      	str	r3, [r2, #56]	; 0x38
}
 800184a:	e022      	b.n	8001892 <drive_motor+0x122>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_tim_ch, speed);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	8a9b      	ldrh	r3, [r3, #20]
 8001850:	2b08      	cmp	r3, #8
 8001852:	d105      	bne.n	8001860 <drive_motor+0xf0>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	883b      	ldrh	r3, [r7, #0]
 800185c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800185e:	e018      	b.n	8001892 <drive_motor+0x122>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_tim_ch, speed);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	8a9b      	ldrh	r3, [r3, #20]
 8001864:	2b0c      	cmp	r3, #12
 8001866:	d105      	bne.n	8001874 <drive_motor+0x104>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	883b      	ldrh	r3, [r7, #0]
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001872:	e00e      	b.n	8001892 <drive_motor+0x122>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_tim_ch, speed);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	8a9b      	ldrh	r3, [r3, #20]
 8001878:	2b10      	cmp	r3, #16
 800187a:	d105      	bne.n	8001888 <drive_motor+0x118>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	883b      	ldrh	r3, [r7, #0]
 8001884:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001886:	e004      	b.n	8001892 <drive_motor+0x122>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_tim_ch, speed);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	883b      	ldrh	r3, [r7, #0]
 8001890:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop

0800189c <motor_init>:

void motor_init(Motor_t *motor)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(motor->pwm_tim, motor->pwm_tim_ch);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	8a9b      	ldrh	r3, [r3, #20]
 80018ac:	4619      	mov	r1, r3
 80018ae:	4610      	mov	r0, r2
 80018b0:	f003 f8e2 	bl	8004a78 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(motor->encoder_tim, TIM_CHANNEL_ALL);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	213c      	movs	r1, #60	; 0x3c
 80018ba:	4618      	mov	r0, r3
 80018bc:	f003 fa8e 	bl	8004ddc <HAL_TIM_Encoder_Start>
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <pid_init>:

void pid_init(PID_Controller_t* pid, Motor_t* motor,
		      float K_p, float K_d, float E)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6178      	str	r0, [r7, #20]
 80018d0:	6139      	str	r1, [r7, #16]
 80018d2:	ed87 0a03 	vstr	s0, [r7, #12]
 80018d6:	edc7 0a02 	vstr	s1, [r7, #8]
 80018da:	ed87 1a01 	vstr	s2, [r7, #4]
	pid->motor = motor;
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	601a      	str	r2, [r3, #0]
	pid->target = 0.0;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	60da      	str	r2, [r3, #12]
	pid->pos = 0.0;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	605a      	str	r2, [r3, #4]
	pid->last_e = 0.0;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
	pid->K_p = K_p;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	611a      	str	r2, [r3, #16]
	pid->K_d = K_d;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	615a      	str	r2, [r3, #20]
	pid->E = E;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	619a      	str	r2, [r3, #24]
	pid->velocity_buf[0] = 0.0;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
	pid->velocity_buf[1] = 0.0;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	621a      	str	r2, [r3, #32]
	pid->velocity_buf[2] = 0.0;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	; 0x24
	pid->velocity_buf[3] = 0.0;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	629a      	str	r2, [r3, #40]	; 0x28
	pid->velocity_buf[4] = 0.0;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->velocity = 0;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	631a      	str	r2, [r3, #48]	; 0x30
	pid->t_millis = HAL_GetTick() + 1;
 800193e:	f000 fe81 	bl	8002644 <HAL_GetTick>
 8001942:	4603      	mov	r3, r0
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	635a      	str	r2, [r3, #52]	; 0x34
	pid->last_t_millis = HAL_GetTick();
 800194a:	f000 fe7b 	bl	8002644 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	641a      	str	r2, [r3, #64]	; 0x40
	pid->last_encoder_pos = encoder_read_raw(motor);
 8001954:	6938      	ldr	r0, [r7, #16]
 8001956:	f000 f86d 	bl	8001a34 <encoder_read_raw>
 800195a:	4603      	mov	r3, r0
 800195c:	461a      	mov	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	871a      	strh	r2, [r3, #56]	; 0x38

	pid->last_ticks = HAL_GetTick();
 8001962:	f000 fe6f 	bl	8002644 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800196c:	bf00      	nop
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <pid_loop>:
{
	pid->target = target;
}

void pid_loop(PID_Controller_t* pid)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	update_state(pid);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f999 	bl	8001cb4 <update_state>
	float e = pid->pos - pid->target;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	ed93 7a01 	vldr	s14, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	edd3 7a03 	vldr	s15, [r3, #12]
 800198e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001992:	edc7 7a03 	vstr	s15, [r7, #12]
	float de = e - pid->last_e;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	edd3 7a02 	vldr	s15, [r3, #8]
 800199c:	ed97 7a03 	vldr	s14, [r7, #12]
 80019a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a4:	edc7 7a02 	vstr	s15, [r7, #8]

	pid->u = (int) (-pid->K_p * e - pid->K_d*de);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80019ae:	eeb1 7a67 	vneg.f32	s14, s15
 80019b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	edd3 6a05 	vldr	s13, [r3, #20]
 80019c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80019c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d0:	ee17 2a90 	vmov	r2, s15
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	645a      	str	r2, [r3, #68]	; 0x44

	pid->u = clamp(pid->u, -PWM_MAX, PWM_MAX);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019e0:	4913      	ldr	r1, [pc, #76]	; (8001a30 <pid_loop+0xbc>)
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f918 	bl	8001c18 <clamp>
 80019e8:	4602      	mov	r2, r0
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	645a      	str	r2, [r3, #68]	; 0x44

	if (pid->u > 0) {
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	dd09      	ble.n	8001a0a <pid_loop+0x96>
		drive_motor(pid->motor, FORWARD, pid->u);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	2102      	movs	r1, #2
 8001a04:	f7ff feb4 	bl	8001770 <drive_motor>
 8001a08:	e00a      	b.n	8001a20 <pid_loop+0xac>
	} else {
		drive_motor(pid->motor, BACK, -pid->u);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	425b      	negs	r3, r3
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2103      	movs	r1, #3
 8001a1c:	f7ff fea8 	bl	8001770 <drive_motor>
	}

	pid->last_e = e;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	609a      	str	r2, [r3, #8]
}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	ffff0001 	.word	0xffff0001

08001a34 <encoder_read_raw>:
{
	pid->pos = pos;
}

uint16_t encoder_read_raw(Motor_t* motor)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	uint16_t val = (motor->encoder_tim->Instance->CNT) >> 2;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	089b      	lsrs	r3, r3, #2
 8001a46:	81fb      	strh	r3, [r7, #14]
	return val;
 8001a48:	89fb      	ldrh	r3, [r7, #14]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, uart_rx_buf, RX_BUF_SIZE);
 8001a60:	2210      	movs	r2, #16
 8001a62:	4905      	ldr	r1, [pc, #20]	; (8001a78 <HAL_UART_RxCpltCallback+0x20>)
 8001a64:	4805      	ldr	r0, [pc, #20]	; (8001a7c <HAL_UART_RxCpltCallback+0x24>)
 8001a66:	f004 f9ed 	bl	8005e44 <HAL_UART_Receive_DMA>
	uart_ready = 1;
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_UART_RxCpltCallback+0x28>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000480 	.word	0x20000480
 8001a7c:	200003b4 	.word	0x200003b4
 8001a80:	20000490 	.word	0x20000490

08001a84 <parse_command>:

uint8_t parse_command(Command_t *cmd, uint8_t buf[RX_BUF_SIZE])
{
 8001a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a88:	b08b      	sub	sp, #44	; 0x2c
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]
 8001a90:	466b      	mov	r3, sp
 8001a92:	461e      	mov	r6, r3
	int CMD_WORD_SIZE = 4;
 8001a94:	2304      	movs	r3, #4
 8001a96:	623b      	str	r3, [r7, #32]
	//Fixing CMD WORD TO 4, JUST ADD A SPACE TO SET: "SET "
	char cmd_word[CMD_WORD_SIZE];
 8001a98:	6a39      	ldr	r1, [r7, #32]
 8001a9a:	1e4b      	subs	r3, r1, #1
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	460a      	mov	r2, r1
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	4690      	mov	r8, r2
 8001aa4:	4699      	mov	r9, r3
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aba:	460a      	mov	r2, r1
 8001abc:	2300      	movs	r3, #0
 8001abe:	4614      	mov	r4, r2
 8001ac0:	461d      	mov	r5, r3
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	00eb      	lsls	r3, r5, #3
 8001acc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ad0:	00e2      	lsls	r2, r4, #3
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	3307      	adds	r3, #7
 8001ad6:	08db      	lsrs	r3, r3, #3
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	ebad 0d03 	sub.w	sp, sp, r3
 8001ade:	466b      	mov	r3, sp
 8001ae0:	3300      	adds	r3, #0
 8001ae2:	61bb      	str	r3, [r7, #24]
	int p1_i, p2_i, p3_i;
	const float factor = 1.0; // read mm commands and set mm positions
 8001ae4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ae8:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 4; i++) {
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
 8001aee:	e00b      	b.n	8001b08 <parse_command+0x84>
		cmd_word[i] = buf[i];
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	4413      	add	r3, r2
 8001af6:	7819      	ldrb	r1, [r3, #0]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	4413      	add	r3, r2
 8001afe:	460a      	mov	r2, r1
 8001b00:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	3301      	adds	r3, #1
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	ddf0      	ble.n	8001af0 <parse_command+0x6c>
	};
	p1_i = *(int*)(&buf[CMD_WORD_SIZE]);
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	613b      	str	r3, [r7, #16]
	p2_i = *(int*)(&buf[CMD_WORD_SIZE + 4]);
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	60fb      	str	r3, [r7, #12]
	p3_i = *(int*)(&buf[CMD_WORD_SIZE + 8]);
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	3308      	adds	r3, #8
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	60bb      	str	r3, [r7, #8]

	if (strncmp(cmd_word, "GOTO", 4) == 0) {
 8001b30:	2204      	movs	r2, #4
 8001b32:	4934      	ldr	r1, [pc, #208]	; (8001c04 <parse_command+0x180>)
 8001b34:	69b8      	ldr	r0, [r7, #24]
 8001b36:	f005 fe5d 	bl	80077f4 <strncmp>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d103      	bne.n	8001b48 <parse_command+0xc4>
		cmd->cmd = Command_Word_GOTO;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
 8001b46:	e031      	b.n	8001bac <parse_command+0x128>
	} else if (strncmp(cmd_word, "SET ", 4) == 0) {
 8001b48:	2204      	movs	r2, #4
 8001b4a:	492f      	ldr	r1, [pc, #188]	; (8001c08 <parse_command+0x184>)
 8001b4c:	69b8      	ldr	r0, [r7, #24]
 8001b4e:	f005 fe51 	bl	80077f4 <strncmp>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d103      	bne.n	8001b60 <parse_command+0xdc>
		cmd->cmd = Command_Word_SET;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]
 8001b5e:	e025      	b.n	8001bac <parse_command+0x128>
	} else if (strncmp(cmd_word, "OFF ", 4) == 0) {
 8001b60:	2204      	movs	r2, #4
 8001b62:	492a      	ldr	r1, [pc, #168]	; (8001c0c <parse_command+0x188>)
 8001b64:	69b8      	ldr	r0, [r7, #24]
 8001b66:	f005 fe45 	bl	80077f4 <strncmp>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d103      	bne.n	8001b78 <parse_command+0xf4>
		cmd->cmd = Command_Word_OFF;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	701a      	strb	r2, [r3, #0]
 8001b76:	e019      	b.n	8001bac <parse_command+0x128>
	} else if (strncmp(cmd_word, "BLCK", 4) == 0) {
 8001b78:	2204      	movs	r2, #4
 8001b7a:	4925      	ldr	r1, [pc, #148]	; (8001c10 <parse_command+0x18c>)
 8001b7c:	69b8      	ldr	r0, [r7, #24]
 8001b7e:	f005 fe39 	bl	80077f4 <strncmp>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d103      	bne.n	8001b90 <parse_command+0x10c>
		cmd->cmd = Command_Word_BLOCK;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	701a      	strb	r2, [r3, #0]
 8001b8e:	e00d      	b.n	8001bac <parse_command+0x128>
	} else if (strncmp(cmd_word, "TNSN", 4) == 0) {
 8001b90:	2204      	movs	r2, #4
 8001b92:	4920      	ldr	r1, [pc, #128]	; (8001c14 <parse_command+0x190>)
 8001b94:	69b8      	ldr	r0, [r7, #24]
 8001b96:	f005 fe2d 	bl	80077f4 <strncmp>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d103      	bne.n	8001ba8 <parse_command+0x124>
		cmd->cmd = Command_Word_TENSION;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	701a      	strb	r2, [r3, #0]
 8001ba6:	e001      	b.n	8001bac <parse_command+0x128>
	} else {
		return 1;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e024      	b.n	8001bf6 <parse_command+0x172>
	}
	cmd->p1 = (float) p1_i * factor;
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	ee07 3a90 	vmov	s15, r3
 8001bb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	edc3 7a01 	vstr	s15, [r3, #4]
	cmd->p2 = (float) p2_i * factor;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bce:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	edc3 7a02 	vstr	s15, [r3, #8]
	cmd->p3 = (float) p3_i * factor;
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	ee07 3a90 	vmov	s15, r3
 8001be2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	edc3 7a03 	vstr	s15, [r3, #12]
	return 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	46b5      	mov	sp, r6
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	372c      	adds	r7, #44	; 0x2c
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c02:	bf00      	nop
 8001c04:	0800b404 	.word	0x0800b404
 8001c08:	0800b40c 	.word	0x0800b40c
 8001c0c:	0800b414 	.word	0x0800b414
 8001c10:	0800b41c 	.word	0x0800b41c
 8001c14:	0800b424 	.word	0x0800b424

08001c18 <clamp>:

int clamp(int val, int lo, int hi) {
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
	if (val < lo) {
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	da01      	bge.n	8001c30 <clamp+0x18>
		return lo;
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	e006      	b.n	8001c3e <clamp+0x26>
	} else if (val > hi) {
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	dd01      	ble.n	8001c3c <clamp+0x24>
		return hi;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	e000      	b.n	8001c3e <clamp+0x26>
	} else {
		return val;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <off>:

void off(Motor_t* m1, Motor_t* m2, Motor_t* m3) {
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
	drive_motor(m1, OFF, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f7ff fd88 	bl	8001770 <drive_motor>
	drive_motor(m2, OFF, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2100      	movs	r1, #0
 8001c64:	68b8      	ldr	r0, [r7, #8]
 8001c66:	f7ff fd83 	bl	8001770 <drive_motor>
	drive_motor(m3, OFF, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fd7e 	bl	8001770 <drive_motor>
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <block>:

void block(Motor_t* m1, Motor_t* m2, Motor_t* m3){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
	drive_motor(m1, BLOCK, (uint16_t) ~0);
 8001c88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f7ff fd6e 	bl	8001770 <drive_motor>
	drive_motor(m2, BLOCK, (uint16_t) ~0);
 8001c94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c98:	2101      	movs	r1, #1
 8001c9a:	68b8      	ldr	r0, [r7, #8]
 8001c9c:	f7ff fd68 	bl	8001770 <drive_motor>
	drive_motor(m3, BLOCK, (uint16_t) ~0);
 8001ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff fd62 	bl	8001770 <drive_motor>
}
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <update_state>:

void update_state(PID_Controller_t* pid) {
 8001cb4:	b5b0      	push	{r4, r5, r7, lr}
 8001cb6:	b08c      	sub	sp, #48	; 0x30
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	uint16_t raw_read = encoder_read_raw(pid->motor);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff feb7 	bl	8001a34 <encoder_read_raw>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	83fb      	strh	r3, [r7, #30]
	int32_t prev = (int32_t)pid->last_encoder_pos;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001cce:	61bb      	str	r3, [r7, #24]
	int32_t curr = (int32_t)raw_read;
 8001cd0:	8bfb      	ldrh	r3, [r7, #30]
 8001cd2:	617b      	str	r3, [r7, #20]
	int32_t diff = curr - prev;
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (abs(diff) > MAX_DIFF) {
 8001cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	bfb8      	it	lt
 8001ce2:	425b      	neglt	r3, r3
 8001ce4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ce8:	dd01      	ble.n	8001cee <update_state+0x3a>
		diff = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	pid->last_encoder_pos = raw_read;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	8bfa      	ldrh	r2, [r7, #30]
 8001cf2:	871a      	strh	r2, [r3, #56]	; 0x38

	if (diff < -(1 << 15)) {
 8001cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001cfa:	da04      	bge.n	8001d06 <update_state+0x52>
		// overflow in the positive direction
		diff = (1 << 16) + diff;
 8001cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d04:	e007      	b.n	8001d16 <update_state+0x62>
	} else if (diff > (1 << 15)) {
 8001d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d0c:	dd03      	ble.n	8001d16 <update_state+0x62>
		// overflow in the positive direction
		diff = diff - (1 << 16);
 8001d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d10:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	uint32_t delta_t_millis = pid->t_millis - pid->last_t_millis;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	613b      	str	r3, [r7, #16]
	pid->last_t_millis = pid->t_millis;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40
	pid->t_millis = HAL_GetTick();
 8001d2a:	f000 fc8b 	bl	8002644 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	635a      	str	r2, [r3, #52]	; 0x34

	float dpos = pid->E * (float) diff;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	ed93 7a06 	vldr	s14, [r3, #24]
 8001d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3c:	ee07 3a90 	vmov	s15, r3
 8001d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d48:	edc7 7a03 	vstr	s15, [r7, #12]
	float v = 1000.0 * dpos/(float) delta_t_millis;
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f7fe fc03 	bl	8000558 <__aeabi_f2d>
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	4b3c      	ldr	r3, [pc, #240]	; (8001e48 <update_state+0x194>)
 8001d58:	f7fe fc56 	bl	8000608 <__aeabi_dmul>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4614      	mov	r4, r2
 8001d62:	461d      	mov	r5, r3
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d6e:	ee17 0a90 	vmov	r0, s15
 8001d72:	f7fe fbf1 	bl	8000558 <__aeabi_f2d>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	4629      	mov	r1, r5
 8001d7e:	f7fe fd6d 	bl	800085c <__aeabi_ddiv>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f7fe ff35 	bl	8000bf8 <__aeabi_d2f>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < 4; i++) {
 8001d92:	2300      	movs	r3, #0
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d96:	e011      	b.n	8001dbc <update_state+0x108>
		pid->velocity_buf[i] = pid->velocity_buf[i+1];
 8001d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	3306      	adds	r3, #6
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	3304      	adds	r3, #4
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dac:	3306      	adds	r3, #6
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	3304      	adds	r3, #4
 8001db4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8001db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db8:	3301      	adds	r3, #1
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	ddea      	ble.n	8001d98 <update_state+0xe4>
	}
	pid->velocity_buf[4] = v;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c

	float sum = 0.0;
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < 5; i++) {
 8001dce:	2300      	movs	r3, #0
 8001dd0:	623b      	str	r3, [r7, #32]
 8001dd2:	e024      	b.n	8001e1e <update_state+0x16a>
		sum += pid->velocity_buf[i]/5.0;
 8001dd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001dd6:	f7fe fbbf 	bl	8000558 <__aeabi_f2d>
 8001dda:	4604      	mov	r4, r0
 8001ddc:	460d      	mov	r5, r1
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	3306      	adds	r3, #6
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	3304      	adds	r3, #4
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fbb3 	bl	8000558 <__aeabi_f2d>
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <update_state+0x198>)
 8001df8:	f7fe fd30 	bl	800085c <__aeabi_ddiv>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4620      	mov	r0, r4
 8001e02:	4629      	mov	r1, r5
 8001e04:	f7fe fa4a 	bl	800029c <__adddf3>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f7fe fef2 	bl	8000bf8 <__aeabi_d2f>
 8001e14:	4603      	mov	r3, r0
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < 5; i++) {
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	623b      	str	r3, [r7, #32]
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	ddd7      	ble.n	8001dd4 <update_state+0x120>
	}
	pid->velocity = sum;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30

	pid->pos += dpos;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e30:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001e3e:	bf00      	nop
 8001e40:	3730      	adds	r7, #48	; 0x30
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bdb0      	pop	{r4, r5, r7, pc}
 8001e46:	bf00      	nop
 8001e48:	408f4000 	.word	0x408f4000
 8001e4c:	40140000 	.word	0x40140000

08001e50 <tension>:

void tension(PID_Controller_t* p1, PID_Controller_t* p2, PID_Controller_t* p3) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b094      	sub	sp, #80	; 0x50
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
	float eps = 0.001; //mm/s
 8001e5c:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <tension+0x134>)
 8001e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
	drive_motor(p1->motor, BACK, (uint16_t) (~0)>>2);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001e68:	2103      	movs	r1, #3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fc80 	bl	8001770 <drive_motor>
	drive_motor(p2->motor, BACK, (uint16_t) (~0)>>2);
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001e78:	2103      	movs	r1, #3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fc78 	bl	8001770 <drive_motor>
	drive_motor(p3->motor, BACK, (uint16_t) (~0)>>2);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001e88:	2103      	movs	r1, #3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fc70 	bl	8001770 <drive_motor>

	char MSG[50] = {'\0'};
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	f107 0318 	add.w	r3, r7, #24
 8001e98:	222e      	movs	r2, #46	; 0x2e
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f004 fe01 	bl	8006aa4 <memset>

	uint32_t t_start = HAL_GetTick();
 8001ea2:	f000 fbcf 	bl	8002644 <HAL_GetTick>
 8001ea6:	64b8      	str	r0, [r7, #72]	; 0x48
	while (HAL_GetTick() - t_start < 1000) {
 8001ea8:	e00b      	b.n	8001ec2 <tension+0x72>
		update_state(p1);
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f7ff ff02 	bl	8001cb4 <update_state>
		update_state(p2);
 8001eb0:	68b8      	ldr	r0, [r7, #8]
 8001eb2:	f7ff feff 	bl	8001cb4 <update_state>
		update_state(p3);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff fefc 	bl	8001cb4 <update_state>
		HAL_Delay(50);
 8001ebc:	2032      	movs	r0, #50	; 0x32
 8001ebe:	f000 fbcd 	bl	800265c <HAL_Delay>
	while (HAL_GetTick() - t_start < 1000) {
 8001ec2:	f000 fbbf 	bl	8002644 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ed0:	d3eb      	bcc.n	8001eaa <tension+0x5a>
	}

	while ((abs(p1->velocity) > eps) || (abs(p2->velocity) > eps) || (abs(p3->velocity) > eps)) {
 8001ed2:	e00b      	b.n	8001eec <tension+0x9c>
		update_state(p1);
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f7ff feed 	bl	8001cb4 <update_state>
		update_state(p2);
 8001eda:	68b8      	ldr	r0, [r7, #8]
 8001edc:	f7ff feea 	bl	8001cb4 <update_state>
		update_state(p3);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff fee7 	bl	8001cb4 <update_state>
		HAL_Delay(20);
 8001ee6:	2014      	movs	r0, #20
 8001ee8:	f000 fbb8 	bl	800265c <HAL_Delay>
	while ((abs(p1->velocity) > eps) || (abs(p2->velocity) > eps) || (abs(p3->velocity) > eps)) {
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001ef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ef6:	ee17 3a90 	vmov	r3, s15
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	bfb8      	it	lt
 8001efe:	425b      	neglt	r3, r3
 8001f00:	ee07 3a90 	vmov	s15, r3
 8001f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f08:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f14:	d4de      	bmi.n	8001ed4 <tension+0x84>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f20:	ee17 3a90 	vmov	r3, s15
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bfb8      	it	lt
 8001f28:	425b      	neglt	r3, r3
 8001f2a:	ee07 3a90 	vmov	s15, r3
 8001f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f32:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3e:	d4c9      	bmi.n	8001ed4 <tension+0x84>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001f46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f4a:	ee17 3a90 	vmov	r3, s15
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	bfb8      	it	lt
 8001f52:	425b      	neglt	r3, r3
 8001f54:	ee07 3a90 	vmov	s15, r3
 8001f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f5c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f68:	d4b4      	bmi.n	8001ed4 <tension+0x84>
	}
	block(p1->motor, p2->motor, p3->motor);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	6819      	ldr	r1, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	f7ff fe80 	bl	8001c7c <block>
}
 8001f7c:	bf00      	nop
 8001f7e:	3750      	adds	r7, #80	; 0x50
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	3a83126f 	.word	0x3a83126f

08001f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f8c:	b672      	cpsid	i
}
 8001f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <Error_Handler+0x8>
	...

08001f94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9a:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <HAL_MspInit+0x44>)
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <HAL_MspInit+0x44>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6193      	str	r3, [r2, #24]
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_MspInit+0x44>)
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_MspInit+0x44>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4a08      	ldr	r2, [pc, #32]	; (8001fd8 <HAL_MspInit+0x44>)
 8001fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	61d3      	str	r3, [r2, #28]
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_MspInit+0x44>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000

08001fdc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08e      	sub	sp, #56	; 0x38
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a47      	ldr	r2, [pc, #284]	; (8002118 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d12a      	bne.n	8002054 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ffe:	4b47      	ldr	r3, [pc, #284]	; (800211c <HAL_TIM_Encoder_MspInit+0x140>)
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	4a46      	ldr	r2, [pc, #280]	; (800211c <HAL_TIM_Encoder_MspInit+0x140>)
 8002004:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002008:	6193      	str	r3, [r2, #24]
 800200a:	4b44      	ldr	r3, [pc, #272]	; (800211c <HAL_TIM_Encoder_MspInit+0x140>)
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002012:	623b      	str	r3, [r7, #32]
 8002014:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	4b41      	ldr	r3, [pc, #260]	; (800211c <HAL_TIM_Encoder_MspInit+0x140>)
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	4a40      	ldr	r2, [pc, #256]	; (800211c <HAL_TIM_Encoder_MspInit+0x140>)
 800201c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002020:	6153      	str	r3, [r2, #20]
 8002022:	4b3e      	ldr	r3, [pc, #248]	; (800211c <HAL_TIM_Encoder_MspInit+0x140>)
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	61fb      	str	r3, [r7, #28]
 800202c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN11_Pin|EN12_Pin;
 800202e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002040:	2306      	movs	r3, #6
 8002042:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002048:	4619      	mov	r1, r3
 800204a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800204e:	f000 fded 	bl	8002c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002052:	e05c      	b.n	800210e <HAL_TIM_Encoder_MspInit+0x132>
  else if(htim_encoder->Instance==TIM2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205c:	d129      	bne.n	80020b2 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800205e:	4b2f      	ldr	r3, [pc, #188]	; (800211c <HAL_TIM_Encoder_MspInit+0x140>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	4a2e      	ldr	r2, [pc, #184]	; (800211c <HAL_TIM_Encoder_MspInit+0x140>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	61d3      	str	r3, [r2, #28]
 800206a:	4b2c      	ldr	r3, [pc, #176]	; (800211c <HAL_TIM_Encoder_MspInit+0x140>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	61bb      	str	r3, [r7, #24]
 8002074:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002076:	4b29      	ldr	r3, [pc, #164]	; (800211c <HAL_TIM_Encoder_MspInit+0x140>)
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	4a28      	ldr	r2, [pc, #160]	; (800211c <HAL_TIM_Encoder_MspInit+0x140>)
 800207c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002080:	6153      	str	r3, [r2, #20]
 8002082:	4b26      	ldr	r3, [pc, #152]	; (800211c <HAL_TIM_Encoder_MspInit+0x140>)
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = EN21_Pin|EN22_Pin;
 800208e:	2303      	movs	r3, #3
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209a:	2300      	movs	r3, #0
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800209e:	2301      	movs	r3, #1
 80020a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a6:	4619      	mov	r1, r3
 80020a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ac:	f000 fdbe 	bl	8002c2c <HAL_GPIO_Init>
}
 80020b0:	e02d      	b.n	800210e <HAL_TIM_Encoder_MspInit+0x132>
  else if(htim_encoder->Instance==TIM3)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <HAL_TIM_Encoder_MspInit+0x144>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d128      	bne.n	800210e <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020bc:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_TIM_Encoder_MspInit+0x140>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	4a16      	ldr	r2, [pc, #88]	; (800211c <HAL_TIM_Encoder_MspInit+0x140>)
 80020c2:	f043 0302 	orr.w	r3, r3, #2
 80020c6:	61d3      	str	r3, [r2, #28]
 80020c8:	4b14      	ldr	r3, [pc, #80]	; (800211c <HAL_TIM_Encoder_MspInit+0x140>)
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <HAL_TIM_Encoder_MspInit+0x140>)
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	4a10      	ldr	r2, [pc, #64]	; (800211c <HAL_TIM_Encoder_MspInit+0x140>)
 80020da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020de:	6153      	str	r3, [r2, #20]
 80020e0:	4b0e      	ldr	r3, [pc, #56]	; (800211c <HAL_TIM_Encoder_MspInit+0x140>)
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EN31_Pin|EN32_Pin;
 80020ec:	23c0      	movs	r3, #192	; 0xc0
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2302      	movs	r3, #2
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f8:	2300      	movs	r3, #0
 80020fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020fc:	2302      	movs	r3, #2
 80020fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002104:	4619      	mov	r1, r3
 8002106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210a:	f000 fd8f 	bl	8002c2c <HAL_GPIO_Init>
}
 800210e:	bf00      	nop
 8002110:	3738      	adds	r7, #56	; 0x38
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40012c00 	.word	0x40012c00
 800211c:	40021000 	.word	0x40021000
 8002120:	40000400 	.word	0x40000400

08002124 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0a      	ldr	r2, [pc, #40]	; (800215c <HAL_TIM_Base_MspInit+0x38>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d10b      	bne.n	800214e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002136:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <HAL_TIM_Base_MspInit+0x3c>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	4a09      	ldr	r2, [pc, #36]	; (8002160 <HAL_TIM_Base_MspInit+0x3c>)
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	61d3      	str	r3, [r2, #28]
 8002142:	4b07      	ldr	r3, [pc, #28]	; (8002160 <HAL_TIM_Base_MspInit+0x3c>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40000800 	.word	0x40000800
 8002160:	40021000 	.word	0x40021000

08002164 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 030c 	add.w	r3, r7, #12
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a11      	ldr	r2, [pc, #68]	; (80021c8 <HAL_TIM_MspPostInit+0x64>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d11c      	bne.n	80021c0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002186:	4b11      	ldr	r3, [pc, #68]	; (80021cc <HAL_TIM_MspPostInit+0x68>)
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	4a10      	ldr	r2, [pc, #64]	; (80021cc <HAL_TIM_MspPostInit+0x68>)
 800218c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002190:	6153      	str	r3, [r2, #20]
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <HAL_TIM_MspPostInit+0x68>)
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 800219e:	f44f 7350 	mov.w	r3, #832	; 0x340
 80021a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021b0:	2302      	movs	r3, #2
 80021b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b4:	f107 030c 	add.w	r3, r7, #12
 80021b8:	4619      	mov	r1, r3
 80021ba:	4805      	ldr	r0, [pc, #20]	; (80021d0 <HAL_TIM_MspPostInit+0x6c>)
 80021bc:	f000 fd36 	bl	8002c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80021c0:	bf00      	nop
 80021c2:	3720      	adds	r7, #32
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40000800 	.word	0x40000800
 80021cc:	40021000 	.word	0x40021000
 80021d0:	48000400 	.word	0x48000400

080021d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08c      	sub	sp, #48	; 0x30
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a42      	ldr	r2, [pc, #264]	; (80022fc <HAL_UART_MspInit+0x128>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d129      	bne.n	800224a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021f6:	4b42      	ldr	r3, [pc, #264]	; (8002300 <HAL_UART_MspInit+0x12c>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	4a41      	ldr	r2, [pc, #260]	; (8002300 <HAL_UART_MspInit+0x12c>)
 80021fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002200:	61d3      	str	r3, [r2, #28]
 8002202:	4b3f      	ldr	r3, [pc, #252]	; (8002300 <HAL_UART_MspInit+0x12c>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220e:	4b3c      	ldr	r3, [pc, #240]	; (8002300 <HAL_UART_MspInit+0x12c>)
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	4a3b      	ldr	r2, [pc, #236]	; (8002300 <HAL_UART_MspInit+0x12c>)
 8002214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002218:	6153      	str	r3, [r2, #20]
 800221a:	4b39      	ldr	r3, [pc, #228]	; (8002300 <HAL_UART_MspInit+0x12c>)
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002226:	230c      	movs	r3, #12
 8002228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002232:	2303      	movs	r3, #3
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002236:	2307      	movs	r3, #7
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223a:	f107 031c 	add.w	r3, r7, #28
 800223e:	4619      	mov	r1, r3
 8002240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002244:	f000 fcf2 	bl	8002c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002248:	e053      	b.n	80022f2 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a2d      	ldr	r2, [pc, #180]	; (8002304 <HAL_UART_MspInit+0x130>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d14e      	bne.n	80022f2 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002254:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <HAL_UART_MspInit+0x12c>)
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	4a29      	ldr	r2, [pc, #164]	; (8002300 <HAL_UART_MspInit+0x12c>)
 800225a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800225e:	61d3      	str	r3, [r2, #28]
 8002260:	4b27      	ldr	r3, [pc, #156]	; (8002300 <HAL_UART_MspInit+0x12c>)
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800226c:	4b24      	ldr	r3, [pc, #144]	; (8002300 <HAL_UART_MspInit+0x12c>)
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	4a23      	ldr	r2, [pc, #140]	; (8002300 <HAL_UART_MspInit+0x12c>)
 8002272:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002276:	6153      	str	r3, [r2, #20]
 8002278:	4b21      	ldr	r3, [pc, #132]	; (8002300 <HAL_UART_MspInit+0x12c>)
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002284:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228a:	2302      	movs	r3, #2
 800228c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002292:	2303      	movs	r3, #3
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002296:	2307      	movs	r3, #7
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800229a:	f107 031c 	add.w	r3, r7, #28
 800229e:	4619      	mov	r1, r3
 80022a0:	4819      	ldr	r0, [pc, #100]	; (8002308 <HAL_UART_MspInit+0x134>)
 80022a2:	f000 fcc3 	bl	8002c2c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80022a6:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_UART_MspInit+0x138>)
 80022a8:	4a19      	ldr	r2, [pc, #100]	; (8002310 <HAL_UART_MspInit+0x13c>)
 80022aa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022ac:	4b17      	ldr	r3, [pc, #92]	; (800230c <HAL_UART_MspInit+0x138>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b2:	4b16      	ldr	r3, [pc, #88]	; (800230c <HAL_UART_MspInit+0x138>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <HAL_UART_MspInit+0x138>)
 80022ba:	2280      	movs	r2, #128	; 0x80
 80022bc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022be:	4b13      	ldr	r3, [pc, #76]	; (800230c <HAL_UART_MspInit+0x138>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_UART_MspInit+0x138>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <HAL_UART_MspInit+0x138>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <HAL_UART_MspInit+0x138>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80022d6:	480d      	ldr	r0, [pc, #52]	; (800230c <HAL_UART_MspInit+0x138>)
 80022d8:	f000 faf5 	bl	80028c6 <HAL_DMA_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_UART_MspInit+0x112>
      Error_Handler();
 80022e2:	f7ff fe51 	bl	8001f88 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a08      	ldr	r2, [pc, #32]	; (800230c <HAL_UART_MspInit+0x138>)
 80022ea:	675a      	str	r2, [r3, #116]	; 0x74
 80022ec:	4a07      	ldr	r2, [pc, #28]	; (800230c <HAL_UART_MspInit+0x138>)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6253      	str	r3, [r2, #36]	; 0x24
}
 80022f2:	bf00      	nop
 80022f4:	3730      	adds	r7, #48	; 0x30
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40004400 	.word	0x40004400
 8002300:	40021000 	.word	0x40021000
 8002304:	40004800 	.word	0x40004800
 8002308:	48000800 	.word	0x48000800
 800230c:	2000043c 	.word	0x2000043c
 8002310:	40020030 	.word	0x40020030

08002314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002318:	e7fe      	b.n	8002318 <NMI_Handler+0x4>

0800231a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800231e:	e7fe      	b.n	800231e <HardFault_Handler+0x4>

08002320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002324:	e7fe      	b.n	8002324 <MemManage_Handler+0x4>

08002326 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800232a:	e7fe      	b.n	800232a <BusFault_Handler+0x4>

0800232c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002330:	e7fe      	b.n	8002330 <UsageFault_Handler+0x4>

08002332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002360:	f000 f95c 	bl	800261c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}

08002368 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <DMA1_Channel3_IRQHandler+0x10>)
 800236e:	f000 fb50 	bl	8002a12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	2000043c 	.word	0x2000043c

0800237c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002380:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002384:	f000 fdf4 	bl	8002f70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}

0800238c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return 1;
 8002390:	2301      	movs	r3, #1
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <_kill>:

int _kill(int pid, int sig)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023a6:	f004 fb53 	bl	8006a50 <__errno>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2216      	movs	r2, #22
 80023ae:	601a      	str	r2, [r3, #0]
  return -1;
 80023b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_exit>:

void _exit (int status)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ffe7 	bl	800239c <_kill>
  while (1) {}    /* Make sure we hang here */
 80023ce:	e7fe      	b.n	80023ce <_exit+0x12>

080023d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	e00a      	b.n	80023f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023e2:	f3af 8000 	nop.w
 80023e6:	4601      	mov	r1, r0
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	60ba      	str	r2, [r7, #8]
 80023ee:	b2ca      	uxtb	r2, r1
 80023f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	3301      	adds	r3, #1
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	dbf0      	blt.n	80023e2 <_read+0x12>
  }

  return len;
 8002400:	687b      	ldr	r3, [r7, #4]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b086      	sub	sp, #24
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	e009      	b.n	8002430 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	60ba      	str	r2, [r7, #8]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	3301      	adds	r3, #1
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	dbf1      	blt.n	800241c <_write+0x12>
  }
  return len;
 8002438:	687b      	ldr	r3, [r7, #4]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <_close>:

int _close(int file)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800246a:	605a      	str	r2, [r3, #4]
  return 0;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <_isatty>:

int _isatty(int file)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002482:	2301      	movs	r3, #1
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b4:	4a14      	ldr	r2, [pc, #80]	; (8002508 <_sbrk+0x5c>)
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <_sbrk+0x60>)
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <_sbrk+0x64>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <_sbrk+0x64>)
 80024ca:	4a12      	ldr	r2, [pc, #72]	; (8002514 <_sbrk+0x68>)
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <_sbrk+0x64>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d207      	bcs.n	80024ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024dc:	f004 fab8 	bl	8006a50 <__errno>
 80024e0:	4603      	mov	r3, r0
 80024e2:	220c      	movs	r2, #12
 80024e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ea:	e009      	b.n	8002500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024ec:	4b08      	ldr	r3, [pc, #32]	; (8002510 <_sbrk+0x64>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <_sbrk+0x64>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	4a05      	ldr	r2, [pc, #20]	; (8002510 <_sbrk+0x64>)
 80024fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fe:	68fb      	ldr	r3, [r7, #12]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20010000 	.word	0x20010000
 800250c:	00000400 	.word	0x00000400
 8002510:	20000494 	.word	0x20000494
 8002514:	200004b0 	.word	0x200004b0

08002518 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <SystemInit+0x20>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002522:	4a05      	ldr	r2, [pc, #20]	; (8002538 <SystemInit+0x20>)
 8002524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800253c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002574 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002540:	f7ff ffea 	bl	8002518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002544:	480c      	ldr	r0, [pc, #48]	; (8002578 <LoopForever+0x6>)
  ldr r1, =_edata
 8002546:	490d      	ldr	r1, [pc, #52]	; (800257c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002548:	4a0d      	ldr	r2, [pc, #52]	; (8002580 <LoopForever+0xe>)
  movs r3, #0
 800254a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800254c:	e002      	b.n	8002554 <LoopCopyDataInit>

0800254e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800254e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002552:	3304      	adds	r3, #4

08002554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002558:	d3f9      	bcc.n	800254e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <LoopForever+0x12>)
  ldr r4, =_ebss
 800255c:	4c0a      	ldr	r4, [pc, #40]	; (8002588 <LoopForever+0x16>)
  movs r3, #0
 800255e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002560:	e001      	b.n	8002566 <LoopFillZerobss>

08002562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002564:	3204      	adds	r2, #4

08002566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002568:	d3fb      	bcc.n	8002562 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800256a:	f004 fa77 	bl	8006a5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800256e:	f7fe fbc9 	bl	8000d04 <main>

08002572 <LoopForever>:

LoopForever:
    b LoopForever
 8002572:	e7fe      	b.n	8002572 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002574:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800257c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002580:	0800b914 	.word	0x0800b914
  ldr r2, =_sbss
 8002584:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002588:	200004ac 	.word	0x200004ac

0800258c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800258c:	e7fe      	b.n	800258c <ADC1_2_IRQHandler>
	...

08002590 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <HAL_Init+0x28>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a07      	ldr	r2, [pc, #28]	; (80025b8 <HAL_Init+0x28>)
 800259a:	f043 0310 	orr.w	r3, r3, #16
 800259e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a0:	2003      	movs	r0, #3
 80025a2:	f000 f94f 	bl	8002844 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025a6:	200f      	movs	r0, #15
 80025a8:	f000 f808 	bl	80025bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025ac:	f7ff fcf2 	bl	8001f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40022000 	.word	0x40022000

080025bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_InitTick+0x54>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_InitTick+0x58>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	4619      	mov	r1, r3
 80025ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f967 	bl	80028ae <HAL_SYSTICK_Config>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e00e      	b.n	8002608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b0f      	cmp	r3, #15
 80025ee:	d80a      	bhi.n	8002606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f0:	2200      	movs	r2, #0
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295
 80025f8:	f000 f92f 	bl	800285a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025fc:	4a06      	ldr	r2, [pc, #24]	; (8002618 <HAL_InitTick+0x5c>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e000      	b.n	8002608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20000000 	.word	0x20000000
 8002614:	20000008 	.word	0x20000008
 8002618:	20000004 	.word	0x20000004

0800261c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_IncTick+0x20>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_IncTick+0x24>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4413      	add	r3, r2
 800262c:	4a04      	ldr	r2, [pc, #16]	; (8002640 <HAL_IncTick+0x24>)
 800262e:	6013      	str	r3, [r2, #0]
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20000008 	.word	0x20000008
 8002640:	20000498 	.word	0x20000498

08002644 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return uwTick;  
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <HAL_GetTick+0x14>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000498 	.word	0x20000498

0800265c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002664:	f7ff ffee 	bl	8002644 <HAL_GetTick>
 8002668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002674:	d005      	beq.n	8002682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002676:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <HAL_Delay+0x44>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4413      	add	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002682:	bf00      	nop
 8002684:	f7ff ffde 	bl	8002644 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	429a      	cmp	r2, r3
 8002692:	d8f7      	bhi.n	8002684 <HAL_Delay+0x28>
  {
  }
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000008 	.word	0x20000008

080026a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026c0:	4013      	ands	r3, r2
 80026c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d6:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	60d3      	str	r3, [r2, #12]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <__NVIC_GetPriorityGrouping+0x18>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	f003 0307 	and.w	r3, r3, #7
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	2b00      	cmp	r3, #0
 8002718:	db0b      	blt.n	8002732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	f003 021f 	and.w	r2, r3, #31
 8002720:	4907      	ldr	r1, [pc, #28]	; (8002740 <__NVIC_EnableIRQ+0x38>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	2001      	movs	r0, #1
 800272a:	fa00 f202 	lsl.w	r2, r0, r2
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000e100 	.word	0xe000e100

08002744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	db0a      	blt.n	800276e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	b2da      	uxtb	r2, r3
 800275c:	490c      	ldr	r1, [pc, #48]	; (8002790 <__NVIC_SetPriority+0x4c>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	0112      	lsls	r2, r2, #4
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	440b      	add	r3, r1
 8002768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800276c:	e00a      	b.n	8002784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4908      	ldr	r1, [pc, #32]	; (8002794 <__NVIC_SetPriority+0x50>)
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	3b04      	subs	r3, #4
 800277c:	0112      	lsls	r2, r2, #4
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	440b      	add	r3, r1
 8002782:	761a      	strb	r2, [r3, #24]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000e100 	.word	0xe000e100
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	; 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f1c3 0307 	rsb	r3, r3, #7
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	bf28      	it	cs
 80027b6:	2304      	movcs	r3, #4
 80027b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3304      	adds	r3, #4
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d902      	bls.n	80027c8 <NVIC_EncodePriority+0x30>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3b03      	subs	r3, #3
 80027c6:	e000      	b.n	80027ca <NVIC_EncodePriority+0x32>
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	f04f 32ff 	mov.w	r2, #4294967295
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	401a      	ands	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e0:	f04f 31ff 	mov.w	r1, #4294967295
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	43d9      	mvns	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f0:	4313      	orrs	r3, r2
         );
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3724      	adds	r7, #36	; 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3b01      	subs	r3, #1
 800280c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002810:	d301      	bcc.n	8002816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002812:	2301      	movs	r3, #1
 8002814:	e00f      	b.n	8002836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <SysTick_Config+0x40>)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3b01      	subs	r3, #1
 800281c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800281e:	210f      	movs	r1, #15
 8002820:	f04f 30ff 	mov.w	r0, #4294967295
 8002824:	f7ff ff8e 	bl	8002744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <SysTick_Config+0x40>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282e:	4b04      	ldr	r3, [pc, #16]	; (8002840 <SysTick_Config+0x40>)
 8002830:	2207      	movs	r2, #7
 8002832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	e000e010 	.word	0xe000e010

08002844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ff29 	bl	80026a4 <__NVIC_SetPriorityGrouping>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800286c:	f7ff ff3e 	bl	80026ec <__NVIC_GetPriorityGrouping>
 8002870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	6978      	ldr	r0, [r7, #20]
 8002878:	f7ff ff8e 	bl	8002798 <NVIC_EncodePriority>
 800287c:	4602      	mov	r2, r0
 800287e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff5d 	bl	8002744 <__NVIC_SetPriority>
}
 800288a:	bf00      	nop
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800289c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff31 	bl	8002708 <__NVIC_EnableIRQ>
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ffa2 	bl	8002800 <SysTick_Config>
 80028bc:	4603      	mov	r3, r0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e037      	b.n	800294c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80028f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002900:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002918:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f940 	bl	8002bb4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}  
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_DMA_Start_IT+0x20>
 8002970:	2302      	movs	r3, #2
 8002972:	e04a      	b.n	8002a0a <HAL_DMA_Start_IT+0xb6>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002982:	2b01      	cmp	r3, #1
 8002984:	d13a      	bne.n	80029fc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2202      	movs	r2, #2
 800298a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0201 	bic.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f8d4 	bl	8002b58 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 020e 	orr.w	r2, r2, #14
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	e00f      	b.n	80029ea <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 020a 	orr.w	r2, r2, #10
 80029d8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0204 	bic.w	r2, r2, #4
 80029e8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0201 	orr.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	e005      	b.n	8002a08 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002a04:	2302      	movs	r3, #2
 8002a06:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b084      	sub	sp, #16
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	2204      	movs	r2, #4
 8002a30:	409a      	lsls	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d024      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x72>
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d01f      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0320 	and.w	r3, r3, #32
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d107      	bne.n	8002a62 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0204 	bic.w	r2, r2, #4
 8002a60:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	2104      	movs	r1, #4
 8002a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a70:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d06a      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002a82:	e065      	b.n	8002b50 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	2202      	movs	r2, #2
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d02c      	beq.n	8002aee <HAL_DMA_IRQHandler+0xdc>
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d027      	beq.n	8002aee <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 020a 	bic.w	r2, r2, #10
 8002aba:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002acc:	2102      	movs	r1, #2
 8002ace:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d035      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002aec:	e030      	b.n	8002b50 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	2208      	movs	r2, #8
 8002af4:	409a      	lsls	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d028      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x13e>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d023      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 020e 	bic.w	r2, r2, #14
 8002b16:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b20:	2101      	movs	r1, #1
 8002b22:	fa01 f202 	lsl.w	r2, r1, r2
 8002b26:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d004      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	4798      	blx	r3
    }
  }
}  
 8002b4e:	e7ff      	b.n	8002b50 <HAL_DMA_IRQHandler+0x13e>
 8002b50:	bf00      	nop
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6e:	2101      	movs	r1, #1
 8002b70:	fa01 f202 	lsl.w	r2, r1, r2
 8002b74:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b10      	cmp	r3, #16
 8002b84:	d108      	bne.n	8002b98 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b96:	e007      	b.n	8002ba8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	60da      	str	r2, [r3, #12]
}
 8002ba8:	bf00      	nop
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <DMA_CalcBaseAndBitshift+0x60>)
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d80f      	bhi.n	8002be8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <DMA_CalcBaseAndBitshift+0x64>)
 8002bd0:	4413      	add	r3, r2
 8002bd2:	4a12      	ldr	r2, [pc, #72]	; (8002c1c <DMA_CalcBaseAndBitshift+0x68>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	009a      	lsls	r2, r3, #2
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a0f      	ldr	r2, [pc, #60]	; (8002c20 <DMA_CalcBaseAndBitshift+0x6c>)
 8002be4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002be6:	e00e      	b.n	8002c06 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <DMA_CalcBaseAndBitshift+0x70>)
 8002bf0:	4413      	add	r3, r2
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <DMA_CalcBaseAndBitshift+0x68>)
 8002bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	009a      	lsls	r2, r3, #2
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a09      	ldr	r2, [pc, #36]	; (8002c28 <DMA_CalcBaseAndBitshift+0x74>)
 8002c04:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40020407 	.word	0x40020407
 8002c18:	bffdfff8 	.word	0xbffdfff8
 8002c1c:	cccccccd 	.word	0xcccccccd
 8002c20:	40020000 	.word	0x40020000
 8002c24:	bffdfbf8 	.word	0xbffdfbf8
 8002c28:	40020400 	.word	0x40020400

08002c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c3a:	e160      	b.n	8002efe <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	2101      	movs	r1, #1
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	fa01 f303 	lsl.w	r3, r1, r3
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 8152 	beq.w	8002ef8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d005      	beq.n	8002c6c <HAL_GPIO_Init+0x40>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d130      	bne.n	8002cce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	2203      	movs	r2, #3
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	091b      	lsrs	r3, r3, #4
 8002cb8:	f003 0201 	and.w	r2, r3, #1
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d017      	beq.n	8002d0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d123      	bne.n	8002d5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	08da      	lsrs	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3208      	adds	r2, #8
 8002d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	220f      	movs	r2, #15
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4013      	ands	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	08da      	lsrs	r2, r3, #3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3208      	adds	r2, #8
 8002d58:	6939      	ldr	r1, [r7, #16]
 8002d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	2203      	movs	r2, #3
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 0203 	and.w	r2, r3, #3
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80ac 	beq.w	8002ef8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da0:	4b5e      	ldr	r3, [pc, #376]	; (8002f1c <HAL_GPIO_Init+0x2f0>)
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	4a5d      	ldr	r2, [pc, #372]	; (8002f1c <HAL_GPIO_Init+0x2f0>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	6193      	str	r3, [r2, #24]
 8002dac:	4b5b      	ldr	r3, [pc, #364]	; (8002f1c <HAL_GPIO_Init+0x2f0>)
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002db8:	4a59      	ldr	r2, [pc, #356]	; (8002f20 <HAL_GPIO_Init+0x2f4>)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	220f      	movs	r2, #15
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002de2:	d025      	beq.n	8002e30 <HAL_GPIO_Init+0x204>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a4f      	ldr	r2, [pc, #316]	; (8002f24 <HAL_GPIO_Init+0x2f8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d01f      	beq.n	8002e2c <HAL_GPIO_Init+0x200>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a4e      	ldr	r2, [pc, #312]	; (8002f28 <HAL_GPIO_Init+0x2fc>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d019      	beq.n	8002e28 <HAL_GPIO_Init+0x1fc>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a4d      	ldr	r2, [pc, #308]	; (8002f2c <HAL_GPIO_Init+0x300>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d013      	beq.n	8002e24 <HAL_GPIO_Init+0x1f8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a4c      	ldr	r2, [pc, #304]	; (8002f30 <HAL_GPIO_Init+0x304>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00d      	beq.n	8002e20 <HAL_GPIO_Init+0x1f4>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a4b      	ldr	r2, [pc, #300]	; (8002f34 <HAL_GPIO_Init+0x308>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d007      	beq.n	8002e1c <HAL_GPIO_Init+0x1f0>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a4a      	ldr	r2, [pc, #296]	; (8002f38 <HAL_GPIO_Init+0x30c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d101      	bne.n	8002e18 <HAL_GPIO_Init+0x1ec>
 8002e14:	2306      	movs	r3, #6
 8002e16:	e00c      	b.n	8002e32 <HAL_GPIO_Init+0x206>
 8002e18:	2307      	movs	r3, #7
 8002e1a:	e00a      	b.n	8002e32 <HAL_GPIO_Init+0x206>
 8002e1c:	2305      	movs	r3, #5
 8002e1e:	e008      	b.n	8002e32 <HAL_GPIO_Init+0x206>
 8002e20:	2304      	movs	r3, #4
 8002e22:	e006      	b.n	8002e32 <HAL_GPIO_Init+0x206>
 8002e24:	2303      	movs	r3, #3
 8002e26:	e004      	b.n	8002e32 <HAL_GPIO_Init+0x206>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e002      	b.n	8002e32 <HAL_GPIO_Init+0x206>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <HAL_GPIO_Init+0x206>
 8002e30:	2300      	movs	r3, #0
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	f002 0203 	and.w	r2, r2, #3
 8002e38:	0092      	lsls	r2, r2, #2
 8002e3a:	4093      	lsls	r3, r2
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e42:	4937      	ldr	r1, [pc, #220]	; (8002f20 <HAL_GPIO_Init+0x2f4>)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	089b      	lsrs	r3, r3, #2
 8002e48:	3302      	adds	r3, #2
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e50:	4b3a      	ldr	r3, [pc, #232]	; (8002f3c <HAL_GPIO_Init+0x310>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e74:	4a31      	ldr	r2, [pc, #196]	; (8002f3c <HAL_GPIO_Init+0x310>)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e7a:	4b30      	ldr	r3, [pc, #192]	; (8002f3c <HAL_GPIO_Init+0x310>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	43db      	mvns	r3, r3
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4013      	ands	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e9e:	4a27      	ldr	r2, [pc, #156]	; (8002f3c <HAL_GPIO_Init+0x310>)
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ea4:	4b25      	ldr	r3, [pc, #148]	; (8002f3c <HAL_GPIO_Init+0x310>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ec8:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <HAL_GPIO_Init+0x310>)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ece:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_GPIO_Init+0x310>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4013      	ands	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ef2:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <HAL_GPIO_Init+0x310>)
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	3301      	adds	r3, #1
 8002efc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f47f ae97 	bne.w	8002c3c <HAL_GPIO_Init+0x10>
  }
}
 8002f0e:	bf00      	nop
 8002f10:	bf00      	nop
 8002f12:	371c      	adds	r7, #28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40010000 	.word	0x40010000
 8002f24:	48000400 	.word	0x48000400
 8002f28:	48000800 	.word	0x48000800
 8002f2c:	48000c00 	.word	0x48000c00
 8002f30:	48001000 	.word	0x48001000
 8002f34:	48001400 	.word	0x48001400
 8002f38:	48001800 	.word	0x48001800
 8002f3c:	40010400 	.word	0x40010400

08002f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	807b      	strh	r3, [r7, #2]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f50:	787b      	ldrb	r3, [r7, #1]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f56:	887a      	ldrh	r2, [r7, #2]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f5c:	e002      	b.n	8002f64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f5e:	887a      	ldrh	r2, [r7, #2]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f7a:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f7c:	695a      	ldr	r2, [r3, #20]
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d006      	beq.n	8002f94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f86:	4a05      	ldr	r2, [pc, #20]	; (8002f9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f806 	bl	8002fa0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f94:	bf00      	nop
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40010400 	.word	0x40010400

08002fa0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fc4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fc8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f001 b83a 	b.w	8004052 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fe2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 816f 	beq.w	80032d2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ff4:	4bb5      	ldr	r3, [pc, #724]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 030c 	and.w	r3, r3, #12
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d00c      	beq.n	800301a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003000:	4bb2      	ldr	r3, [pc, #712]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 030c 	and.w	r3, r3, #12
 8003008:	2b08      	cmp	r3, #8
 800300a:	d15c      	bne.n	80030c6 <HAL_RCC_OscConfig+0x10e>
 800300c:	4baf      	ldr	r3, [pc, #700]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003018:	d155      	bne.n	80030c6 <HAL_RCC_OscConfig+0x10e>
 800301a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800301e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800302e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b01      	cmp	r3, #1
 8003044:	d102      	bne.n	800304c <HAL_RCC_OscConfig+0x94>
 8003046:	4ba1      	ldr	r3, [pc, #644]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	e015      	b.n	8003078 <HAL_RCC_OscConfig+0xc0>
 800304c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003050:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003054:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003058:	fa93 f3a3 	rbit	r3, r3
 800305c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003064:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003068:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003074:	4b95      	ldr	r3, [pc, #596]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800307c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003080:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003084:	fa92 f2a2 	rbit	r2, r2
 8003088:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800308c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003090:	fab2 f282 	clz	r2, r2
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	f042 0220 	orr.w	r2, r2, #32
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	f002 021f 	and.w	r2, r2, #31
 80030a0:	2101      	movs	r1, #1
 80030a2:	fa01 f202 	lsl.w	r2, r1, r2
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 8111 	beq.w	80032d0 <HAL_RCC_OscConfig+0x318>
 80030ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f040 8108 	bne.w	80032d0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f000 bfc6 	b.w	8004052 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d6:	d106      	bne.n	80030e6 <HAL_RCC_OscConfig+0x12e>
 80030d8:	4b7c      	ldr	r3, [pc, #496]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a7b      	ldr	r2, [pc, #492]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 80030de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	e036      	b.n	8003154 <HAL_RCC_OscConfig+0x19c>
 80030e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10c      	bne.n	8003110 <HAL_RCC_OscConfig+0x158>
 80030f6:	4b75      	ldr	r3, [pc, #468]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a74      	ldr	r2, [pc, #464]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 80030fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	4b72      	ldr	r3, [pc, #456]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a71      	ldr	r2, [pc, #452]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 8003108:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e021      	b.n	8003154 <HAL_RCC_OscConfig+0x19c>
 8003110:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003114:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0x184>
 8003122:	4b6a      	ldr	r3, [pc, #424]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a69      	ldr	r2, [pc, #420]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 8003128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	4b67      	ldr	r3, [pc, #412]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a66      	ldr	r2, [pc, #408]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e00b      	b.n	8003154 <HAL_RCC_OscConfig+0x19c>
 800313c:	4b63      	ldr	r3, [pc, #396]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a62      	ldr	r2, [pc, #392]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 8003142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	4b60      	ldr	r3, [pc, #384]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a5f      	ldr	r2, [pc, #380]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 800314e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003152:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003154:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003158:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d059      	beq.n	8003218 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003164:	f7ff fa6e 	bl	8002644 <HAL_GetTick>
 8003168:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800316e:	f7ff fa69 	bl	8002644 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	; 0x64
 800317c:	d902      	bls.n	8003184 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	f000 bf67 	b.w	8004052 <HAL_RCC_OscConfig+0x109a>
 8003184:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003188:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003198:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319c:	fab3 f383 	clz	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d102      	bne.n	80031b6 <HAL_RCC_OscConfig+0x1fe>
 80031b0:	4b46      	ldr	r3, [pc, #280]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	e015      	b.n	80031e2 <HAL_RCC_OscConfig+0x22a>
 80031b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031ba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80031c2:	fa93 f3a3 	rbit	r3, r3
 80031c6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80031ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031ce:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80031d2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80031d6:	fa93 f3a3 	rbit	r3, r3
 80031da:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80031de:	4b3b      	ldr	r3, [pc, #236]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031e6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80031ea:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80031ee:	fa92 f2a2 	rbit	r2, r2
 80031f2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80031f6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80031fa:	fab2 f282 	clz	r2, r2
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	f042 0220 	orr.w	r2, r2, #32
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	f002 021f 	and.w	r2, r2, #31
 800320a:	2101      	movs	r1, #1
 800320c:	fa01 f202 	lsl.w	r2, r1, r2
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0ab      	beq.n	800316e <HAL_RCC_OscConfig+0x1b6>
 8003216:	e05c      	b.n	80032d2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7ff fa14 	bl	8002644 <HAL_GetTick>
 800321c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003220:	e00a      	b.n	8003238 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003222:	f7ff fa0f 	bl	8002644 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b64      	cmp	r3, #100	; 0x64
 8003230:	d902      	bls.n	8003238 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	f000 bf0d 	b.w	8004052 <HAL_RCC_OscConfig+0x109a>
 8003238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800323c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003240:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003244:	fa93 f3a3 	rbit	r3, r3
 8003248:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800324c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b01      	cmp	r3, #1
 8003262:	d102      	bne.n	800326a <HAL_RCC_OscConfig+0x2b2>
 8003264:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	e015      	b.n	8003296 <HAL_RCC_OscConfig+0x2de>
 800326a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800326e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003276:	fa93 f3a3 	rbit	r3, r3
 800327a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800327e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003282:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003286:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <HAL_RCC_OscConfig+0x314>)
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800329a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800329e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80032a2:	fa92 f2a2 	rbit	r2, r2
 80032a6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80032aa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80032ae:	fab2 f282 	clz	r2, r2
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	f042 0220 	orr.w	r2, r2, #32
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	f002 021f 	and.w	r2, r2, #31
 80032be:	2101      	movs	r1, #1
 80032c0:	fa01 f202 	lsl.w	r2, r1, r2
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1ab      	bne.n	8003222 <HAL_RCC_OscConfig+0x26a>
 80032ca:	e002      	b.n	80032d2 <HAL_RCC_OscConfig+0x31a>
 80032cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 817f 	beq.w	80035e6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80032e8:	4ba7      	ldr	r3, [pc, #668]	; (8003588 <HAL_RCC_OscConfig+0x5d0>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00c      	beq.n	800330e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80032f4:	4ba4      	ldr	r3, [pc, #656]	; (8003588 <HAL_RCC_OscConfig+0x5d0>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 030c 	and.w	r3, r3, #12
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d173      	bne.n	80033e8 <HAL_RCC_OscConfig+0x430>
 8003300:	4ba1      	ldr	r3, [pc, #644]	; (8003588 <HAL_RCC_OscConfig+0x5d0>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800330c:	d16c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x430>
 800330e:	2302      	movs	r3, #2
 8003310:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003318:	fa93 f3a3 	rbit	r3, r3
 800331c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003320:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003324:	fab3 f383 	clz	r3, r3
 8003328:	b2db      	uxtb	r3, r3
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	b2db      	uxtb	r3, r3
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b01      	cmp	r3, #1
 8003336:	d102      	bne.n	800333e <HAL_RCC_OscConfig+0x386>
 8003338:	4b93      	ldr	r3, [pc, #588]	; (8003588 <HAL_RCC_OscConfig+0x5d0>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	e013      	b.n	8003366 <HAL_RCC_OscConfig+0x3ae>
 800333e:	2302      	movs	r3, #2
 8003340:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003344:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003348:	fa93 f3a3 	rbit	r3, r3
 800334c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003350:	2302      	movs	r3, #2
 8003352:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003356:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800335a:	fa93 f3a3 	rbit	r3, r3
 800335e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003362:	4b89      	ldr	r3, [pc, #548]	; (8003588 <HAL_RCC_OscConfig+0x5d0>)
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	2202      	movs	r2, #2
 8003368:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800336c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003370:	fa92 f2a2 	rbit	r2, r2
 8003374:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003378:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800337c:	fab2 f282 	clz	r2, r2
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	f042 0220 	orr.w	r2, r2, #32
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	f002 021f 	and.w	r2, r2, #31
 800338c:	2101      	movs	r1, #1
 800338e:	fa01 f202 	lsl.w	r2, r1, r2
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_RCC_OscConfig+0x3f6>
 8003398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800339c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d002      	beq.n	80033ae <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f000 be52 	b.w	8004052 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ae:	4b76      	ldr	r3, [pc, #472]	; (8003588 <HAL_RCC_OscConfig+0x5d0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	21f8      	movs	r1, #248	; 0xf8
 80033c4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80033cc:	fa91 f1a1 	rbit	r1, r1
 80033d0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80033d4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80033d8:	fab1 f181 	clz	r1, r1
 80033dc:	b2c9      	uxtb	r1, r1
 80033de:	408b      	lsls	r3, r1
 80033e0:	4969      	ldr	r1, [pc, #420]	; (8003588 <HAL_RCC_OscConfig+0x5d0>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e6:	e0fe      	b.n	80035e6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 8088 	beq.w	800350a <HAL_RCC_OscConfig+0x552>
 80033fa:	2301      	movs	r3, #1
 80033fc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003400:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003404:	fa93 f3a3 	rbit	r3, r3
 8003408:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800340c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003410:	fab3 f383 	clz	r3, r3
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800341a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	461a      	mov	r2, r3
 8003422:	2301      	movs	r3, #1
 8003424:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7ff f90d 	bl	8002644 <HAL_GetTick>
 800342a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342e:	e00a      	b.n	8003446 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003430:	f7ff f908 	bl	8002644 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d902      	bls.n	8003446 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	f000 be06 	b.w	8004052 <HAL_RCC_OscConfig+0x109a>
 8003446:	2302      	movs	r3, #2
 8003448:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003450:	fa93 f3a3 	rbit	r3, r3
 8003454:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003458:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345c:	fab3 f383 	clz	r3, r3
 8003460:	b2db      	uxtb	r3, r3
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	b2db      	uxtb	r3, r3
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	d102      	bne.n	8003476 <HAL_RCC_OscConfig+0x4be>
 8003470:	4b45      	ldr	r3, [pc, #276]	; (8003588 <HAL_RCC_OscConfig+0x5d0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	e013      	b.n	800349e <HAL_RCC_OscConfig+0x4e6>
 8003476:	2302      	movs	r3, #2
 8003478:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003488:	2302      	movs	r3, #2
 800348a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800348e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800349a:	4b3b      	ldr	r3, [pc, #236]	; (8003588 <HAL_RCC_OscConfig+0x5d0>)
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	2202      	movs	r2, #2
 80034a0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80034a4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80034a8:	fa92 f2a2 	rbit	r2, r2
 80034ac:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80034b0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80034b4:	fab2 f282 	clz	r2, r2
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	f042 0220 	orr.w	r2, r2, #32
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	f002 021f 	and.w	r2, r2, #31
 80034c4:	2101      	movs	r1, #1
 80034c6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0af      	beq.n	8003430 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d0:	4b2d      	ldr	r3, [pc, #180]	; (8003588 <HAL_RCC_OscConfig+0x5d0>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	21f8      	movs	r1, #248	; 0xf8
 80034e6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80034ee:	fa91 f1a1 	rbit	r1, r1
 80034f2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80034f6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80034fa:	fab1 f181 	clz	r1, r1
 80034fe:	b2c9      	uxtb	r1, r1
 8003500:	408b      	lsls	r3, r1
 8003502:	4921      	ldr	r1, [pc, #132]	; (8003588 <HAL_RCC_OscConfig+0x5d0>)
 8003504:	4313      	orrs	r3, r2
 8003506:	600b      	str	r3, [r1, #0]
 8003508:	e06d      	b.n	80035e6 <HAL_RCC_OscConfig+0x62e>
 800350a:	2301      	movs	r3, #1
 800350c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003514:	fa93 f3a3 	rbit	r3, r3
 8003518:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800351c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003520:	fab3 f383 	clz	r3, r3
 8003524:	b2db      	uxtb	r3, r3
 8003526:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800352a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	461a      	mov	r2, r3
 8003532:	2300      	movs	r3, #0
 8003534:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003536:	f7ff f885 	bl	8002644 <HAL_GetTick>
 800353a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353e:	e00a      	b.n	8003556 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003540:	f7ff f880 	bl	8002644 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d902      	bls.n	8003556 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	f000 bd7e 	b.w	8004052 <HAL_RCC_OscConfig+0x109a>
 8003556:	2302      	movs	r3, #2
 8003558:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003560:	fa93 f3a3 	rbit	r3, r3
 8003564:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003568:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356c:	fab3 f383 	clz	r3, r3
 8003570:	b2db      	uxtb	r3, r3
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b01      	cmp	r3, #1
 800357e:	d105      	bne.n	800358c <HAL_RCC_OscConfig+0x5d4>
 8003580:	4b01      	ldr	r3, [pc, #4]	; (8003588 <HAL_RCC_OscConfig+0x5d0>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	e016      	b.n	80035b4 <HAL_RCC_OscConfig+0x5fc>
 8003586:	bf00      	nop
 8003588:	40021000 	.word	0x40021000
 800358c:	2302      	movs	r3, #2
 800358e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003596:	fa93 f3a3 	rbit	r3, r3
 800359a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800359e:	2302      	movs	r3, #2
 80035a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80035a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80035a8:	fa93 f3a3 	rbit	r3, r3
 80035ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80035b0:	4bbf      	ldr	r3, [pc, #764]	; (80038b0 <HAL_RCC_OscConfig+0x8f8>)
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	2202      	movs	r2, #2
 80035b6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80035ba:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80035be:	fa92 f2a2 	rbit	r2, r2
 80035c2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80035c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80035ca:	fab2 f282 	clz	r2, r2
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	f042 0220 	orr.w	r2, r2, #32
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	f002 021f 	and.w	r2, r2, #31
 80035da:	2101      	movs	r1, #1
 80035dc:	fa01 f202 	lsl.w	r2, r1, r2
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1ac      	bne.n	8003540 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 8113 	beq.w	8003822 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003600:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d07c      	beq.n	8003706 <HAL_RCC_OscConfig+0x74e>
 800360c:	2301      	movs	r3, #1
 800360e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800361e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003622:	fab3 f383 	clz	r3, r3
 8003626:	b2db      	uxtb	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	4ba2      	ldr	r3, [pc, #648]	; (80038b4 <HAL_RCC_OscConfig+0x8fc>)
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	461a      	mov	r2, r3
 8003632:	2301      	movs	r3, #1
 8003634:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003636:	f7ff f805 	bl	8002644 <HAL_GetTick>
 800363a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363e:	e00a      	b.n	8003656 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003640:	f7ff f800 	bl	8002644 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d902      	bls.n	8003656 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	f000 bcfe 	b.w	8004052 <HAL_RCC_OscConfig+0x109a>
 8003656:	2302      	movs	r3, #2
 8003658:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003660:	fa93 f2a3 	rbit	r2, r3
 8003664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003668:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003672:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003676:	2202      	movs	r2, #2
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800367e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	fa93 f2a3 	rbit	r2, r3
 8003688:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800368c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003696:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800369a:	2202      	movs	r2, #2
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	fa93 f2a3 	rbit	r2, r3
 80036ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80036b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b6:	4b7e      	ldr	r3, [pc, #504]	; (80038b0 <HAL_RCC_OscConfig+0x8f8>)
 80036b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80036c2:	2102      	movs	r1, #2
 80036c4:	6019      	str	r1, [r3, #0]
 80036c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	fa93 f1a3 	rbit	r1, r3
 80036d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80036dc:	6019      	str	r1, [r3, #0]
  return result;
 80036de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036e2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	fab3 f383 	clz	r3, r3
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	2101      	movs	r1, #1
 80036fa:	fa01 f303 	lsl.w	r3, r1, r3
 80036fe:	4013      	ands	r3, r2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d09d      	beq.n	8003640 <HAL_RCC_OscConfig+0x688>
 8003704:	e08d      	b.n	8003822 <HAL_RCC_OscConfig+0x86a>
 8003706:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800370a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800370e:	2201      	movs	r2, #1
 8003710:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003716:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	fa93 f2a3 	rbit	r2, r3
 8003720:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003724:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003728:	601a      	str	r2, [r3, #0]
  return result;
 800372a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800372e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003732:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003734:	fab3 f383 	clz	r3, r3
 8003738:	b2db      	uxtb	r3, r3
 800373a:	461a      	mov	r2, r3
 800373c:	4b5d      	ldr	r3, [pc, #372]	; (80038b4 <HAL_RCC_OscConfig+0x8fc>)
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	461a      	mov	r2, r3
 8003744:	2300      	movs	r3, #0
 8003746:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003748:	f7fe ff7c 	bl	8002644 <HAL_GetTick>
 800374c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003750:	e00a      	b.n	8003768 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003752:	f7fe ff77 	bl	8002644 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d902      	bls.n	8003768 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	f000 bc75 	b.w	8004052 <HAL_RCC_OscConfig+0x109a>
 8003768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800376c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003770:	2202      	movs	r2, #2
 8003772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003778:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	fa93 f2a3 	rbit	r2, r3
 8003782:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003786:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003790:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003794:	2202      	movs	r2, #2
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800379c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	fa93 f2a3 	rbit	r2, r3
 80037a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037b4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80037b8:	2202      	movs	r2, #2
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	fa93 f2a3 	rbit	r2, r3
 80037ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80037d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d4:	4b36      	ldr	r3, [pc, #216]	; (80038b0 <HAL_RCC_OscConfig+0x8f8>)
 80037d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80037e0:	2102      	movs	r1, #2
 80037e2:	6019      	str	r1, [r3, #0]
 80037e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	fa93 f1a3 	rbit	r1, r3
 80037f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80037fa:	6019      	str	r1, [r3, #0]
  return result;
 80037fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003800:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	fab3 f383 	clz	r3, r3
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	2101      	movs	r1, #1
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	4013      	ands	r3, r2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d197      	bne.n	8003752 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003822:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003826:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 81a5 	beq.w	8003b82 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003838:	2300      	movs	r3, #0
 800383a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383e:	4b1c      	ldr	r3, [pc, #112]	; (80038b0 <HAL_RCC_OscConfig+0x8f8>)
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d116      	bne.n	8003878 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <HAL_RCC_OscConfig+0x8f8>)
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	4a18      	ldr	r2, [pc, #96]	; (80038b0 <HAL_RCC_OscConfig+0x8f8>)
 8003850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003854:	61d3      	str	r3, [r2, #28]
 8003856:	4b16      	ldr	r3, [pc, #88]	; (80038b0 <HAL_RCC_OscConfig+0x8f8>)
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800385e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800386c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003870:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003872:	2301      	movs	r3, #1
 8003874:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003878:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <HAL_RCC_OscConfig+0x900>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d121      	bne.n	80038c8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003884:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <HAL_RCC_OscConfig+0x900>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a0b      	ldr	r2, [pc, #44]	; (80038b8 <HAL_RCC_OscConfig+0x900>)
 800388a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003890:	f7fe fed8 	bl	8002644 <HAL_GetTick>
 8003894:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003898:	e010      	b.n	80038bc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389a:	f7fe fed3 	bl	8002644 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b64      	cmp	r3, #100	; 0x64
 80038a8:	d908      	bls.n	80038bc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e3d1      	b.n	8004052 <HAL_RCC_OscConfig+0x109a>
 80038ae:	bf00      	nop
 80038b0:	40021000 	.word	0x40021000
 80038b4:	10908120 	.word	0x10908120
 80038b8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038bc:	4b8d      	ldr	r3, [pc, #564]	; (8003af4 <HAL_RCC_OscConfig+0xb3c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0e8      	beq.n	800389a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d106      	bne.n	80038e6 <HAL_RCC_OscConfig+0x92e>
 80038d8:	4b87      	ldr	r3, [pc, #540]	; (8003af8 <HAL_RCC_OscConfig+0xb40>)
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	4a86      	ldr	r2, [pc, #536]	; (8003af8 <HAL_RCC_OscConfig+0xb40>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	6213      	str	r3, [r2, #32]
 80038e4:	e035      	b.n	8003952 <HAL_RCC_OscConfig+0x99a>
 80038e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10c      	bne.n	8003910 <HAL_RCC_OscConfig+0x958>
 80038f6:	4b80      	ldr	r3, [pc, #512]	; (8003af8 <HAL_RCC_OscConfig+0xb40>)
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	4a7f      	ldr	r2, [pc, #508]	; (8003af8 <HAL_RCC_OscConfig+0xb40>)
 80038fc:	f023 0301 	bic.w	r3, r3, #1
 8003900:	6213      	str	r3, [r2, #32]
 8003902:	4b7d      	ldr	r3, [pc, #500]	; (8003af8 <HAL_RCC_OscConfig+0xb40>)
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	4a7c      	ldr	r2, [pc, #496]	; (8003af8 <HAL_RCC_OscConfig+0xb40>)
 8003908:	f023 0304 	bic.w	r3, r3, #4
 800390c:	6213      	str	r3, [r2, #32]
 800390e:	e020      	b.n	8003952 <HAL_RCC_OscConfig+0x99a>
 8003910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003914:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b05      	cmp	r3, #5
 800391e:	d10c      	bne.n	800393a <HAL_RCC_OscConfig+0x982>
 8003920:	4b75      	ldr	r3, [pc, #468]	; (8003af8 <HAL_RCC_OscConfig+0xb40>)
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	4a74      	ldr	r2, [pc, #464]	; (8003af8 <HAL_RCC_OscConfig+0xb40>)
 8003926:	f043 0304 	orr.w	r3, r3, #4
 800392a:	6213      	str	r3, [r2, #32]
 800392c:	4b72      	ldr	r3, [pc, #456]	; (8003af8 <HAL_RCC_OscConfig+0xb40>)
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	4a71      	ldr	r2, [pc, #452]	; (8003af8 <HAL_RCC_OscConfig+0xb40>)
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	6213      	str	r3, [r2, #32]
 8003938:	e00b      	b.n	8003952 <HAL_RCC_OscConfig+0x99a>
 800393a:	4b6f      	ldr	r3, [pc, #444]	; (8003af8 <HAL_RCC_OscConfig+0xb40>)
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	4a6e      	ldr	r2, [pc, #440]	; (8003af8 <HAL_RCC_OscConfig+0xb40>)
 8003940:	f023 0301 	bic.w	r3, r3, #1
 8003944:	6213      	str	r3, [r2, #32]
 8003946:	4b6c      	ldr	r3, [pc, #432]	; (8003af8 <HAL_RCC_OscConfig+0xb40>)
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	4a6b      	ldr	r2, [pc, #428]	; (8003af8 <HAL_RCC_OscConfig+0xb40>)
 800394c:	f023 0304 	bic.w	r3, r3, #4
 8003950:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003956:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8081 	beq.w	8003a66 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003964:	f7fe fe6e 	bl	8002644 <HAL_GetTick>
 8003968:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396c:	e00b      	b.n	8003986 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800396e:	f7fe fe69 	bl	8002644 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	; 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e365      	b.n	8004052 <HAL_RCC_OscConfig+0x109a>
 8003986:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800398a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800398e:	2202      	movs	r2, #2
 8003990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003992:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003996:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	fa93 f2a3 	rbit	r2, r3
 80039a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80039b2:	2202      	movs	r2, #2
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	fa93 f2a3 	rbit	r2, r3
 80039c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80039cc:	601a      	str	r2, [r3, #0]
  return result;
 80039ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039d2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80039d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d8:	fab3 f383 	clz	r3, r3
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f043 0302 	orr.w	r3, r3, #2
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d102      	bne.n	80039f2 <HAL_RCC_OscConfig+0xa3a>
 80039ec:	4b42      	ldr	r3, [pc, #264]	; (8003af8 <HAL_RCC_OscConfig+0xb40>)
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	e013      	b.n	8003a1a <HAL_RCC_OscConfig+0xa62>
 80039f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039f6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80039fa:	2202      	movs	r2, #2
 80039fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a02:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	fa93 f2a3 	rbit	r2, r3
 8003a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a10:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	4b38      	ldr	r3, [pc, #224]	; (8003af8 <HAL_RCC_OscConfig+0xb40>)
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a1e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003a22:	2102      	movs	r1, #2
 8003a24:	6011      	str	r1, [r2, #0]
 8003a26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a2a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	fa92 f1a2 	rbit	r1, r2
 8003a34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a38:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003a3c:	6011      	str	r1, [r2, #0]
  return result;
 8003a3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a42:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	fab2 f282 	clz	r2, r2
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	f002 021f 	and.w	r2, r2, #31
 8003a58:	2101      	movs	r1, #1
 8003a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d084      	beq.n	800396e <HAL_RCC_OscConfig+0x9b6>
 8003a64:	e083      	b.n	8003b6e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a66:	f7fe fded 	bl	8002644 <HAL_GetTick>
 8003a6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a6e:	e00b      	b.n	8003a88 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a70:	f7fe fde8 	bl	8002644 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e2e4      	b.n	8004052 <HAL_RCC_OscConfig+0x109a>
 8003a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a8c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003a90:	2202      	movs	r2, #2
 8003a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a98:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	fa93 f2a3 	rbit	r2, r3
 8003aa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aa6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ab0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003abc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	fa93 f2a3 	rbit	r2, r3
 8003ac6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003ace:	601a      	str	r2, [r3, #0]
  return result;
 8003ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ad4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003ad8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ada:	fab3 f383 	clz	r3, r3
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	f043 0302 	orr.w	r3, r3, #2
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d106      	bne.n	8003afc <HAL_RCC_OscConfig+0xb44>
 8003aee:	4b02      	ldr	r3, [pc, #8]	; (8003af8 <HAL_RCC_OscConfig+0xb40>)
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	e017      	b.n	8003b24 <HAL_RCC_OscConfig+0xb6c>
 8003af4:	40007000 	.word	0x40007000
 8003af8:	40021000 	.word	0x40021000
 8003afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b00:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003b04:	2202      	movs	r2, #2
 8003b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b0c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	fa93 f2a3 	rbit	r2, r3
 8003b16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b1a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	4bb3      	ldr	r3, [pc, #716]	; (8003df0 <HAL_RCC_OscConfig+0xe38>)
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b28:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	6011      	str	r1, [r2, #0]
 8003b30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b34:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	fa92 f1a2 	rbit	r1, r2
 8003b3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b42:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003b46:	6011      	str	r1, [r2, #0]
  return result;
 8003b48:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b4c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003b50:	6812      	ldr	r2, [r2, #0]
 8003b52:	fab2 f282 	clz	r2, r2
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	f002 021f 	and.w	r2, r2, #31
 8003b62:	2101      	movs	r1, #1
 8003b64:	fa01 f202 	lsl.w	r2, r1, r2
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d180      	bne.n	8003a70 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b6e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d105      	bne.n	8003b82 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b76:	4b9e      	ldr	r3, [pc, #632]	; (8003df0 <HAL_RCC_OscConfig+0xe38>)
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	4a9d      	ldr	r2, [pc, #628]	; (8003df0 <HAL_RCC_OscConfig+0xe38>)
 8003b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b80:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 825e 	beq.w	8004050 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b94:	4b96      	ldr	r3, [pc, #600]	; (8003df0 <HAL_RCC_OscConfig+0xe38>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 030c 	and.w	r3, r3, #12
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	f000 821f 	beq.w	8003fe0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ba6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	f040 8170 	bne.w	8003e94 <HAL_RCC_OscConfig+0xedc>
 8003bb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bb8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003bbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bc6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	fa93 f2a3 	rbit	r2, r3
 8003bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bd4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003bd8:	601a      	str	r2, [r3, #0]
  return result;
 8003bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bde:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003be2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be4:	fab3 f383 	clz	r3, r3
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003bee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfa:	f7fe fd23 	bl	8002644 <HAL_GetTick>
 8003bfe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c02:	e009      	b.n	8003c18 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c04:	f7fe fd1e 	bl	8002644 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e21c      	b.n	8004052 <HAL_RCC_OscConfig+0x109a>
 8003c18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c1c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003c20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c2a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	fa93 f2a3 	rbit	r2, r3
 8003c34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c38:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003c3c:	601a      	str	r2, [r3, #0]
  return result;
 8003c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c42:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003c46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c48:	fab3 f383 	clz	r3, r3
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d102      	bne.n	8003c62 <HAL_RCC_OscConfig+0xcaa>
 8003c5c:	4b64      	ldr	r3, [pc, #400]	; (8003df0 <HAL_RCC_OscConfig+0xe38>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	e027      	b.n	8003cb2 <HAL_RCC_OscConfig+0xcfa>
 8003c62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c66:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003c6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c74:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	fa93 f2a3 	rbit	r2, r3
 8003c7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c82:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c8c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003c90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c9a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	fa93 f2a3 	rbit	r2, r3
 8003ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ca8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	4b50      	ldr	r3, [pc, #320]	; (8003df0 <HAL_RCC_OscConfig+0xe38>)
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003cb6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003cba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003cbe:	6011      	str	r1, [r2, #0]
 8003cc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003cc4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003cc8:	6812      	ldr	r2, [r2, #0]
 8003cca:	fa92 f1a2 	rbit	r1, r2
 8003cce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003cd2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003cd6:	6011      	str	r1, [r2, #0]
  return result;
 8003cd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003cdc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	fab2 f282 	clz	r2, r2
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	f042 0220 	orr.w	r2, r2, #32
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	f002 021f 	and.w	r2, r2, #31
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d182      	bne.n	8003c04 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cfe:	4b3c      	ldr	r3, [pc, #240]	; (8003df0 <HAL_RCC_OscConfig+0xe38>)
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	f023 020f 	bic.w	r2, r3, #15
 8003d06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	4937      	ldr	r1, [pc, #220]	; (8003df0 <HAL_RCC_OscConfig+0xe38>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003d18:	4b35      	ldr	r3, [pc, #212]	; (8003df0 <HAL_RCC_OscConfig+0xe38>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6a19      	ldr	r1, [r3, #32]
 8003d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	492d      	ldr	r1, [pc, #180]	; (8003df0 <HAL_RCC_OscConfig+0xe38>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	604b      	str	r3, [r1, #4]
 8003d40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d44:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003d48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d52:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	fa93 f2a3 	rbit	r2, r3
 8003d5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d60:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003d64:	601a      	str	r2, [r3, #0]
  return result;
 8003d66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d6a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003d6e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d70:	fab3 f383 	clz	r3, r3
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	461a      	mov	r2, r3
 8003d82:	2301      	movs	r3, #1
 8003d84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d86:	f7fe fc5d 	bl	8002644 <HAL_GetTick>
 8003d8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d8e:	e009      	b.n	8003da4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d90:	f7fe fc58 	bl	8002644 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e156      	b.n	8004052 <HAL_RCC_OscConfig+0x109a>
 8003da4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003da8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003dac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003db0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003db6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	fa93 f2a3 	rbit	r2, r3
 8003dc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dc4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003dc8:	601a      	str	r2, [r3, #0]
  return result;
 8003dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003dd2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dd4:	fab3 f383 	clz	r3, r3
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d105      	bne.n	8003df4 <HAL_RCC_OscConfig+0xe3c>
 8003de8:	4b01      	ldr	r3, [pc, #4]	; (8003df0 <HAL_RCC_OscConfig+0xe38>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	e02a      	b.n	8003e44 <HAL_RCC_OscConfig+0xe8c>
 8003dee:	bf00      	nop
 8003df0:	40021000 	.word	0x40021000
 8003df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003df8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003dfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e06:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	fa93 f2a3 	rbit	r2, r3
 8003e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e14:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e1e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003e22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e2c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	fa93 f2a3 	rbit	r2, r3
 8003e36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e3a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	4b86      	ldr	r3, [pc, #536]	; (800405c <HAL_RCC_OscConfig+0x10a4>)
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e48:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003e4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e50:	6011      	str	r1, [r2, #0]
 8003e52:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e56:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	fa92 f1a2 	rbit	r1, r2
 8003e60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e64:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003e68:	6011      	str	r1, [r2, #0]
  return result;
 8003e6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e6e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	fab2 f282 	clz	r2, r2
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	f042 0220 	orr.w	r2, r2, #32
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	f002 021f 	and.w	r2, r2, #31
 8003e84:	2101      	movs	r1, #1
 8003e86:	fa01 f202 	lsl.w	r2, r1, r2
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f43f af7f 	beq.w	8003d90 <HAL_RCC_OscConfig+0xdd8>
 8003e92:	e0dd      	b.n	8004050 <HAL_RCC_OscConfig+0x1098>
 8003e94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e98:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003e9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ea0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ea6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	fa93 f2a3 	rbit	r2, r3
 8003eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eb4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003eb8:	601a      	str	r2, [r3, #0]
  return result;
 8003eba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ebe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003ec2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec4:	fab3 f383 	clz	r3, r3
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ece:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eda:	f7fe fbb3 	bl	8002644 <HAL_GetTick>
 8003ede:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ee2:	e009      	b.n	8003ef8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7fe fbae 	bl	8002644 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e0ac      	b.n	8004052 <HAL_RCC_OscConfig+0x109a>
 8003ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003efc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f0a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	fa93 f2a3 	rbit	r2, r3
 8003f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f18:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f1c:	601a      	str	r2, [r3, #0]
  return result;
 8003f1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f22:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f28:	fab3 f383 	clz	r3, r3
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d102      	bne.n	8003f42 <HAL_RCC_OscConfig+0xf8a>
 8003f3c:	4b47      	ldr	r3, [pc, #284]	; (800405c <HAL_RCC_OscConfig+0x10a4>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	e027      	b.n	8003f92 <HAL_RCC_OscConfig+0xfda>
 8003f42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f46:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003f4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f54:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	fa93 f2a3 	rbit	r2, r3
 8003f5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f62:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f6c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003f70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f7a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	fa93 f2a3 	rbit	r2, r3
 8003f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f88:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	4b33      	ldr	r3, [pc, #204]	; (800405c <HAL_RCC_OscConfig+0x10a4>)
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f96:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003f9a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f9e:	6011      	str	r1, [r2, #0]
 8003fa0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fa4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003fa8:	6812      	ldr	r2, [r2, #0]
 8003faa:	fa92 f1a2 	rbit	r1, r2
 8003fae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fb2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003fb6:	6011      	str	r1, [r2, #0]
  return result;
 8003fb8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fbc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003fc0:	6812      	ldr	r2, [r2, #0]
 8003fc2:	fab2 f282 	clz	r2, r2
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	f042 0220 	orr.w	r2, r2, #32
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	f002 021f 	and.w	r2, r2, #31
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd8:	4013      	ands	r3, r2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d182      	bne.n	8003ee4 <HAL_RCC_OscConfig+0xf2c>
 8003fde:	e037      	b.n	8004050 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fe0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fe4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e02e      	b.n	8004052 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ff4:	4b19      	ldr	r3, [pc, #100]	; (800405c <HAL_RCC_OscConfig+0x10a4>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003ffc:	4b17      	ldr	r3, [pc, #92]	; (800405c <HAL_RCC_OscConfig+0x10a4>)
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004004:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004008:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800400c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004010:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	429a      	cmp	r2, r3
 800401a:	d117      	bne.n	800404c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800401c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004020:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004024:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004028:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004030:	429a      	cmp	r2, r3
 8004032:	d10b      	bne.n	800404c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004034:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004038:	f003 020f 	and.w	r2, r3, #15
 800403c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004040:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004048:	429a      	cmp	r2, r3
 800404a:	d001      	beq.n	8004050 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e000      	b.n	8004052 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40021000 	.word	0x40021000

08004060 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b09e      	sub	sp, #120	; 0x78
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e162      	b.n	800433e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004078:	4b90      	ldr	r3, [pc, #576]	; (80042bc <HAL_RCC_ClockConfig+0x25c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d910      	bls.n	80040a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b8d      	ldr	r3, [pc, #564]	; (80042bc <HAL_RCC_ClockConfig+0x25c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 0207 	bic.w	r2, r3, #7
 800408e:	498b      	ldr	r1, [pc, #556]	; (80042bc <HAL_RCC_ClockConfig+0x25c>)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	4313      	orrs	r3, r2
 8004094:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004096:	4b89      	ldr	r3, [pc, #548]	; (80042bc <HAL_RCC_ClockConfig+0x25c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e14a      	b.n	800433e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b4:	4b82      	ldr	r3, [pc, #520]	; (80042c0 <HAL_RCC_ClockConfig+0x260>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	497f      	ldr	r1, [pc, #508]	; (80042c0 <HAL_RCC_ClockConfig+0x260>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 80dc 	beq.w	800428c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d13c      	bne.n	8004156 <HAL_RCC_ClockConfig+0xf6>
 80040dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040e4:	fa93 f3a3 	rbit	r3, r3
 80040e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80040ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ec:	fab3 f383 	clz	r3, r3
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d102      	bne.n	8004106 <HAL_RCC_ClockConfig+0xa6>
 8004100:	4b6f      	ldr	r3, [pc, #444]	; (80042c0 <HAL_RCC_ClockConfig+0x260>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	e00f      	b.n	8004126 <HAL_RCC_ClockConfig+0xc6>
 8004106:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800410a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800410e:	fa93 f3a3 	rbit	r3, r3
 8004112:	667b      	str	r3, [r7, #100]	; 0x64
 8004114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004118:	663b      	str	r3, [r7, #96]	; 0x60
 800411a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800411c:	fa93 f3a3 	rbit	r3, r3
 8004120:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004122:	4b67      	ldr	r3, [pc, #412]	; (80042c0 <HAL_RCC_ClockConfig+0x260>)
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800412a:	65ba      	str	r2, [r7, #88]	; 0x58
 800412c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800412e:	fa92 f2a2 	rbit	r2, r2
 8004132:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004134:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004136:	fab2 f282 	clz	r2, r2
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	f042 0220 	orr.w	r2, r2, #32
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	f002 021f 	and.w	r2, r2, #31
 8004146:	2101      	movs	r1, #1
 8004148:	fa01 f202 	lsl.w	r2, r1, r2
 800414c:	4013      	ands	r3, r2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d17b      	bne.n	800424a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e0f3      	b.n	800433e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d13c      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x178>
 800415e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004162:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800416c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416e:	fab3 f383 	clz	r3, r3
 8004172:	b2db      	uxtb	r3, r3
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b01      	cmp	r3, #1
 8004180:	d102      	bne.n	8004188 <HAL_RCC_ClockConfig+0x128>
 8004182:	4b4f      	ldr	r3, [pc, #316]	; (80042c0 <HAL_RCC_ClockConfig+0x260>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	e00f      	b.n	80041a8 <HAL_RCC_ClockConfig+0x148>
 8004188:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800418c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004190:	fa93 f3a3 	rbit	r3, r3
 8004194:	647b      	str	r3, [r7, #68]	; 0x44
 8004196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800419a:	643b      	str	r3, [r7, #64]	; 0x40
 800419c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800419e:	fa93 f3a3 	rbit	r3, r3
 80041a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041a4:	4b46      	ldr	r3, [pc, #280]	; (80042c0 <HAL_RCC_ClockConfig+0x260>)
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80041ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041b0:	fa92 f2a2 	rbit	r2, r2
 80041b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80041b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041b8:	fab2 f282 	clz	r2, r2
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	f042 0220 	orr.w	r2, r2, #32
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	f002 021f 	and.w	r2, r2, #31
 80041c8:	2101      	movs	r1, #1
 80041ca:	fa01 f202 	lsl.w	r2, r1, r2
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d13a      	bne.n	800424a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0b2      	b.n	800433e <HAL_RCC_ClockConfig+0x2de>
 80041d8:	2302      	movs	r3, #2
 80041da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041de:	fa93 f3a3 	rbit	r3, r3
 80041e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80041e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e6:	fab3 f383 	clz	r3, r3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d102      	bne.n	8004200 <HAL_RCC_ClockConfig+0x1a0>
 80041fa:	4b31      	ldr	r3, [pc, #196]	; (80042c0 <HAL_RCC_ClockConfig+0x260>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	e00d      	b.n	800421c <HAL_RCC_ClockConfig+0x1bc>
 8004200:	2302      	movs	r3, #2
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004206:	fa93 f3a3 	rbit	r3, r3
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
 800420c:	2302      	movs	r3, #2
 800420e:	623b      	str	r3, [r7, #32]
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	fa93 f3a3 	rbit	r3, r3
 8004216:	61fb      	str	r3, [r7, #28]
 8004218:	4b29      	ldr	r3, [pc, #164]	; (80042c0 <HAL_RCC_ClockConfig+0x260>)
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	2202      	movs	r2, #2
 800421e:	61ba      	str	r2, [r7, #24]
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	fa92 f2a2 	rbit	r2, r2
 8004226:	617a      	str	r2, [r7, #20]
  return result;
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	fab2 f282 	clz	r2, r2
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	f042 0220 	orr.w	r2, r2, #32
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	f002 021f 	and.w	r2, r2, #31
 800423a:	2101      	movs	r1, #1
 800423c:	fa01 f202 	lsl.w	r2, r1, r2
 8004240:	4013      	ands	r3, r2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e079      	b.n	800433e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800424a:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <HAL_RCC_ClockConfig+0x260>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f023 0203 	bic.w	r2, r3, #3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	491a      	ldr	r1, [pc, #104]	; (80042c0 <HAL_RCC_ClockConfig+0x260>)
 8004258:	4313      	orrs	r3, r2
 800425a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800425c:	f7fe f9f2 	bl	8002644 <HAL_GetTick>
 8004260:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004262:	e00a      	b.n	800427a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004264:	f7fe f9ee 	bl	8002644 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e061      	b.n	800433e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427a:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <HAL_RCC_ClockConfig+0x260>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f003 020c 	and.w	r2, r3, #12
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	429a      	cmp	r2, r3
 800428a:	d1eb      	bne.n	8004264 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <HAL_RCC_ClockConfig+0x25c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d214      	bcs.n	80042c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429a:	4b08      	ldr	r3, [pc, #32]	; (80042bc <HAL_RCC_ClockConfig+0x25c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f023 0207 	bic.w	r2, r3, #7
 80042a2:	4906      	ldr	r1, [pc, #24]	; (80042bc <HAL_RCC_ClockConfig+0x25c>)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042aa:	4b04      	ldr	r3, [pc, #16]	; (80042bc <HAL_RCC_ClockConfig+0x25c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d005      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e040      	b.n	800433e <HAL_RCC_ClockConfig+0x2de>
 80042bc:	40022000 	.word	0x40022000
 80042c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d008      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042d0:	4b1d      	ldr	r3, [pc, #116]	; (8004348 <HAL_RCC_ClockConfig+0x2e8>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	491a      	ldr	r1, [pc, #104]	; (8004348 <HAL_RCC_ClockConfig+0x2e8>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d009      	beq.n	8004302 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ee:	4b16      	ldr	r3, [pc, #88]	; (8004348 <HAL_RCC_ClockConfig+0x2e8>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	4912      	ldr	r1, [pc, #72]	; (8004348 <HAL_RCC_ClockConfig+0x2e8>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004302:	f000 f829 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8004306:	4601      	mov	r1, r0
 8004308:	4b0f      	ldr	r3, [pc, #60]	; (8004348 <HAL_RCC_ClockConfig+0x2e8>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004310:	22f0      	movs	r2, #240	; 0xf0
 8004312:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	fa92 f2a2 	rbit	r2, r2
 800431a:	60fa      	str	r2, [r7, #12]
  return result;
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	fab2 f282 	clz	r2, r2
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	40d3      	lsrs	r3, r2
 8004326:	4a09      	ldr	r2, [pc, #36]	; (800434c <HAL_RCC_ClockConfig+0x2ec>)
 8004328:	5cd3      	ldrb	r3, [r2, r3]
 800432a:	fa21 f303 	lsr.w	r3, r1, r3
 800432e:	4a08      	ldr	r2, [pc, #32]	; (8004350 <HAL_RCC_ClockConfig+0x2f0>)
 8004330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <HAL_RCC_ClockConfig+0x2f4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f7fe f940 	bl	80025bc <HAL_InitTick>
  
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3778      	adds	r7, #120	; 0x78
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40021000 	.word	0x40021000
 800434c:	0800b42c 	.word	0x0800b42c
 8004350:	20000000 	.word	0x20000000
 8004354:	20000004 	.word	0x20000004

08004358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004358:	b480      	push	{r7}
 800435a:	b08b      	sub	sp, #44	; 0x2c
 800435c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
 8004362:	2300      	movs	r3, #0
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	2300      	movs	r3, #0
 8004368:	627b      	str	r3, [r7, #36]	; 0x24
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004372:	4b2a      	ldr	r3, [pc, #168]	; (800441c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b04      	cmp	r3, #4
 8004380:	d002      	beq.n	8004388 <HAL_RCC_GetSysClockFreq+0x30>
 8004382:	2b08      	cmp	r3, #8
 8004384:	d003      	beq.n	800438e <HAL_RCC_GetSysClockFreq+0x36>
 8004386:	e03f      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004388:	4b25      	ldr	r3, [pc, #148]	; (8004420 <HAL_RCC_GetSysClockFreq+0xc8>)
 800438a:	623b      	str	r3, [r7, #32]
      break;
 800438c:	e03f      	b.n	800440e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004394:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004398:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	fa92 f2a2 	rbit	r2, r2
 80043a0:	607a      	str	r2, [r7, #4]
  return result;
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	fab2 f282 	clz	r2, r2
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	40d3      	lsrs	r3, r2
 80043ac:	4a1d      	ldr	r2, [pc, #116]	; (8004424 <HAL_RCC_GetSysClockFreq+0xcc>)
 80043ae:	5cd3      	ldrb	r3, [r2, r3]
 80043b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80043b2:	4b1a      	ldr	r3, [pc, #104]	; (800441c <HAL_RCC_GetSysClockFreq+0xc4>)
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	220f      	movs	r2, #15
 80043bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	fa92 f2a2 	rbit	r2, r2
 80043c4:	60fa      	str	r2, [r7, #12]
  return result;
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	fab2 f282 	clz	r2, r2
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	40d3      	lsrs	r3, r2
 80043d0:	4a15      	ldr	r2, [pc, #84]	; (8004428 <HAL_RCC_GetSysClockFreq+0xd0>)
 80043d2:	5cd3      	ldrb	r3, [r2, r3]
 80043d4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043e0:	4a0f      	ldr	r2, [pc, #60]	; (8004420 <HAL_RCC_GetSysClockFreq+0xc8>)
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	fb02 f303 	mul.w	r3, r2, r3
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
 80043f0:	e007      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043f2:	4a0b      	ldr	r2, [pc, #44]	; (8004420 <HAL_RCC_GetSysClockFreq+0xc8>)
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	fb02 f303 	mul.w	r3, r2, r3
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	623b      	str	r3, [r7, #32]
      break;
 8004406:	e002      	b.n	800440e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_RCC_GetSysClockFreq+0xc8>)
 800440a:	623b      	str	r3, [r7, #32]
      break;
 800440c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800440e:	6a3b      	ldr	r3, [r7, #32]
}
 8004410:	4618      	mov	r0, r3
 8004412:	372c      	adds	r7, #44	; 0x2c
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	40021000 	.word	0x40021000
 8004420:	007a1200 	.word	0x007a1200
 8004424:	0800b444 	.word	0x0800b444
 8004428:	0800b454 	.word	0x0800b454

0800442c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004430:	4b03      	ldr	r3, [pc, #12]	; (8004440 <HAL_RCC_GetHCLKFreq+0x14>)
 8004432:	681b      	ldr	r3, [r3, #0]
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	20000000 	.word	0x20000000

08004444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800444a:	f7ff ffef 	bl	800442c <HAL_RCC_GetHCLKFreq>
 800444e:	4601      	mov	r1, r0
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004458:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800445c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	fa92 f2a2 	rbit	r2, r2
 8004464:	603a      	str	r2, [r7, #0]
  return result;
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	fab2 f282 	clz	r2, r2
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	40d3      	lsrs	r3, r2
 8004470:	4a04      	ldr	r2, [pc, #16]	; (8004484 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004472:	5cd3      	ldrb	r3, [r2, r3]
 8004474:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40021000 	.word	0x40021000
 8004484:	0800b43c 	.word	0x0800b43c

08004488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800448e:	f7ff ffcd 	bl	800442c <HAL_RCC_GetHCLKFreq>
 8004492:	4601      	mov	r1, r0
 8004494:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800449c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80044a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	fa92 f2a2 	rbit	r2, r2
 80044a8:	603a      	str	r2, [r7, #0]
  return result;
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	fab2 f282 	clz	r2, r2
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	40d3      	lsrs	r3, r2
 80044b4:	4a04      	ldr	r2, [pc, #16]	; (80044c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80044b6:	5cd3      	ldrb	r3, [r2, r3]
 80044b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40021000 	.word	0x40021000
 80044c8:	0800b43c 	.word	0x0800b43c

080044cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b092      	sub	sp, #72	; 0x48
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80044dc:	2300      	movs	r3, #0
 80044de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 80d4 	beq.w	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f0:	4b4e      	ldr	r3, [pc, #312]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10e      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044fc:	4b4b      	ldr	r3, [pc, #300]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	4a4a      	ldr	r2, [pc, #296]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004506:	61d3      	str	r3, [r2, #28]
 8004508:	4b48      	ldr	r3, [pc, #288]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004510:	60bb      	str	r3, [r7, #8]
 8004512:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004514:	2301      	movs	r3, #1
 8004516:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451a:	4b45      	ldr	r3, [pc, #276]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d118      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004526:	4b42      	ldr	r3, [pc, #264]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a41      	ldr	r2, [pc, #260]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800452c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004530:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004532:	f7fe f887 	bl	8002644 <HAL_GetTick>
 8004536:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004538:	e008      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453a:	f7fe f883 	bl	8002644 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b64      	cmp	r3, #100	; 0x64
 8004546:	d901      	bls.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e1d6      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454c:	4b38      	ldr	r3, [pc, #224]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f0      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004558:	4b34      	ldr	r3, [pc, #208]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004560:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 8084 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004572:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004574:	429a      	cmp	r2, r3
 8004576:	d07c      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004578:	4b2c      	ldr	r3, [pc, #176]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004582:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004586:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458a:	fa93 f3a3 	rbit	r3, r3
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004592:	fab3 f383 	clz	r3, r3
 8004596:	b2db      	uxtb	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	4b26      	ldr	r3, [pc, #152]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	461a      	mov	r2, r3
 80045a2:	2301      	movs	r3, #1
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ae:	fa93 f3a3 	rbit	r3, r3
 80045b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80045b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045b6:	fab3 f383 	clz	r3, r3
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	461a      	mov	r2, r3
 80045be:	4b1d      	ldr	r3, [pc, #116]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045c0:	4413      	add	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	461a      	mov	r2, r3
 80045c6:	2300      	movs	r3, #0
 80045c8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045ca:	4a18      	ldr	r2, [pc, #96]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d04b      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045da:	f7fe f833 	bl	8002644 <HAL_GetTick>
 80045de:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e0:	e00a      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e2:	f7fe f82f 	bl	8002644 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e180      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80045f8:	2302      	movs	r3, #2
 80045fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fe:	fa93 f3a3 	rbit	r3, r3
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
 8004604:	2302      	movs	r3, #2
 8004606:	623b      	str	r3, [r7, #32]
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	fa93 f3a3 	rbit	r3, r3
 800460e:	61fb      	str	r3, [r7, #28]
  return result;
 8004610:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004612:	fab3 f383 	clz	r3, r3
 8004616:	b2db      	uxtb	r3, r3
 8004618:	095b      	lsrs	r3, r3, #5
 800461a:	b2db      	uxtb	r3, r3
 800461c:	f043 0302 	orr.w	r3, r3, #2
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d108      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004626:	4b01      	ldr	r3, [pc, #4]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	e00d      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800462c:	40021000 	.word	0x40021000
 8004630:	40007000 	.word	0x40007000
 8004634:	10908100 	.word	0x10908100
 8004638:	2302      	movs	r3, #2
 800463a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	fa93 f3a3 	rbit	r3, r3
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	4b9a      	ldr	r3, [pc, #616]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	2202      	movs	r2, #2
 800464a:	613a      	str	r2, [r7, #16]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	fa92 f2a2 	rbit	r2, r2
 8004652:	60fa      	str	r2, [r7, #12]
  return result;
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	fab2 f282 	clz	r2, r2
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	f002 021f 	and.w	r2, r2, #31
 8004666:	2101      	movs	r1, #1
 8004668:	fa01 f202 	lsl.w	r2, r1, r2
 800466c:	4013      	ands	r3, r2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0b7      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004672:	4b8f      	ldr	r3, [pc, #572]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	498c      	ldr	r1, [pc, #560]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004680:	4313      	orrs	r3, r2
 8004682:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004684:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004688:	2b01      	cmp	r3, #1
 800468a:	d105      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800468c:	4b88      	ldr	r3, [pc, #544]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	4a87      	ldr	r2, [pc, #540]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004696:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046a4:	4b82      	ldr	r3, [pc, #520]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a8:	f023 0203 	bic.w	r2, r3, #3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	497f      	ldr	r1, [pc, #508]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046c2:	4b7b      	ldr	r3, [pc, #492]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	4978      	ldr	r1, [pc, #480]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046e0:	4b73      	ldr	r3, [pc, #460]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	4970      	ldr	r1, [pc, #448]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046fe:	4b6c      	ldr	r3, [pc, #432]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	f023 0210 	bic.w	r2, r3, #16
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	4969      	ldr	r1, [pc, #420]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800470c:	4313      	orrs	r3, r2
 800470e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d008      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800471c:	4b64      	ldr	r3, [pc, #400]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004728:	4961      	ldr	r1, [pc, #388]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800472a:	4313      	orrs	r3, r2
 800472c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004736:	2b00      	cmp	r3, #0
 8004738:	d008      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800473a:	4b5d      	ldr	r3, [pc, #372]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	f023 0220 	bic.w	r2, r3, #32
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	495a      	ldr	r1, [pc, #360]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004748:	4313      	orrs	r3, r2
 800474a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d008      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004758:	4b55      	ldr	r3, [pc, #340]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	4952      	ldr	r1, [pc, #328]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004766:	4313      	orrs	r3, r2
 8004768:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d008      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004776:	4b4e      	ldr	r3, [pc, #312]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	494b      	ldr	r1, [pc, #300]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004784:	4313      	orrs	r3, r2
 8004786:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b00      	cmp	r3, #0
 8004792:	d008      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004794:	4b46      	ldr	r3, [pc, #280]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004798:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	4943      	ldr	r1, [pc, #268]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047b2:	4b3f      	ldr	r3, [pc, #252]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	493c      	ldr	r1, [pc, #240]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d008      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047d0:	4b37      	ldr	r3, [pc, #220]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	4934      	ldr	r1, [pc, #208]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d008      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80047ee:	4b30      	ldr	r3, [pc, #192]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fa:	492d      	ldr	r1, [pc, #180]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800480c:	4b28      	ldr	r3, [pc, #160]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004818:	4925      	ldr	r1, [pc, #148]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800481a:	4313      	orrs	r3, r2
 800481c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d008      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800482a:	4b21      	ldr	r3, [pc, #132]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	491e      	ldr	r1, [pc, #120]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004838:	4313      	orrs	r3, r2
 800483a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004848:	4b19      	ldr	r3, [pc, #100]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004854:	4916      	ldr	r1, [pc, #88]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004856:	4313      	orrs	r3, r2
 8004858:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d008      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004866:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004872:	490f      	ldr	r1, [pc, #60]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004874:	4313      	orrs	r3, r2
 8004876:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004884:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004890:	4907      	ldr	r1, [pc, #28]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004892:	4313      	orrs	r3, r2
 8004894:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00c      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80048a2:	4b03      	ldr	r3, [pc, #12]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	e002      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80048ae:	bf00      	nop
 80048b0:	40021000 	.word	0x40021000
 80048b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b6:	4913      	ldr	r1, [pc, #76]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80048c8:	4b0e      	ldr	r3, [pc, #56]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d4:	490b      	ldr	r1, [pc, #44]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d008      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80048e6:	4b07      	ldr	r3, [pc, #28]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f2:	4904      	ldr	r1, [pc, #16]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3748      	adds	r7, #72	; 0x48
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40021000 	.word	0x40021000

08004908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e049      	b.n	80049ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d106      	bne.n	8004934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7fd fbf8 	bl	8002124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3304      	adds	r3, #4
 8004944:	4619      	mov	r1, r3
 8004946:	4610      	mov	r0, r2
 8004948:	f000 fcb4 	bl	80052b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e049      	b.n	8004a5c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d106      	bne.n	80049e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f841 	bl	8004a64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2202      	movs	r2, #2
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3304      	adds	r3, #4
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f000 fc5d 	bl	80052b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d109      	bne.n	8004a9c <HAL_TIM_PWM_Start+0x24>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	bf14      	ite	ne
 8004a94:	2301      	movne	r3, #1
 8004a96:	2300      	moveq	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	e03c      	b.n	8004b16 <HAL_TIM_PWM_Start+0x9e>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d109      	bne.n	8004ab6 <HAL_TIM_PWM_Start+0x3e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	bf14      	ite	ne
 8004aae:	2301      	movne	r3, #1
 8004ab0:	2300      	moveq	r3, #0
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	e02f      	b.n	8004b16 <HAL_TIM_PWM_Start+0x9e>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d109      	bne.n	8004ad0 <HAL_TIM_PWM_Start+0x58>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	bf14      	ite	ne
 8004ac8:	2301      	movne	r3, #1
 8004aca:	2300      	moveq	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	e022      	b.n	8004b16 <HAL_TIM_PWM_Start+0x9e>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2b0c      	cmp	r3, #12
 8004ad4:	d109      	bne.n	8004aea <HAL_TIM_PWM_Start+0x72>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	bf14      	ite	ne
 8004ae2:	2301      	movne	r3, #1
 8004ae4:	2300      	moveq	r3, #0
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	e015      	b.n	8004b16 <HAL_TIM_PWM_Start+0x9e>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d109      	bne.n	8004b04 <HAL_TIM_PWM_Start+0x8c>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	bf14      	ite	ne
 8004afc:	2301      	movne	r3, #1
 8004afe:	2300      	moveq	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	e008      	b.n	8004b16 <HAL_TIM_PWM_Start+0x9e>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	bf14      	ite	ne
 8004b10:	2301      	movne	r3, #1
 8004b12:	2300      	moveq	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e0a1      	b.n	8004c62 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d104      	bne.n	8004b2e <HAL_TIM_PWM_Start+0xb6>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b2c:	e023      	b.n	8004b76 <HAL_TIM_PWM_Start+0xfe>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d104      	bne.n	8004b3e <HAL_TIM_PWM_Start+0xc6>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b3c:	e01b      	b.n	8004b76 <HAL_TIM_PWM_Start+0xfe>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d104      	bne.n	8004b4e <HAL_TIM_PWM_Start+0xd6>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b4c:	e013      	b.n	8004b76 <HAL_TIM_PWM_Start+0xfe>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b0c      	cmp	r3, #12
 8004b52:	d104      	bne.n	8004b5e <HAL_TIM_PWM_Start+0xe6>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b5c:	e00b      	b.n	8004b76 <HAL_TIM_PWM_Start+0xfe>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b10      	cmp	r3, #16
 8004b62:	d104      	bne.n	8004b6e <HAL_TIM_PWM_Start+0xf6>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b6c:	e003      	b.n	8004b76 <HAL_TIM_PWM_Start+0xfe>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2202      	movs	r2, #2
 8004b72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	6839      	ldr	r1, [r7, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 ffd6 	bl	8005b30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a38      	ldr	r2, [pc, #224]	; (8004c6c <HAL_TIM_PWM_Start+0x1f4>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d018      	beq.n	8004bc0 <HAL_TIM_PWM_Start+0x148>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a37      	ldr	r2, [pc, #220]	; (8004c70 <HAL_TIM_PWM_Start+0x1f8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d013      	beq.n	8004bc0 <HAL_TIM_PWM_Start+0x148>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a35      	ldr	r2, [pc, #212]	; (8004c74 <HAL_TIM_PWM_Start+0x1fc>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00e      	beq.n	8004bc0 <HAL_TIM_PWM_Start+0x148>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a34      	ldr	r2, [pc, #208]	; (8004c78 <HAL_TIM_PWM_Start+0x200>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d009      	beq.n	8004bc0 <HAL_TIM_PWM_Start+0x148>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a32      	ldr	r2, [pc, #200]	; (8004c7c <HAL_TIM_PWM_Start+0x204>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d004      	beq.n	8004bc0 <HAL_TIM_PWM_Start+0x148>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a31      	ldr	r2, [pc, #196]	; (8004c80 <HAL_TIM_PWM_Start+0x208>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d101      	bne.n	8004bc4 <HAL_TIM_PWM_Start+0x14c>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e000      	b.n	8004bc6 <HAL_TIM_PWM_Start+0x14e>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d007      	beq.n	8004bda <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a23      	ldr	r2, [pc, #140]	; (8004c6c <HAL_TIM_PWM_Start+0x1f4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d01d      	beq.n	8004c20 <HAL_TIM_PWM_Start+0x1a8>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bec:	d018      	beq.n	8004c20 <HAL_TIM_PWM_Start+0x1a8>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a24      	ldr	r2, [pc, #144]	; (8004c84 <HAL_TIM_PWM_Start+0x20c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d013      	beq.n	8004c20 <HAL_TIM_PWM_Start+0x1a8>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a22      	ldr	r2, [pc, #136]	; (8004c88 <HAL_TIM_PWM_Start+0x210>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00e      	beq.n	8004c20 <HAL_TIM_PWM_Start+0x1a8>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a1a      	ldr	r2, [pc, #104]	; (8004c70 <HAL_TIM_PWM_Start+0x1f8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d009      	beq.n	8004c20 <HAL_TIM_PWM_Start+0x1a8>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a18      	ldr	r2, [pc, #96]	; (8004c74 <HAL_TIM_PWM_Start+0x1fc>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d004      	beq.n	8004c20 <HAL_TIM_PWM_Start+0x1a8>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a19      	ldr	r2, [pc, #100]	; (8004c80 <HAL_TIM_PWM_Start+0x208>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d115      	bne.n	8004c4c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	4b19      	ldr	r3, [pc, #100]	; (8004c8c <HAL_TIM_PWM_Start+0x214>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b06      	cmp	r3, #6
 8004c30:	d015      	beq.n	8004c5e <HAL_TIM_PWM_Start+0x1e6>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c38:	d011      	beq.n	8004c5e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0201 	orr.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4a:	e008      	b.n	8004c5e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	e000      	b.n	8004c60 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40012c00 	.word	0x40012c00
 8004c70:	40013400 	.word	0x40013400
 8004c74:	40014000 	.word	0x40014000
 8004c78:	40014400 	.word	0x40014400
 8004c7c:	40014800 	.word	0x40014800
 8004c80:	40015000 	.word	0x40015000
 8004c84:	40000400 	.word	0x40000400
 8004c88:	40000800 	.word	0x40000800
 8004c8c:	00010007 	.word	0x00010007

08004c90 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e097      	b.n	8004dd4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d106      	bne.n	8004cbe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7fd f98f 	bl	8001fdc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6812      	ldr	r2, [r2, #0]
 8004cd0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004cd4:	f023 0307 	bic.w	r3, r3, #7
 8004cd8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	f000 fae5 	bl	80052b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d12:	f023 0303 	bic.w	r3, r3, #3
 8004d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	4313      	orrs	r3, r2
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004d30:	f023 030c 	bic.w	r3, r3, #12
 8004d34:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	011a      	lsls	r2, r3, #4
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	031b      	lsls	r3, r3, #12
 8004d60:	4313      	orrs	r3, r2
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004d6e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004d76:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	4313      	orrs	r3, r2
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004df4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dfc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e04:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d110      	bne.n	8004e2e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d102      	bne.n	8004e18 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e12:	7b7b      	ldrb	r3, [r7, #13]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d001      	beq.n	8004e1c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e069      	b.n	8004ef0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e2c:	e031      	b.n	8004e92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d110      	bne.n	8004e56 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e34:	7bbb      	ldrb	r3, [r7, #14]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d102      	bne.n	8004e40 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e3a:	7b3b      	ldrb	r3, [r7, #12]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d001      	beq.n	8004e44 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e055      	b.n	8004ef0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e54:	e01d      	b.n	8004e92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d108      	bne.n	8004e6e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e5c:	7bbb      	ldrb	r3, [r7, #14]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d105      	bne.n	8004e6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e62:	7b7b      	ldrb	r3, [r7, #13]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d102      	bne.n	8004e6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e68:	7b3b      	ldrb	r3, [r7, #12]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d001      	beq.n	8004e72 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e03e      	b.n	8004ef0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2202      	movs	r2, #2
 8004e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2202      	movs	r2, #2
 8004e86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_TIM_Encoder_Start+0xc4>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d008      	beq.n	8004eb0 <HAL_TIM_Encoder_Start+0xd4>
 8004e9e:	e00f      	b.n	8004ec0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fe41 	bl	8005b30 <TIM_CCxChannelCmd>
      break;
 8004eae:	e016      	b.n	8004ede <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	2104      	movs	r1, #4
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fe39 	bl	8005b30 <TIM_CCxChannelCmd>
      break;
 8004ebe:	e00e      	b.n	8004ede <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 fe31 	bl	8005b30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	2104      	movs	r1, #4
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fe2a 	bl	8005b30 <TIM_CCxChannelCmd>
      break;
 8004edc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f042 0201 	orr.w	r2, r2, #1
 8004eec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d101      	bne.n	8004f16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f12:	2302      	movs	r3, #2
 8004f14:	e0ff      	b.n	8005116 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b14      	cmp	r3, #20
 8004f22:	f200 80f0 	bhi.w	8005106 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f26:	a201      	add	r2, pc, #4	; (adr r2, 8004f2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f81 	.word	0x08004f81
 8004f30:	08005107 	.word	0x08005107
 8004f34:	08005107 	.word	0x08005107
 8004f38:	08005107 	.word	0x08005107
 8004f3c:	08004fc1 	.word	0x08004fc1
 8004f40:	08005107 	.word	0x08005107
 8004f44:	08005107 	.word	0x08005107
 8004f48:	08005107 	.word	0x08005107
 8004f4c:	08005003 	.word	0x08005003
 8004f50:	08005107 	.word	0x08005107
 8004f54:	08005107 	.word	0x08005107
 8004f58:	08005107 	.word	0x08005107
 8004f5c:	08005043 	.word	0x08005043
 8004f60:	08005107 	.word	0x08005107
 8004f64:	08005107 	.word	0x08005107
 8004f68:	08005107 	.word	0x08005107
 8004f6c:	08005085 	.word	0x08005085
 8004f70:	08005107 	.word	0x08005107
 8004f74:	08005107 	.word	0x08005107
 8004f78:	08005107 	.word	0x08005107
 8004f7c:	080050c5 	.word	0x080050c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68b9      	ldr	r1, [r7, #8]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 fa32 	bl	80053f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	699a      	ldr	r2, [r3, #24]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0208 	orr.w	r2, r2, #8
 8004f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0204 	bic.w	r2, r2, #4
 8004faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6999      	ldr	r1, [r3, #24]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	691a      	ldr	r2, [r3, #16]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	619a      	str	r2, [r3, #24]
      break;
 8004fbe:	e0a5      	b.n	800510c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 faac 	bl	8005524 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699a      	ldr	r2, [r3, #24]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6999      	ldr	r1, [r3, #24]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	021a      	lsls	r2, r3, #8
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	619a      	str	r2, [r3, #24]
      break;
 8005000:	e084      	b.n	800510c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68b9      	ldr	r1, [r7, #8]
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fb1f 	bl	800564c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69da      	ldr	r2, [r3, #28]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0208 	orr.w	r2, r2, #8
 800501c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69da      	ldr	r2, [r3, #28]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0204 	bic.w	r2, r2, #4
 800502c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69d9      	ldr	r1, [r3, #28]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	61da      	str	r2, [r3, #28]
      break;
 8005040:	e064      	b.n	800510c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68b9      	ldr	r1, [r7, #8]
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fb91 	bl	8005770 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69da      	ldr	r2, [r3, #28]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800505c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69da      	ldr	r2, [r3, #28]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69d9      	ldr	r1, [r3, #28]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	021a      	lsls	r2, r3, #8
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	61da      	str	r2, [r3, #28]
      break;
 8005082:	e043      	b.n	800510c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fbe0 	bl	8005850 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0208 	orr.w	r2, r2, #8
 800509e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0204 	bic.w	r2, r2, #4
 80050ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	691a      	ldr	r2, [r3, #16]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050c2:	e023      	b.n	800510c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68b9      	ldr	r1, [r7, #8]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fc2a 	bl	8005924 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	021a      	lsls	r2, r3, #8
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005104:	e002      	b.n	800510c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	75fb      	strb	r3, [r7, #23]
      break;
 800510a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005114:	7dfb      	ldrb	r3, [r7, #23]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop

08005120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_TIM_ConfigClockSource+0x1c>
 8005138:	2302      	movs	r3, #2
 800513a:	e0b6      	b.n	80052aa <HAL_TIM_ConfigClockSource+0x18a>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800515a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800515e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005166:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005178:	d03e      	beq.n	80051f8 <HAL_TIM_ConfigClockSource+0xd8>
 800517a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800517e:	f200 8087 	bhi.w	8005290 <HAL_TIM_ConfigClockSource+0x170>
 8005182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005186:	f000 8086 	beq.w	8005296 <HAL_TIM_ConfigClockSource+0x176>
 800518a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518e:	d87f      	bhi.n	8005290 <HAL_TIM_ConfigClockSource+0x170>
 8005190:	2b70      	cmp	r3, #112	; 0x70
 8005192:	d01a      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0xaa>
 8005194:	2b70      	cmp	r3, #112	; 0x70
 8005196:	d87b      	bhi.n	8005290 <HAL_TIM_ConfigClockSource+0x170>
 8005198:	2b60      	cmp	r3, #96	; 0x60
 800519a:	d050      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x11e>
 800519c:	2b60      	cmp	r3, #96	; 0x60
 800519e:	d877      	bhi.n	8005290 <HAL_TIM_ConfigClockSource+0x170>
 80051a0:	2b50      	cmp	r3, #80	; 0x50
 80051a2:	d03c      	beq.n	800521e <HAL_TIM_ConfigClockSource+0xfe>
 80051a4:	2b50      	cmp	r3, #80	; 0x50
 80051a6:	d873      	bhi.n	8005290 <HAL_TIM_ConfigClockSource+0x170>
 80051a8:	2b40      	cmp	r3, #64	; 0x40
 80051aa:	d058      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x13e>
 80051ac:	2b40      	cmp	r3, #64	; 0x40
 80051ae:	d86f      	bhi.n	8005290 <HAL_TIM_ConfigClockSource+0x170>
 80051b0:	2b30      	cmp	r3, #48	; 0x30
 80051b2:	d064      	beq.n	800527e <HAL_TIM_ConfigClockSource+0x15e>
 80051b4:	2b30      	cmp	r3, #48	; 0x30
 80051b6:	d86b      	bhi.n	8005290 <HAL_TIM_ConfigClockSource+0x170>
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	d060      	beq.n	800527e <HAL_TIM_ConfigClockSource+0x15e>
 80051bc:	2b20      	cmp	r3, #32
 80051be:	d867      	bhi.n	8005290 <HAL_TIM_ConfigClockSource+0x170>
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d05c      	beq.n	800527e <HAL_TIM_ConfigClockSource+0x15e>
 80051c4:	2b10      	cmp	r3, #16
 80051c6:	d05a      	beq.n	800527e <HAL_TIM_ConfigClockSource+0x15e>
 80051c8:	e062      	b.n	8005290 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6818      	ldr	r0, [r3, #0]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	6899      	ldr	r1, [r3, #8]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f000 fc89 	bl	8005af0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	609a      	str	r2, [r3, #8]
      break;
 80051f6:	e04f      	b.n	8005298 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	6899      	ldr	r1, [r3, #8]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f000 fc72 	bl	8005af0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800521a:	609a      	str	r2, [r3, #8]
      break;
 800521c:	e03c      	b.n	8005298 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6818      	ldr	r0, [r3, #0]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	6859      	ldr	r1, [r3, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	461a      	mov	r2, r3
 800522c:	f000 fbe6 	bl	80059fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2150      	movs	r1, #80	; 0x50
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fc3f 	bl	8005aba <TIM_ITRx_SetConfig>
      break;
 800523c:	e02c      	b.n	8005298 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6859      	ldr	r1, [r3, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	461a      	mov	r2, r3
 800524c:	f000 fc05 	bl	8005a5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2160      	movs	r1, #96	; 0x60
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fc2f 	bl	8005aba <TIM_ITRx_SetConfig>
      break;
 800525c:	e01c      	b.n	8005298 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6818      	ldr	r0, [r3, #0]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	6859      	ldr	r1, [r3, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	461a      	mov	r2, r3
 800526c:	f000 fbc6 	bl	80059fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2140      	movs	r1, #64	; 0x40
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fc1f 	bl	8005aba <TIM_ITRx_SetConfig>
      break;
 800527c:	e00c      	b.n	8005298 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4619      	mov	r1, r3
 8005288:	4610      	mov	r0, r2
 800528a:	f000 fc16 	bl	8005aba <TIM_ITRx_SetConfig>
      break;
 800528e:	e003      	b.n	8005298 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	73fb      	strb	r3, [r7, #15]
      break;
 8005294:	e000      	b.n	8005298 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005296:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a42      	ldr	r2, [pc, #264]	; (80053d0 <TIM_Base_SetConfig+0x11c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d013      	beq.n	80052f4 <TIM_Base_SetConfig+0x40>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d2:	d00f      	beq.n	80052f4 <TIM_Base_SetConfig+0x40>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a3f      	ldr	r2, [pc, #252]	; (80053d4 <TIM_Base_SetConfig+0x120>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00b      	beq.n	80052f4 <TIM_Base_SetConfig+0x40>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a3e      	ldr	r2, [pc, #248]	; (80053d8 <TIM_Base_SetConfig+0x124>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d007      	beq.n	80052f4 <TIM_Base_SetConfig+0x40>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a3d      	ldr	r2, [pc, #244]	; (80053dc <TIM_Base_SetConfig+0x128>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_Base_SetConfig+0x40>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a3c      	ldr	r2, [pc, #240]	; (80053e0 <TIM_Base_SetConfig+0x12c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d108      	bne.n	8005306 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a31      	ldr	r2, [pc, #196]	; (80053d0 <TIM_Base_SetConfig+0x11c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d01f      	beq.n	800534e <TIM_Base_SetConfig+0x9a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005314:	d01b      	beq.n	800534e <TIM_Base_SetConfig+0x9a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a2e      	ldr	r2, [pc, #184]	; (80053d4 <TIM_Base_SetConfig+0x120>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d017      	beq.n	800534e <TIM_Base_SetConfig+0x9a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a2d      	ldr	r2, [pc, #180]	; (80053d8 <TIM_Base_SetConfig+0x124>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d013      	beq.n	800534e <TIM_Base_SetConfig+0x9a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a2c      	ldr	r2, [pc, #176]	; (80053dc <TIM_Base_SetConfig+0x128>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00f      	beq.n	800534e <TIM_Base_SetConfig+0x9a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a2c      	ldr	r2, [pc, #176]	; (80053e4 <TIM_Base_SetConfig+0x130>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00b      	beq.n	800534e <TIM_Base_SetConfig+0x9a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a2b      	ldr	r2, [pc, #172]	; (80053e8 <TIM_Base_SetConfig+0x134>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d007      	beq.n	800534e <TIM_Base_SetConfig+0x9a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a2a      	ldr	r2, [pc, #168]	; (80053ec <TIM_Base_SetConfig+0x138>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d003      	beq.n	800534e <TIM_Base_SetConfig+0x9a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a25      	ldr	r2, [pc, #148]	; (80053e0 <TIM_Base_SetConfig+0x12c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d108      	bne.n	8005360 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4313      	orrs	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a12      	ldr	r2, [pc, #72]	; (80053d0 <TIM_Base_SetConfig+0x11c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d013      	beq.n	80053b4 <TIM_Base_SetConfig+0x100>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a13      	ldr	r2, [pc, #76]	; (80053dc <TIM_Base_SetConfig+0x128>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00f      	beq.n	80053b4 <TIM_Base_SetConfig+0x100>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a13      	ldr	r2, [pc, #76]	; (80053e4 <TIM_Base_SetConfig+0x130>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00b      	beq.n	80053b4 <TIM_Base_SetConfig+0x100>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a12      	ldr	r2, [pc, #72]	; (80053e8 <TIM_Base_SetConfig+0x134>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d007      	beq.n	80053b4 <TIM_Base_SetConfig+0x100>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a11      	ldr	r2, [pc, #68]	; (80053ec <TIM_Base_SetConfig+0x138>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d003      	beq.n	80053b4 <TIM_Base_SetConfig+0x100>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a0c      	ldr	r2, [pc, #48]	; (80053e0 <TIM_Base_SetConfig+0x12c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d103      	bne.n	80053bc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	615a      	str	r2, [r3, #20]
}
 80053c2:	bf00      	nop
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40012c00 	.word	0x40012c00
 80053d4:	40000400 	.word	0x40000400
 80053d8:	40000800 	.word	0x40000800
 80053dc:	40013400 	.word	0x40013400
 80053e0:	40015000 	.word	0x40015000
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40014400 	.word	0x40014400
 80053ec:	40014800 	.word	0x40014800

080053f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f023 0201 	bic.w	r2, r3, #1
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800541e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0303 	bic.w	r3, r3, #3
 800542a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f023 0302 	bic.w	r3, r3, #2
 800543c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a30      	ldr	r2, [pc, #192]	; (800550c <TIM_OC1_SetConfig+0x11c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d013      	beq.n	8005478 <TIM_OC1_SetConfig+0x88>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a2f      	ldr	r2, [pc, #188]	; (8005510 <TIM_OC1_SetConfig+0x120>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00f      	beq.n	8005478 <TIM_OC1_SetConfig+0x88>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a2e      	ldr	r2, [pc, #184]	; (8005514 <TIM_OC1_SetConfig+0x124>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00b      	beq.n	8005478 <TIM_OC1_SetConfig+0x88>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a2d      	ldr	r2, [pc, #180]	; (8005518 <TIM_OC1_SetConfig+0x128>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d007      	beq.n	8005478 <TIM_OC1_SetConfig+0x88>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a2c      	ldr	r2, [pc, #176]	; (800551c <TIM_OC1_SetConfig+0x12c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d003      	beq.n	8005478 <TIM_OC1_SetConfig+0x88>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a2b      	ldr	r2, [pc, #172]	; (8005520 <TIM_OC1_SetConfig+0x130>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d10c      	bne.n	8005492 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f023 0308 	bic.w	r3, r3, #8
 800547e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	4313      	orrs	r3, r2
 8005488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f023 0304 	bic.w	r3, r3, #4
 8005490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a1d      	ldr	r2, [pc, #116]	; (800550c <TIM_OC1_SetConfig+0x11c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d013      	beq.n	80054c2 <TIM_OC1_SetConfig+0xd2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a1c      	ldr	r2, [pc, #112]	; (8005510 <TIM_OC1_SetConfig+0x120>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00f      	beq.n	80054c2 <TIM_OC1_SetConfig+0xd2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a1b      	ldr	r2, [pc, #108]	; (8005514 <TIM_OC1_SetConfig+0x124>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00b      	beq.n	80054c2 <TIM_OC1_SetConfig+0xd2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a1a      	ldr	r2, [pc, #104]	; (8005518 <TIM_OC1_SetConfig+0x128>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d007      	beq.n	80054c2 <TIM_OC1_SetConfig+0xd2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a19      	ldr	r2, [pc, #100]	; (800551c <TIM_OC1_SetConfig+0x12c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d003      	beq.n	80054c2 <TIM_OC1_SetConfig+0xd2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a18      	ldr	r2, [pc, #96]	; (8005520 <TIM_OC1_SetConfig+0x130>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d111      	bne.n	80054e6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	4313      	orrs	r3, r2
 80054da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	621a      	str	r2, [r3, #32]
}
 8005500:	bf00      	nop
 8005502:	371c      	adds	r7, #28
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	40012c00 	.word	0x40012c00
 8005510:	40013400 	.word	0x40013400
 8005514:	40014000 	.word	0x40014000
 8005518:	40014400 	.word	0x40014400
 800551c:	40014800 	.word	0x40014800
 8005520:	40015000 	.word	0x40015000

08005524 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	f023 0210 	bic.w	r2, r3, #16
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800555e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	021b      	lsls	r3, r3, #8
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f023 0320 	bic.w	r3, r3, #32
 8005572:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a2c      	ldr	r2, [pc, #176]	; (8005634 <TIM_OC2_SetConfig+0x110>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d007      	beq.n	8005598 <TIM_OC2_SetConfig+0x74>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a2b      	ldr	r2, [pc, #172]	; (8005638 <TIM_OC2_SetConfig+0x114>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d003      	beq.n	8005598 <TIM_OC2_SetConfig+0x74>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a2a      	ldr	r2, [pc, #168]	; (800563c <TIM_OC2_SetConfig+0x118>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d10d      	bne.n	80055b4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800559e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a1f      	ldr	r2, [pc, #124]	; (8005634 <TIM_OC2_SetConfig+0x110>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d013      	beq.n	80055e4 <TIM_OC2_SetConfig+0xc0>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a1e      	ldr	r2, [pc, #120]	; (8005638 <TIM_OC2_SetConfig+0x114>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00f      	beq.n	80055e4 <TIM_OC2_SetConfig+0xc0>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a1e      	ldr	r2, [pc, #120]	; (8005640 <TIM_OC2_SetConfig+0x11c>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d00b      	beq.n	80055e4 <TIM_OC2_SetConfig+0xc0>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a1d      	ldr	r2, [pc, #116]	; (8005644 <TIM_OC2_SetConfig+0x120>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d007      	beq.n	80055e4 <TIM_OC2_SetConfig+0xc0>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a1c      	ldr	r2, [pc, #112]	; (8005648 <TIM_OC2_SetConfig+0x124>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d003      	beq.n	80055e4 <TIM_OC2_SetConfig+0xc0>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a17      	ldr	r2, [pc, #92]	; (800563c <TIM_OC2_SetConfig+0x118>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d113      	bne.n	800560c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055ea:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055f2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	621a      	str	r2, [r3, #32]
}
 8005626:	bf00      	nop
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	40012c00 	.word	0x40012c00
 8005638:	40013400 	.word	0x40013400
 800563c:	40015000 	.word	0x40015000
 8005640:	40014000 	.word	0x40014000
 8005644:	40014400 	.word	0x40014400
 8005648:	40014800 	.word	0x40014800

0800564c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800567a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 0303 	bic.w	r3, r3, #3
 8005686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	021b      	lsls	r3, r3, #8
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a2b      	ldr	r2, [pc, #172]	; (8005758 <TIM_OC3_SetConfig+0x10c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d007      	beq.n	80056be <TIM_OC3_SetConfig+0x72>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a2a      	ldr	r2, [pc, #168]	; (800575c <TIM_OC3_SetConfig+0x110>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d003      	beq.n	80056be <TIM_OC3_SetConfig+0x72>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a29      	ldr	r2, [pc, #164]	; (8005760 <TIM_OC3_SetConfig+0x114>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d10d      	bne.n	80056da <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	021b      	lsls	r3, r3, #8
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056d8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a1e      	ldr	r2, [pc, #120]	; (8005758 <TIM_OC3_SetConfig+0x10c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d013      	beq.n	800570a <TIM_OC3_SetConfig+0xbe>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a1d      	ldr	r2, [pc, #116]	; (800575c <TIM_OC3_SetConfig+0x110>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d00f      	beq.n	800570a <TIM_OC3_SetConfig+0xbe>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a1d      	ldr	r2, [pc, #116]	; (8005764 <TIM_OC3_SetConfig+0x118>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00b      	beq.n	800570a <TIM_OC3_SetConfig+0xbe>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a1c      	ldr	r2, [pc, #112]	; (8005768 <TIM_OC3_SetConfig+0x11c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d007      	beq.n	800570a <TIM_OC3_SetConfig+0xbe>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a1b      	ldr	r2, [pc, #108]	; (800576c <TIM_OC3_SetConfig+0x120>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d003      	beq.n	800570a <TIM_OC3_SetConfig+0xbe>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a16      	ldr	r2, [pc, #88]	; (8005760 <TIM_OC3_SetConfig+0x114>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d113      	bne.n	8005732 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	621a      	str	r2, [r3, #32]
}
 800574c:	bf00      	nop
 800574e:	371c      	adds	r7, #28
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	40012c00 	.word	0x40012c00
 800575c:	40013400 	.word	0x40013400
 8005760:	40015000 	.word	0x40015000
 8005764:	40014000 	.word	0x40014000
 8005768:	40014400 	.word	0x40014400
 800576c:	40014800 	.word	0x40014800

08005770 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800579e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	021b      	lsls	r3, r3, #8
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	031b      	lsls	r3, r3, #12
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a1a      	ldr	r2, [pc, #104]	; (8005838 <TIM_OC4_SetConfig+0xc8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d013      	beq.n	80057fc <TIM_OC4_SetConfig+0x8c>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a19      	ldr	r2, [pc, #100]	; (800583c <TIM_OC4_SetConfig+0xcc>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00f      	beq.n	80057fc <TIM_OC4_SetConfig+0x8c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a18      	ldr	r2, [pc, #96]	; (8005840 <TIM_OC4_SetConfig+0xd0>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00b      	beq.n	80057fc <TIM_OC4_SetConfig+0x8c>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a17      	ldr	r2, [pc, #92]	; (8005844 <TIM_OC4_SetConfig+0xd4>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d007      	beq.n	80057fc <TIM_OC4_SetConfig+0x8c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a16      	ldr	r2, [pc, #88]	; (8005848 <TIM_OC4_SetConfig+0xd8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d003      	beq.n	80057fc <TIM_OC4_SetConfig+0x8c>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a15      	ldr	r2, [pc, #84]	; (800584c <TIM_OC4_SetConfig+0xdc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d109      	bne.n	8005810 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005802:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	019b      	lsls	r3, r3, #6
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	4313      	orrs	r3, r2
 800580e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	621a      	str	r2, [r3, #32]
}
 800582a:	bf00      	nop
 800582c:	371c      	adds	r7, #28
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40012c00 	.word	0x40012c00
 800583c:	40013400 	.word	0x40013400
 8005840:	40014000 	.word	0x40014000
 8005844:	40014400 	.word	0x40014400
 8005848:	40014800 	.word	0x40014800
 800584c:	40015000 	.word	0x40015000

08005850 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800587e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005894:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	041b      	lsls	r3, r3, #16
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a19      	ldr	r2, [pc, #100]	; (800590c <TIM_OC5_SetConfig+0xbc>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d013      	beq.n	80058d2 <TIM_OC5_SetConfig+0x82>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a18      	ldr	r2, [pc, #96]	; (8005910 <TIM_OC5_SetConfig+0xc0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00f      	beq.n	80058d2 <TIM_OC5_SetConfig+0x82>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a17      	ldr	r2, [pc, #92]	; (8005914 <TIM_OC5_SetConfig+0xc4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00b      	beq.n	80058d2 <TIM_OC5_SetConfig+0x82>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a16      	ldr	r2, [pc, #88]	; (8005918 <TIM_OC5_SetConfig+0xc8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d007      	beq.n	80058d2 <TIM_OC5_SetConfig+0x82>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a15      	ldr	r2, [pc, #84]	; (800591c <TIM_OC5_SetConfig+0xcc>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d003      	beq.n	80058d2 <TIM_OC5_SetConfig+0x82>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a14      	ldr	r2, [pc, #80]	; (8005920 <TIM_OC5_SetConfig+0xd0>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d109      	bne.n	80058e6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	021b      	lsls	r3, r3, #8
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	621a      	str	r2, [r3, #32]
}
 8005900:	bf00      	nop
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	40012c00 	.word	0x40012c00
 8005910:	40013400 	.word	0x40013400
 8005914:	40014000 	.word	0x40014000
 8005918:	40014400 	.word	0x40014400
 800591c:	40014800 	.word	0x40014800
 8005920:	40015000 	.word	0x40015000

08005924 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800596a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	051b      	lsls	r3, r3, #20
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a1a      	ldr	r2, [pc, #104]	; (80059e4 <TIM_OC6_SetConfig+0xc0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <TIM_OC6_SetConfig+0x84>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a19      	ldr	r2, [pc, #100]	; (80059e8 <TIM_OC6_SetConfig+0xc4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00f      	beq.n	80059a8 <TIM_OC6_SetConfig+0x84>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a18      	ldr	r2, [pc, #96]	; (80059ec <TIM_OC6_SetConfig+0xc8>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00b      	beq.n	80059a8 <TIM_OC6_SetConfig+0x84>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a17      	ldr	r2, [pc, #92]	; (80059f0 <TIM_OC6_SetConfig+0xcc>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d007      	beq.n	80059a8 <TIM_OC6_SetConfig+0x84>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a16      	ldr	r2, [pc, #88]	; (80059f4 <TIM_OC6_SetConfig+0xd0>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_OC6_SetConfig+0x84>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a15      	ldr	r2, [pc, #84]	; (80059f8 <TIM_OC6_SetConfig+0xd4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d109      	bne.n	80059bc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	029b      	lsls	r3, r3, #10
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	621a      	str	r2, [r3, #32]
}
 80059d6:	bf00      	nop
 80059d8:	371c      	adds	r7, #28
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40012c00 	.word	0x40012c00
 80059e8:	40013400 	.word	0x40013400
 80059ec:	40014000 	.word	0x40014000
 80059f0:	40014400 	.word	0x40014400
 80059f4:	40014800 	.word	0x40014800
 80059f8:	40015000 	.word	0x40015000

080059fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	f023 0201 	bic.w	r2, r3, #1
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	011b      	lsls	r3, r3, #4
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f023 030a 	bic.w	r3, r3, #10
 8005a38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	621a      	str	r2, [r3, #32]
}
 8005a4e:	bf00      	nop
 8005a50:	371c      	adds	r7, #28
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b087      	sub	sp, #28
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	60f8      	str	r0, [r7, #12]
 8005a62:	60b9      	str	r1, [r7, #8]
 8005a64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	f023 0210 	bic.w	r2, r3, #16
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	031b      	lsls	r3, r3, #12
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	621a      	str	r2, [r3, #32]
}
 8005aae:	bf00      	nop
 8005ab0:	371c      	adds	r7, #28
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b085      	sub	sp, #20
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f043 0307 	orr.w	r3, r3, #7
 8005adc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	609a      	str	r2, [r3, #8]
}
 8005ae4:	bf00      	nop
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	021a      	lsls	r2, r3, #8
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	431a      	orrs	r2, r3
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	609a      	str	r2, [r3, #8]
}
 8005b24:	bf00      	nop
 8005b26:	371c      	adds	r7, #28
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f003 031f 	and.w	r3, r3, #31
 8005b42:	2201      	movs	r2, #1
 8005b44:	fa02 f303 	lsl.w	r3, r2, r3
 8005b48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a1a      	ldr	r2, [r3, #32]
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	43db      	mvns	r3, r3
 8005b52:	401a      	ands	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a1a      	ldr	r2, [r3, #32]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f003 031f 	and.w	r3, r3, #31
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	fa01 f303 	lsl.w	r3, r1, r3
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	621a      	str	r2, [r3, #32]
}
 8005b6e:	bf00      	nop
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
	...

08005b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d101      	bne.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b90:	2302      	movs	r3, #2
 8005b92:	e06d      	b.n	8005c70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a30      	ldr	r2, [pc, #192]	; (8005c7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d009      	beq.n	8005bd2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a2f      	ldr	r2, [pc, #188]	; (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d004      	beq.n	8005bd2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a2d      	ldr	r2, [pc, #180]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d108      	bne.n	8005be4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005bd8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a1e      	ldr	r2, [pc, #120]	; (8005c7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d01d      	beq.n	8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c10:	d018      	beq.n	8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a1c      	ldr	r2, [pc, #112]	; (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d013      	beq.n	8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a1a      	ldr	r2, [pc, #104]	; (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d00e      	beq.n	8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a15      	ldr	r2, [pc, #84]	; (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d009      	beq.n	8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a16      	ldr	r2, [pc, #88]	; (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d004      	beq.n	8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a11      	ldr	r2, [pc, #68]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d10c      	bne.n	8005c5e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	40012c00 	.word	0x40012c00
 8005c80:	40013400 	.word	0x40013400
 8005c84:	40015000 	.word	0x40015000
 8005c88:	40000400 	.word	0x40000400
 8005c8c:	40000800 	.word	0x40000800
 8005c90:	40014000 	.word	0x40014000

08005c94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e040      	b.n	8005d28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d106      	bne.n	8005cbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fc fa8c 	bl	80021d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2224      	movs	r2, #36	; 0x24
 8005cc0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0201 	bic.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f91a 	bl	8005f0c <UART_SetConfig>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d101      	bne.n	8005ce2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e022      	b.n	8005d28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fae2 	bl	80062b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0201 	orr.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fb69 	bl	80063f8 <UART_CheckIdleState>
 8005d26:	4603      	mov	r3, r0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08a      	sub	sp, #40	; 0x28
 8005d34:	af02      	add	r7, sp, #8
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	603b      	str	r3, [r7, #0]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	d178      	bne.n	8005e3a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <HAL_UART_Transmit+0x24>
 8005d4e:	88fb      	ldrh	r3, [r7, #6]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e071      	b.n	8005e3c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2221      	movs	r2, #33	; 0x21
 8005d64:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d66:	f7fc fc6d 	bl	8002644 <HAL_GetTick>
 8005d6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	88fa      	ldrh	r2, [r7, #6]
 8005d70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	88fa      	ldrh	r2, [r7, #6]
 8005d78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d84:	d108      	bne.n	8005d98 <HAL_UART_Transmit+0x68>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d104      	bne.n	8005d98 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	61bb      	str	r3, [r7, #24]
 8005d96:	e003      	b.n	8005da0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005da0:	e030      	b.n	8005e04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2200      	movs	r2, #0
 8005daa:	2180      	movs	r1, #128	; 0x80
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 fbcb 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d004      	beq.n	8005dc2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e03c      	b.n	8005e3c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10b      	bne.n	8005de0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	881a      	ldrh	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dd4:	b292      	uxth	r2, r2
 8005dd6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	3302      	adds	r3, #2
 8005ddc:	61bb      	str	r3, [r7, #24]
 8005dde:	e008      	b.n	8005df2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	781a      	ldrb	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	b292      	uxth	r2, r2
 8005dea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	3301      	adds	r3, #1
 8005df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1c8      	bne.n	8005da2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2200      	movs	r2, #0
 8005e18:	2140      	movs	r1, #64	; 0x40
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 fb94 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d004      	beq.n	8005e30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e005      	b.n	8005e3c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2220      	movs	r2, #32
 8005e34:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	e000      	b.n	8005e3c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005e3a:	2302      	movs	r3, #2
  }
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3720      	adds	r7, #32
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08a      	sub	sp, #40	; 0x28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e58:	2b20      	cmp	r3, #32
 8005e5a:	d132      	bne.n	8005ec2 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d002      	beq.n	8005e68 <HAL_UART_Receive_DMA+0x24>
 8005e62:	88fb      	ldrh	r3, [r7, #6]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e02b      	b.n	8005ec4 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d018      	beq.n	8005eb2 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	e853 3f00 	ldrex	r3, [r3]
 8005e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	623b      	str	r3, [r7, #32]
 8005ea0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	69f9      	ldr	r1, [r7, #28]
 8005ea4:	6a3a      	ldr	r2, [r7, #32]
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1e6      	bne.n	8005e80 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005eb2:	88fb      	ldrh	r3, [r7, #6]
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	68b9      	ldr	r1, [r7, #8]
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 fbad 	bl	8006618 <UART_Start_Receive_DMA>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	e000      	b.n	8005ec4 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005ec2:	2302      	movs	r3, #2
  }
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3728      	adds	r7, #40	; 0x28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	460b      	mov	r3, r1
 8005efe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f14:	2300      	movs	r3, #0
 8005f16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	4b92      	ldr	r3, [pc, #584]	; (8006180 <UART_SetConfig+0x274>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6812      	ldr	r2, [r2, #0]
 8005f3e:	6979      	ldr	r1, [r7, #20]
 8005f40:	430b      	orrs	r3, r1
 8005f42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a80      	ldr	r2, [pc, #512]	; (8006184 <UART_SetConfig+0x278>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d120      	bne.n	8005fca <UART_SetConfig+0xbe>
 8005f88:	4b7f      	ldr	r3, [pc, #508]	; (8006188 <UART_SetConfig+0x27c>)
 8005f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8c:	f003 0303 	and.w	r3, r3, #3
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d817      	bhi.n	8005fc4 <UART_SetConfig+0xb8>
 8005f94:	a201      	add	r2, pc, #4	; (adr r2, 8005f9c <UART_SetConfig+0x90>)
 8005f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9a:	bf00      	nop
 8005f9c:	08005fad 	.word	0x08005fad
 8005fa0:	08005fb9 	.word	0x08005fb9
 8005fa4:	08005fbf 	.word	0x08005fbf
 8005fa8:	08005fb3 	.word	0x08005fb3
 8005fac:	2301      	movs	r3, #1
 8005fae:	77fb      	strb	r3, [r7, #31]
 8005fb0:	e0b5      	b.n	800611e <UART_SetConfig+0x212>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	77fb      	strb	r3, [r7, #31]
 8005fb6:	e0b2      	b.n	800611e <UART_SetConfig+0x212>
 8005fb8:	2304      	movs	r3, #4
 8005fba:	77fb      	strb	r3, [r7, #31]
 8005fbc:	e0af      	b.n	800611e <UART_SetConfig+0x212>
 8005fbe:	2308      	movs	r3, #8
 8005fc0:	77fb      	strb	r3, [r7, #31]
 8005fc2:	e0ac      	b.n	800611e <UART_SetConfig+0x212>
 8005fc4:	2310      	movs	r3, #16
 8005fc6:	77fb      	strb	r3, [r7, #31]
 8005fc8:	e0a9      	b.n	800611e <UART_SetConfig+0x212>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a6f      	ldr	r2, [pc, #444]	; (800618c <UART_SetConfig+0x280>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d124      	bne.n	800601e <UART_SetConfig+0x112>
 8005fd4:	4b6c      	ldr	r3, [pc, #432]	; (8006188 <UART_SetConfig+0x27c>)
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fdc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fe0:	d011      	beq.n	8006006 <UART_SetConfig+0xfa>
 8005fe2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fe6:	d817      	bhi.n	8006018 <UART_SetConfig+0x10c>
 8005fe8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fec:	d011      	beq.n	8006012 <UART_SetConfig+0x106>
 8005fee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ff2:	d811      	bhi.n	8006018 <UART_SetConfig+0x10c>
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <UART_SetConfig+0xf4>
 8005ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ffc:	d006      	beq.n	800600c <UART_SetConfig+0x100>
 8005ffe:	e00b      	b.n	8006018 <UART_SetConfig+0x10c>
 8006000:	2300      	movs	r3, #0
 8006002:	77fb      	strb	r3, [r7, #31]
 8006004:	e08b      	b.n	800611e <UART_SetConfig+0x212>
 8006006:	2302      	movs	r3, #2
 8006008:	77fb      	strb	r3, [r7, #31]
 800600a:	e088      	b.n	800611e <UART_SetConfig+0x212>
 800600c:	2304      	movs	r3, #4
 800600e:	77fb      	strb	r3, [r7, #31]
 8006010:	e085      	b.n	800611e <UART_SetConfig+0x212>
 8006012:	2308      	movs	r3, #8
 8006014:	77fb      	strb	r3, [r7, #31]
 8006016:	e082      	b.n	800611e <UART_SetConfig+0x212>
 8006018:	2310      	movs	r3, #16
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e07f      	b.n	800611e <UART_SetConfig+0x212>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a5b      	ldr	r2, [pc, #364]	; (8006190 <UART_SetConfig+0x284>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d124      	bne.n	8006072 <UART_SetConfig+0x166>
 8006028:	4b57      	ldr	r3, [pc, #348]	; (8006188 <UART_SetConfig+0x27c>)
 800602a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006030:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006034:	d011      	beq.n	800605a <UART_SetConfig+0x14e>
 8006036:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800603a:	d817      	bhi.n	800606c <UART_SetConfig+0x160>
 800603c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006040:	d011      	beq.n	8006066 <UART_SetConfig+0x15a>
 8006042:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006046:	d811      	bhi.n	800606c <UART_SetConfig+0x160>
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <UART_SetConfig+0x148>
 800604c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006050:	d006      	beq.n	8006060 <UART_SetConfig+0x154>
 8006052:	e00b      	b.n	800606c <UART_SetConfig+0x160>
 8006054:	2300      	movs	r3, #0
 8006056:	77fb      	strb	r3, [r7, #31]
 8006058:	e061      	b.n	800611e <UART_SetConfig+0x212>
 800605a:	2302      	movs	r3, #2
 800605c:	77fb      	strb	r3, [r7, #31]
 800605e:	e05e      	b.n	800611e <UART_SetConfig+0x212>
 8006060:	2304      	movs	r3, #4
 8006062:	77fb      	strb	r3, [r7, #31]
 8006064:	e05b      	b.n	800611e <UART_SetConfig+0x212>
 8006066:	2308      	movs	r3, #8
 8006068:	77fb      	strb	r3, [r7, #31]
 800606a:	e058      	b.n	800611e <UART_SetConfig+0x212>
 800606c:	2310      	movs	r3, #16
 800606e:	77fb      	strb	r3, [r7, #31]
 8006070:	e055      	b.n	800611e <UART_SetConfig+0x212>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a47      	ldr	r2, [pc, #284]	; (8006194 <UART_SetConfig+0x288>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d124      	bne.n	80060c6 <UART_SetConfig+0x1ba>
 800607c:	4b42      	ldr	r3, [pc, #264]	; (8006188 <UART_SetConfig+0x27c>)
 800607e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006080:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006084:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006088:	d011      	beq.n	80060ae <UART_SetConfig+0x1a2>
 800608a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800608e:	d817      	bhi.n	80060c0 <UART_SetConfig+0x1b4>
 8006090:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006094:	d011      	beq.n	80060ba <UART_SetConfig+0x1ae>
 8006096:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800609a:	d811      	bhi.n	80060c0 <UART_SetConfig+0x1b4>
 800609c:	2b00      	cmp	r3, #0
 800609e:	d003      	beq.n	80060a8 <UART_SetConfig+0x19c>
 80060a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060a4:	d006      	beq.n	80060b4 <UART_SetConfig+0x1a8>
 80060a6:	e00b      	b.n	80060c0 <UART_SetConfig+0x1b4>
 80060a8:	2300      	movs	r3, #0
 80060aa:	77fb      	strb	r3, [r7, #31]
 80060ac:	e037      	b.n	800611e <UART_SetConfig+0x212>
 80060ae:	2302      	movs	r3, #2
 80060b0:	77fb      	strb	r3, [r7, #31]
 80060b2:	e034      	b.n	800611e <UART_SetConfig+0x212>
 80060b4:	2304      	movs	r3, #4
 80060b6:	77fb      	strb	r3, [r7, #31]
 80060b8:	e031      	b.n	800611e <UART_SetConfig+0x212>
 80060ba:	2308      	movs	r3, #8
 80060bc:	77fb      	strb	r3, [r7, #31]
 80060be:	e02e      	b.n	800611e <UART_SetConfig+0x212>
 80060c0:	2310      	movs	r3, #16
 80060c2:	77fb      	strb	r3, [r7, #31]
 80060c4:	e02b      	b.n	800611e <UART_SetConfig+0x212>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a33      	ldr	r2, [pc, #204]	; (8006198 <UART_SetConfig+0x28c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d124      	bne.n	800611a <UART_SetConfig+0x20e>
 80060d0:	4b2d      	ldr	r3, [pc, #180]	; (8006188 <UART_SetConfig+0x27c>)
 80060d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80060d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060dc:	d011      	beq.n	8006102 <UART_SetConfig+0x1f6>
 80060de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060e2:	d817      	bhi.n	8006114 <UART_SetConfig+0x208>
 80060e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060e8:	d011      	beq.n	800610e <UART_SetConfig+0x202>
 80060ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060ee:	d811      	bhi.n	8006114 <UART_SetConfig+0x208>
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <UART_SetConfig+0x1f0>
 80060f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060f8:	d006      	beq.n	8006108 <UART_SetConfig+0x1fc>
 80060fa:	e00b      	b.n	8006114 <UART_SetConfig+0x208>
 80060fc:	2300      	movs	r3, #0
 80060fe:	77fb      	strb	r3, [r7, #31]
 8006100:	e00d      	b.n	800611e <UART_SetConfig+0x212>
 8006102:	2302      	movs	r3, #2
 8006104:	77fb      	strb	r3, [r7, #31]
 8006106:	e00a      	b.n	800611e <UART_SetConfig+0x212>
 8006108:	2304      	movs	r3, #4
 800610a:	77fb      	strb	r3, [r7, #31]
 800610c:	e007      	b.n	800611e <UART_SetConfig+0x212>
 800610e:	2308      	movs	r3, #8
 8006110:	77fb      	strb	r3, [r7, #31]
 8006112:	e004      	b.n	800611e <UART_SetConfig+0x212>
 8006114:	2310      	movs	r3, #16
 8006116:	77fb      	strb	r3, [r7, #31]
 8006118:	e001      	b.n	800611e <UART_SetConfig+0x212>
 800611a:	2310      	movs	r3, #16
 800611c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006126:	d16b      	bne.n	8006200 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8006128:	7ffb      	ldrb	r3, [r7, #31]
 800612a:	2b08      	cmp	r3, #8
 800612c:	d838      	bhi.n	80061a0 <UART_SetConfig+0x294>
 800612e:	a201      	add	r2, pc, #4	; (adr r2, 8006134 <UART_SetConfig+0x228>)
 8006130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006134:	08006159 	.word	0x08006159
 8006138:	08006161 	.word	0x08006161
 800613c:	08006169 	.word	0x08006169
 8006140:	080061a1 	.word	0x080061a1
 8006144:	0800616f 	.word	0x0800616f
 8006148:	080061a1 	.word	0x080061a1
 800614c:	080061a1 	.word	0x080061a1
 8006150:	080061a1 	.word	0x080061a1
 8006154:	08006177 	.word	0x08006177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006158:	f7fe f974 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 800615c:	61b8      	str	r0, [r7, #24]
        break;
 800615e:	e024      	b.n	80061aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006160:	f7fe f992 	bl	8004488 <HAL_RCC_GetPCLK2Freq>
 8006164:	61b8      	str	r0, [r7, #24]
        break;
 8006166:	e020      	b.n	80061aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006168:	4b0c      	ldr	r3, [pc, #48]	; (800619c <UART_SetConfig+0x290>)
 800616a:	61bb      	str	r3, [r7, #24]
        break;
 800616c:	e01d      	b.n	80061aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800616e:	f7fe f8f3 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8006172:	61b8      	str	r0, [r7, #24]
        break;
 8006174:	e019      	b.n	80061aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800617a:	61bb      	str	r3, [r7, #24]
        break;
 800617c:	e015      	b.n	80061aa <UART_SetConfig+0x29e>
 800617e:	bf00      	nop
 8006180:	efff69f3 	.word	0xefff69f3
 8006184:	40013800 	.word	0x40013800
 8006188:	40021000 	.word	0x40021000
 800618c:	40004400 	.word	0x40004400
 8006190:	40004800 	.word	0x40004800
 8006194:	40004c00 	.word	0x40004c00
 8006198:	40005000 	.word	0x40005000
 800619c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	77bb      	strb	r3, [r7, #30]
        break;
 80061a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d073      	beq.n	8006298 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	005a      	lsls	r2, r3, #1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	085b      	lsrs	r3, r3, #1
 80061ba:	441a      	add	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	2b0f      	cmp	r3, #15
 80061ca:	d916      	bls.n	80061fa <UART_SetConfig+0x2ee>
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061d2:	d212      	bcs.n	80061fa <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f023 030f 	bic.w	r3, r3, #15
 80061dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	085b      	lsrs	r3, r3, #1
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	f003 0307 	and.w	r3, r3, #7
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	89fb      	ldrh	r3, [r7, #14]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	89fa      	ldrh	r2, [r7, #14]
 80061f6:	60da      	str	r2, [r3, #12]
 80061f8:	e04e      	b.n	8006298 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	77bb      	strb	r3, [r7, #30]
 80061fe:	e04b      	b.n	8006298 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006200:	7ffb      	ldrb	r3, [r7, #31]
 8006202:	2b08      	cmp	r3, #8
 8006204:	d827      	bhi.n	8006256 <UART_SetConfig+0x34a>
 8006206:	a201      	add	r2, pc, #4	; (adr r2, 800620c <UART_SetConfig+0x300>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	08006231 	.word	0x08006231
 8006210:	08006239 	.word	0x08006239
 8006214:	08006241 	.word	0x08006241
 8006218:	08006257 	.word	0x08006257
 800621c:	08006247 	.word	0x08006247
 8006220:	08006257 	.word	0x08006257
 8006224:	08006257 	.word	0x08006257
 8006228:	08006257 	.word	0x08006257
 800622c:	0800624f 	.word	0x0800624f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006230:	f7fe f908 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 8006234:	61b8      	str	r0, [r7, #24]
        break;
 8006236:	e013      	b.n	8006260 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006238:	f7fe f926 	bl	8004488 <HAL_RCC_GetPCLK2Freq>
 800623c:	61b8      	str	r0, [r7, #24]
        break;
 800623e:	e00f      	b.n	8006260 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006240:	4b1b      	ldr	r3, [pc, #108]	; (80062b0 <UART_SetConfig+0x3a4>)
 8006242:	61bb      	str	r3, [r7, #24]
        break;
 8006244:	e00c      	b.n	8006260 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006246:	f7fe f887 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 800624a:	61b8      	str	r0, [r7, #24]
        break;
 800624c:	e008      	b.n	8006260 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800624e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006252:	61bb      	str	r3, [r7, #24]
        break;
 8006254:	e004      	b.n	8006260 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	77bb      	strb	r3, [r7, #30]
        break;
 800625e:	bf00      	nop
    }

    if (pclk != 0U)
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d018      	beq.n	8006298 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	085a      	lsrs	r2, r3, #1
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	441a      	add	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	fbb2 f3f3 	udiv	r3, r2, r3
 8006278:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	2b0f      	cmp	r3, #15
 800627e:	d909      	bls.n	8006294 <UART_SetConfig+0x388>
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006286:	d205      	bcs.n	8006294 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	b29a      	uxth	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	60da      	str	r2, [r3, #12]
 8006292:	e001      	b.n	8006298 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80062a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3720      	adds	r7, #32
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	007a1200 	.word	0x007a1200

080062b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00a      	beq.n	80062de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00a      	beq.n	8006322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	f003 0308 	and.w	r3, r3, #8
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00a      	beq.n	8006344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	f003 0310 	and.w	r3, r3, #16
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00a      	beq.n	8006366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006390:	2b00      	cmp	r3, #0
 8006392:	d01a      	beq.n	80063ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063b2:	d10a      	bne.n	80063ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	605a      	str	r2, [r3, #4]
  }
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b098      	sub	sp, #96	; 0x60
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006408:	f7fc f91c 	bl	8002644 <HAL_GetTick>
 800640c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0308 	and.w	r3, r3, #8
 8006418:	2b08      	cmp	r3, #8
 800641a:	d12e      	bne.n	800647a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800641c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006424:	2200      	movs	r2, #0
 8006426:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f88c 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d021      	beq.n	800647a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643e:	e853 3f00 	ldrex	r3, [r3]
 8006442:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800644a:	653b      	str	r3, [r7, #80]	; 0x50
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	461a      	mov	r2, r3
 8006452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006454:	647b      	str	r3, [r7, #68]	; 0x44
 8006456:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800645a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e6      	bne.n	8006436 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2220      	movs	r2, #32
 800646c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e062      	b.n	8006540 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b04      	cmp	r3, #4
 8006486:	d149      	bne.n	800651c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006488:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006490:	2200      	movs	r2, #0
 8006492:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f856 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d03c      	beq.n	800651c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	623b      	str	r3, [r7, #32]
   return(result);
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	461a      	mov	r2, r3
 80064be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c0:	633b      	str	r3, [r7, #48]	; 0x30
 80064c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c8:	e841 2300 	strex	r3, r2, [r1]
 80064cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e6      	bne.n	80064a2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3308      	adds	r3, #8
 80064da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	e853 3f00 	ldrex	r3, [r3]
 80064e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0301 	bic.w	r3, r3, #1
 80064ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3308      	adds	r3, #8
 80064f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064f4:	61fa      	str	r2, [r7, #28]
 80064f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f8:	69b9      	ldr	r1, [r7, #24]
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	e841 2300 	strex	r3, r2, [r1]
 8006500:	617b      	str	r3, [r7, #20]
   return(result);
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e5      	bne.n	80064d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2220      	movs	r2, #32
 800650c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e011      	b.n	8006540 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2220      	movs	r2, #32
 8006520:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2220      	movs	r2, #32
 8006526:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3758      	adds	r7, #88	; 0x58
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	603b      	str	r3, [r7, #0]
 8006554:	4613      	mov	r3, r2
 8006556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006558:	e049      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006560:	d045      	beq.n	80065ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006562:	f7fc f86f 	bl	8002644 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	429a      	cmp	r2, r3
 8006570:	d302      	bcc.n	8006578 <UART_WaitOnFlagUntilTimeout+0x30>
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e048      	b.n	800660e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0304 	and.w	r3, r3, #4
 8006586:	2b00      	cmp	r3, #0
 8006588:	d031      	beq.n	80065ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	2b08      	cmp	r3, #8
 8006596:	d110      	bne.n	80065ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2208      	movs	r2, #8
 800659e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f8ff 	bl	80067a4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2208      	movs	r2, #8
 80065aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e029      	b.n	800660e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065c8:	d111      	bne.n	80065ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 f8e5 	bl	80067a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2220      	movs	r2, #32
 80065de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e00f      	b.n	800660e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	69da      	ldr	r2, [r3, #28]
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	4013      	ands	r3, r2
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	bf0c      	ite	eq
 80065fe:	2301      	moveq	r3, #1
 8006600:	2300      	movne	r3, #0
 8006602:	b2db      	uxtb	r3, r3
 8006604:	461a      	mov	r2, r3
 8006606:	79fb      	ldrb	r3, [r7, #7]
 8006608:	429a      	cmp	r2, r3
 800660a:	d0a6      	beq.n	800655a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
	...

08006618 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b096      	sub	sp, #88	; 0x58
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	4613      	mov	r3, r2
 8006624:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	88fa      	ldrh	r2, [r7, #6]
 8006630:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2222      	movs	r2, #34	; 0x22
 8006640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006648:	2b00      	cmp	r3, #0
 800664a:	d028      	beq.n	800669e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006650:	4a3e      	ldr	r2, [pc, #248]	; (800674c <UART_Start_Receive_DMA+0x134>)
 8006652:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006658:	4a3d      	ldr	r2, [pc, #244]	; (8006750 <UART_Start_Receive_DMA+0x138>)
 800665a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006660:	4a3c      	ldr	r2, [pc, #240]	; (8006754 <UART_Start_Receive_DMA+0x13c>)
 8006662:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006668:	2200      	movs	r2, #0
 800666a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3324      	adds	r3, #36	; 0x24
 8006676:	4619      	mov	r1, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667c:	461a      	mov	r2, r3
 800667e:	88fb      	ldrh	r3, [r7, #6]
 8006680:	f7fc f968 	bl	8002954 <HAL_DMA_Start_IT>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d009      	beq.n	800669e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2210      	movs	r2, #16
 800668e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2220      	movs	r2, #32
 8006696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e051      	b.n	8006742 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d018      	beq.n	80066d8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ae:	e853 3f00 	ldrex	r3, [r3]
 80066b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ba:	657b      	str	r3, [r7, #84]	; 0x54
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80066c6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e6      	bne.n	80066a6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3308      	adds	r3, #8
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	e853 3f00 	ldrex	r3, [r3]
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	f043 0301 	orr.w	r3, r3, #1
 80066ee:	653b      	str	r3, [r7, #80]	; 0x50
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3308      	adds	r3, #8
 80066f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066f8:	637a      	str	r2, [r7, #52]	; 0x34
 80066fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006700:	e841 2300 	strex	r3, r2, [r1]
 8006704:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e5      	bne.n	80066d8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3308      	adds	r3, #8
 8006712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	e853 3f00 	ldrex	r3, [r3]
 800671a:	613b      	str	r3, [r7, #16]
   return(result);
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3308      	adds	r3, #8
 800672a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800672c:	623a      	str	r2, [r7, #32]
 800672e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006730:	69f9      	ldr	r1, [r7, #28]
 8006732:	6a3a      	ldr	r2, [r7, #32]
 8006734:	e841 2300 	strex	r3, r2, [r1]
 8006738:	61bb      	str	r3, [r7, #24]
   return(result);
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1e5      	bne.n	800670c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3758      	adds	r7, #88	; 0x58
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	0800686d 	.word	0x0800686d
 8006750:	08006993 	.word	0x08006993
 8006754:	080069d1 	.word	0x080069d1

08006758 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006758:	b480      	push	{r7}
 800675a:	b089      	sub	sp, #36	; 0x24
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	e853 3f00 	ldrex	r3, [r3]
 800676c:	60bb      	str	r3, [r7, #8]
   return(result);
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006774:	61fb      	str	r3, [r7, #28]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	461a      	mov	r2, r3
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	61bb      	str	r3, [r7, #24]
 8006780:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	6979      	ldr	r1, [r7, #20]
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	e841 2300 	strex	r3, r2, [r1]
 800678a:	613b      	str	r3, [r7, #16]
   return(result);
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1e6      	bne.n	8006760 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2220      	movs	r2, #32
 8006796:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006798:	bf00      	nop
 800679a:	3724      	adds	r7, #36	; 0x24
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b095      	sub	sp, #84	; 0x54
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ca:	643b      	str	r3, [r7, #64]	; 0x40
 80067cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e6      	bne.n	80067ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3308      	adds	r3, #8
 80067e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	f023 0301 	bic.w	r3, r3, #1
 80067f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3308      	adds	r3, #8
 80067fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006800:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006802:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1e5      	bne.n	80067de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006816:	2b01      	cmp	r3, #1
 8006818:	d118      	bne.n	800684c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	60bb      	str	r3, [r7, #8]
   return(result);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f023 0310 	bic.w	r3, r3, #16
 800682e:	647b      	str	r3, [r7, #68]	; 0x44
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006838:	61bb      	str	r3, [r7, #24]
 800683a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	6979      	ldr	r1, [r7, #20]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	613b      	str	r3, [r7, #16]
   return(result);
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e6      	bne.n	800681a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2220      	movs	r2, #32
 8006850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006860:	bf00      	nop
 8006862:	3754      	adds	r7, #84	; 0x54
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b09c      	sub	sp, #112	; 0x70
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	2b20      	cmp	r3, #32
 8006880:	d071      	beq.n	8006966 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8006882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006884:	2200      	movs	r2, #0
 8006886:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800688a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006892:	e853 3f00 	ldrex	r3, [r3]
 8006896:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800689a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800689e:	66bb      	str	r3, [r7, #104]	; 0x68
 80068a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	461a      	mov	r2, r3
 80068a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80068aa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068b0:	e841 2300 	strex	r3, r2, [r1]
 80068b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e6      	bne.n	800688a <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3308      	adds	r3, #8
 80068c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c6:	e853 3f00 	ldrex	r3, [r3]
 80068ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ce:	f023 0301 	bic.w	r3, r3, #1
 80068d2:	667b      	str	r3, [r7, #100]	; 0x64
 80068d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3308      	adds	r3, #8
 80068da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80068dc:	647a      	str	r2, [r7, #68]	; 0x44
 80068de:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068e4:	e841 2300 	strex	r3, r2, [r1]
 80068e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1e5      	bne.n	80068bc <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3308      	adds	r3, #8
 80068f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	623b      	str	r3, [r7, #32]
   return(result);
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006906:	663b      	str	r3, [r7, #96]	; 0x60
 8006908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3308      	adds	r3, #8
 800690e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006910:	633a      	str	r2, [r7, #48]	; 0x30
 8006912:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006914:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006918:	e841 2300 	strex	r3, r2, [r1]
 800691c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800691e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1e5      	bne.n	80068f0 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006926:	2220      	movs	r2, #32
 8006928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800692c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800692e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006930:	2b01      	cmp	r3, #1
 8006932:	d118      	bne.n	8006966 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	60fb      	str	r3, [r7, #12]
   return(result);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f023 0310 	bic.w	r3, r3, #16
 8006948:	65fb      	str	r3, [r7, #92]	; 0x5c
 800694a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006952:	61fb      	str	r3, [r7, #28]
 8006954:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	69b9      	ldr	r1, [r7, #24]
 8006958:	69fa      	ldr	r2, [r7, #28]
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	617b      	str	r3, [r7, #20]
   return(result);
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e6      	bne.n	8006934 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006968:	2200      	movs	r2, #0
 800696a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800696c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800696e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006970:	2b01      	cmp	r3, #1
 8006972:	d107      	bne.n	8006984 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006976:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800697a:	4619      	mov	r1, r3
 800697c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800697e:	f7ff fab9 	bl	8005ef4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006982:	e002      	b.n	800698a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006984:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006986:	f7fb f867 	bl	8001a58 <HAL_UART_RxCpltCallback>
}
 800698a:	bf00      	nop
 800698c:	3770      	adds	r7, #112	; 0x70
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b084      	sub	sp, #16
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2201      	movs	r2, #1
 80069a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d109      	bne.n	80069c2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80069b4:	085b      	lsrs	r3, r3, #1
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	4619      	mov	r1, r3
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f7ff fa9a 	bl	8005ef4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069c0:	e002      	b.n	80069c8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f7ff fa82 	bl	8005ecc <HAL_UART_RxHalfCpltCallback>
}
 80069c8:	bf00      	nop
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069e2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f6:	2b80      	cmp	r3, #128	; 0x80
 80069f8:	d109      	bne.n	8006a0e <UART_DMAError+0x3e>
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	2b21      	cmp	r3, #33	; 0x21
 80069fe:	d106      	bne.n	8006a0e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006a08:	6978      	ldr	r0, [r7, #20]
 8006a0a:	f7ff fea5 	bl	8006758 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a18:	2b40      	cmp	r3, #64	; 0x40
 8006a1a:	d109      	bne.n	8006a30 <UART_DMAError+0x60>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b22      	cmp	r3, #34	; 0x22
 8006a20:	d106      	bne.n	8006a30 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006a2a:	6978      	ldr	r0, [r7, #20]
 8006a2c:	f7ff feba 	bl	80067a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a36:	f043 0210 	orr.w	r2, r3, #16
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a40:	6978      	ldr	r0, [r7, #20]
 8006a42:	f7ff fa4d 	bl	8005ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a46:	bf00      	nop
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <__errno>:
 8006a50:	4b01      	ldr	r3, [pc, #4]	; (8006a58 <__errno+0x8>)
 8006a52:	6818      	ldr	r0, [r3, #0]
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	2000000c 	.word	0x2000000c

08006a5c <__libc_init_array>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	4d0d      	ldr	r5, [pc, #52]	; (8006a94 <__libc_init_array+0x38>)
 8006a60:	4c0d      	ldr	r4, [pc, #52]	; (8006a98 <__libc_init_array+0x3c>)
 8006a62:	1b64      	subs	r4, r4, r5
 8006a64:	10a4      	asrs	r4, r4, #2
 8006a66:	2600      	movs	r6, #0
 8006a68:	42a6      	cmp	r6, r4
 8006a6a:	d109      	bne.n	8006a80 <__libc_init_array+0x24>
 8006a6c:	4d0b      	ldr	r5, [pc, #44]	; (8006a9c <__libc_init_array+0x40>)
 8006a6e:	4c0c      	ldr	r4, [pc, #48]	; (8006aa0 <__libc_init_array+0x44>)
 8006a70:	f004 fc92 	bl	800b398 <_init>
 8006a74:	1b64      	subs	r4, r4, r5
 8006a76:	10a4      	asrs	r4, r4, #2
 8006a78:	2600      	movs	r6, #0
 8006a7a:	42a6      	cmp	r6, r4
 8006a7c:	d105      	bne.n	8006a8a <__libc_init_array+0x2e>
 8006a7e:	bd70      	pop	{r4, r5, r6, pc}
 8006a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a84:	4798      	blx	r3
 8006a86:	3601      	adds	r6, #1
 8006a88:	e7ee      	b.n	8006a68 <__libc_init_array+0xc>
 8006a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a8e:	4798      	blx	r3
 8006a90:	3601      	adds	r6, #1
 8006a92:	e7f2      	b.n	8006a7a <__libc_init_array+0x1e>
 8006a94:	0800b90c 	.word	0x0800b90c
 8006a98:	0800b90c 	.word	0x0800b90c
 8006a9c:	0800b90c 	.word	0x0800b90c
 8006aa0:	0800b910 	.word	0x0800b910

08006aa4 <memset>:
 8006aa4:	4402      	add	r2, r0
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d100      	bne.n	8006aae <memset+0xa>
 8006aac:	4770      	bx	lr
 8006aae:	f803 1b01 	strb.w	r1, [r3], #1
 8006ab2:	e7f9      	b.n	8006aa8 <memset+0x4>

08006ab4 <__cvt>:
 8006ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab8:	ec55 4b10 	vmov	r4, r5, d0
 8006abc:	2d00      	cmp	r5, #0
 8006abe:	460e      	mov	r6, r1
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	462b      	mov	r3, r5
 8006ac4:	bfbb      	ittet	lt
 8006ac6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006aca:	461d      	movlt	r5, r3
 8006acc:	2300      	movge	r3, #0
 8006ace:	232d      	movlt	r3, #45	; 0x2d
 8006ad0:	700b      	strb	r3, [r1, #0]
 8006ad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ad4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ad8:	4691      	mov	r9, r2
 8006ada:	f023 0820 	bic.w	r8, r3, #32
 8006ade:	bfbc      	itt	lt
 8006ae0:	4622      	movlt	r2, r4
 8006ae2:	4614      	movlt	r4, r2
 8006ae4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ae8:	d005      	beq.n	8006af6 <__cvt+0x42>
 8006aea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006aee:	d100      	bne.n	8006af2 <__cvt+0x3e>
 8006af0:	3601      	adds	r6, #1
 8006af2:	2102      	movs	r1, #2
 8006af4:	e000      	b.n	8006af8 <__cvt+0x44>
 8006af6:	2103      	movs	r1, #3
 8006af8:	ab03      	add	r3, sp, #12
 8006afa:	9301      	str	r3, [sp, #4]
 8006afc:	ab02      	add	r3, sp, #8
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	ec45 4b10 	vmov	d0, r4, r5
 8006b04:	4653      	mov	r3, sl
 8006b06:	4632      	mov	r2, r6
 8006b08:	f001 fdc2 	bl	8008690 <_dtoa_r>
 8006b0c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006b10:	4607      	mov	r7, r0
 8006b12:	d102      	bne.n	8006b1a <__cvt+0x66>
 8006b14:	f019 0f01 	tst.w	r9, #1
 8006b18:	d022      	beq.n	8006b60 <__cvt+0xac>
 8006b1a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b1e:	eb07 0906 	add.w	r9, r7, r6
 8006b22:	d110      	bne.n	8006b46 <__cvt+0x92>
 8006b24:	783b      	ldrb	r3, [r7, #0]
 8006b26:	2b30      	cmp	r3, #48	; 0x30
 8006b28:	d10a      	bne.n	8006b40 <__cvt+0x8c>
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	4620      	mov	r0, r4
 8006b30:	4629      	mov	r1, r5
 8006b32:	f7f9 ffd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b36:	b918      	cbnz	r0, 8006b40 <__cvt+0x8c>
 8006b38:	f1c6 0601 	rsb	r6, r6, #1
 8006b3c:	f8ca 6000 	str.w	r6, [sl]
 8006b40:	f8da 3000 	ldr.w	r3, [sl]
 8006b44:	4499      	add	r9, r3
 8006b46:	2200      	movs	r2, #0
 8006b48:	2300      	movs	r3, #0
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	4629      	mov	r1, r5
 8006b4e:	f7f9 ffc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b52:	b108      	cbz	r0, 8006b58 <__cvt+0xa4>
 8006b54:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b58:	2230      	movs	r2, #48	; 0x30
 8006b5a:	9b03      	ldr	r3, [sp, #12]
 8006b5c:	454b      	cmp	r3, r9
 8006b5e:	d307      	bcc.n	8006b70 <__cvt+0xbc>
 8006b60:	9b03      	ldr	r3, [sp, #12]
 8006b62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b64:	1bdb      	subs	r3, r3, r7
 8006b66:	4638      	mov	r0, r7
 8006b68:	6013      	str	r3, [r2, #0]
 8006b6a:	b004      	add	sp, #16
 8006b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b70:	1c59      	adds	r1, r3, #1
 8006b72:	9103      	str	r1, [sp, #12]
 8006b74:	701a      	strb	r2, [r3, #0]
 8006b76:	e7f0      	b.n	8006b5a <__cvt+0xa6>

08006b78 <__exponent>:
 8006b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2900      	cmp	r1, #0
 8006b7e:	bfb8      	it	lt
 8006b80:	4249      	neglt	r1, r1
 8006b82:	f803 2b02 	strb.w	r2, [r3], #2
 8006b86:	bfb4      	ite	lt
 8006b88:	222d      	movlt	r2, #45	; 0x2d
 8006b8a:	222b      	movge	r2, #43	; 0x2b
 8006b8c:	2909      	cmp	r1, #9
 8006b8e:	7042      	strb	r2, [r0, #1]
 8006b90:	dd2a      	ble.n	8006be8 <__exponent+0x70>
 8006b92:	f10d 0407 	add.w	r4, sp, #7
 8006b96:	46a4      	mov	ip, r4
 8006b98:	270a      	movs	r7, #10
 8006b9a:	46a6      	mov	lr, r4
 8006b9c:	460a      	mov	r2, r1
 8006b9e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006ba2:	fb07 1516 	mls	r5, r7, r6, r1
 8006ba6:	3530      	adds	r5, #48	; 0x30
 8006ba8:	2a63      	cmp	r2, #99	; 0x63
 8006baa:	f104 34ff 	add.w	r4, r4, #4294967295
 8006bae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006bb2:	4631      	mov	r1, r6
 8006bb4:	dcf1      	bgt.n	8006b9a <__exponent+0x22>
 8006bb6:	3130      	adds	r1, #48	; 0x30
 8006bb8:	f1ae 0502 	sub.w	r5, lr, #2
 8006bbc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006bc0:	1c44      	adds	r4, r0, #1
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	4561      	cmp	r1, ip
 8006bc6:	d30a      	bcc.n	8006bde <__exponent+0x66>
 8006bc8:	f10d 0209 	add.w	r2, sp, #9
 8006bcc:	eba2 020e 	sub.w	r2, r2, lr
 8006bd0:	4565      	cmp	r5, ip
 8006bd2:	bf88      	it	hi
 8006bd4:	2200      	movhi	r2, #0
 8006bd6:	4413      	add	r3, r2
 8006bd8:	1a18      	subs	r0, r3, r0
 8006bda:	b003      	add	sp, #12
 8006bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006be2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006be6:	e7ed      	b.n	8006bc4 <__exponent+0x4c>
 8006be8:	2330      	movs	r3, #48	; 0x30
 8006bea:	3130      	adds	r1, #48	; 0x30
 8006bec:	7083      	strb	r3, [r0, #2]
 8006bee:	70c1      	strb	r1, [r0, #3]
 8006bf0:	1d03      	adds	r3, r0, #4
 8006bf2:	e7f1      	b.n	8006bd8 <__exponent+0x60>

08006bf4 <_printf_float>:
 8006bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf8:	ed2d 8b02 	vpush	{d8}
 8006bfc:	b08d      	sub	sp, #52	; 0x34
 8006bfe:	460c      	mov	r4, r1
 8006c00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006c04:	4616      	mov	r6, r2
 8006c06:	461f      	mov	r7, r3
 8006c08:	4605      	mov	r5, r0
 8006c0a:	f002 fe9f 	bl	800994c <_localeconv_r>
 8006c0e:	f8d0 a000 	ldr.w	sl, [r0]
 8006c12:	4650      	mov	r0, sl
 8006c14:	f7f9 fae4 	bl	80001e0 <strlen>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	930a      	str	r3, [sp, #40]	; 0x28
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	9305      	str	r3, [sp, #20]
 8006c20:	f8d8 3000 	ldr.w	r3, [r8]
 8006c24:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006c28:	3307      	adds	r3, #7
 8006c2a:	f023 0307 	bic.w	r3, r3, #7
 8006c2e:	f103 0208 	add.w	r2, r3, #8
 8006c32:	f8c8 2000 	str.w	r2, [r8]
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006c3e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006c42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c46:	9307      	str	r3, [sp, #28]
 8006c48:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c4c:	ee08 0a10 	vmov	s16, r0
 8006c50:	4b9f      	ldr	r3, [pc, #636]	; (8006ed0 <_printf_float+0x2dc>)
 8006c52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c56:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5a:	f7f9 ff6f 	bl	8000b3c <__aeabi_dcmpun>
 8006c5e:	bb88      	cbnz	r0, 8006cc4 <_printf_float+0xd0>
 8006c60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c64:	4b9a      	ldr	r3, [pc, #616]	; (8006ed0 <_printf_float+0x2dc>)
 8006c66:	f04f 32ff 	mov.w	r2, #4294967295
 8006c6a:	f7f9 ff49 	bl	8000b00 <__aeabi_dcmple>
 8006c6e:	bb48      	cbnz	r0, 8006cc4 <_printf_float+0xd0>
 8006c70:	2200      	movs	r2, #0
 8006c72:	2300      	movs	r3, #0
 8006c74:	4640      	mov	r0, r8
 8006c76:	4649      	mov	r1, r9
 8006c78:	f7f9 ff38 	bl	8000aec <__aeabi_dcmplt>
 8006c7c:	b110      	cbz	r0, 8006c84 <_printf_float+0x90>
 8006c7e:	232d      	movs	r3, #45	; 0x2d
 8006c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c84:	4b93      	ldr	r3, [pc, #588]	; (8006ed4 <_printf_float+0x2e0>)
 8006c86:	4894      	ldr	r0, [pc, #592]	; (8006ed8 <_printf_float+0x2e4>)
 8006c88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c8c:	bf94      	ite	ls
 8006c8e:	4698      	movls	r8, r3
 8006c90:	4680      	movhi	r8, r0
 8006c92:	2303      	movs	r3, #3
 8006c94:	6123      	str	r3, [r4, #16]
 8006c96:	9b05      	ldr	r3, [sp, #20]
 8006c98:	f023 0204 	bic.w	r2, r3, #4
 8006c9c:	6022      	str	r2, [r4, #0]
 8006c9e:	f04f 0900 	mov.w	r9, #0
 8006ca2:	9700      	str	r7, [sp, #0]
 8006ca4:	4633      	mov	r3, r6
 8006ca6:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ca8:	4621      	mov	r1, r4
 8006caa:	4628      	mov	r0, r5
 8006cac:	f000 f9d8 	bl	8007060 <_printf_common>
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	f040 8090 	bne.w	8006dd6 <_printf_float+0x1e2>
 8006cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cba:	b00d      	add	sp, #52	; 0x34
 8006cbc:	ecbd 8b02 	vpop	{d8}
 8006cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc4:	4642      	mov	r2, r8
 8006cc6:	464b      	mov	r3, r9
 8006cc8:	4640      	mov	r0, r8
 8006cca:	4649      	mov	r1, r9
 8006ccc:	f7f9 ff36 	bl	8000b3c <__aeabi_dcmpun>
 8006cd0:	b140      	cbz	r0, 8006ce4 <_printf_float+0xf0>
 8006cd2:	464b      	mov	r3, r9
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	bfbc      	itt	lt
 8006cd8:	232d      	movlt	r3, #45	; 0x2d
 8006cda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006cde:	487f      	ldr	r0, [pc, #508]	; (8006edc <_printf_float+0x2e8>)
 8006ce0:	4b7f      	ldr	r3, [pc, #508]	; (8006ee0 <_printf_float+0x2ec>)
 8006ce2:	e7d1      	b.n	8006c88 <_printf_float+0x94>
 8006ce4:	6863      	ldr	r3, [r4, #4]
 8006ce6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006cea:	9206      	str	r2, [sp, #24]
 8006cec:	1c5a      	adds	r2, r3, #1
 8006cee:	d13f      	bne.n	8006d70 <_printf_float+0x17c>
 8006cf0:	2306      	movs	r3, #6
 8006cf2:	6063      	str	r3, [r4, #4]
 8006cf4:	9b05      	ldr	r3, [sp, #20]
 8006cf6:	6861      	ldr	r1, [r4, #4]
 8006cf8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	9303      	str	r3, [sp, #12]
 8006d00:	ab0a      	add	r3, sp, #40	; 0x28
 8006d02:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006d06:	ab09      	add	r3, sp, #36	; 0x24
 8006d08:	ec49 8b10 	vmov	d0, r8, r9
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	6022      	str	r2, [r4, #0]
 8006d10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006d14:	4628      	mov	r0, r5
 8006d16:	f7ff fecd 	bl	8006ab4 <__cvt>
 8006d1a:	9b06      	ldr	r3, [sp, #24]
 8006d1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d1e:	2b47      	cmp	r3, #71	; 0x47
 8006d20:	4680      	mov	r8, r0
 8006d22:	d108      	bne.n	8006d36 <_printf_float+0x142>
 8006d24:	1cc8      	adds	r0, r1, #3
 8006d26:	db02      	blt.n	8006d2e <_printf_float+0x13a>
 8006d28:	6863      	ldr	r3, [r4, #4]
 8006d2a:	4299      	cmp	r1, r3
 8006d2c:	dd41      	ble.n	8006db2 <_printf_float+0x1be>
 8006d2e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006d32:	fa5f fb8b 	uxtb.w	fp, fp
 8006d36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d3a:	d820      	bhi.n	8006d7e <_printf_float+0x18a>
 8006d3c:	3901      	subs	r1, #1
 8006d3e:	465a      	mov	r2, fp
 8006d40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d44:	9109      	str	r1, [sp, #36]	; 0x24
 8006d46:	f7ff ff17 	bl	8006b78 <__exponent>
 8006d4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d4c:	1813      	adds	r3, r2, r0
 8006d4e:	2a01      	cmp	r2, #1
 8006d50:	4681      	mov	r9, r0
 8006d52:	6123      	str	r3, [r4, #16]
 8006d54:	dc02      	bgt.n	8006d5c <_printf_float+0x168>
 8006d56:	6822      	ldr	r2, [r4, #0]
 8006d58:	07d2      	lsls	r2, r2, #31
 8006d5a:	d501      	bpl.n	8006d60 <_printf_float+0x16c>
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	6123      	str	r3, [r4, #16]
 8006d60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d09c      	beq.n	8006ca2 <_printf_float+0xae>
 8006d68:	232d      	movs	r3, #45	; 0x2d
 8006d6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d6e:	e798      	b.n	8006ca2 <_printf_float+0xae>
 8006d70:	9a06      	ldr	r2, [sp, #24]
 8006d72:	2a47      	cmp	r2, #71	; 0x47
 8006d74:	d1be      	bne.n	8006cf4 <_printf_float+0x100>
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1bc      	bne.n	8006cf4 <_printf_float+0x100>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e7b9      	b.n	8006cf2 <_printf_float+0xfe>
 8006d7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d82:	d118      	bne.n	8006db6 <_printf_float+0x1c2>
 8006d84:	2900      	cmp	r1, #0
 8006d86:	6863      	ldr	r3, [r4, #4]
 8006d88:	dd0b      	ble.n	8006da2 <_printf_float+0x1ae>
 8006d8a:	6121      	str	r1, [r4, #16]
 8006d8c:	b913      	cbnz	r3, 8006d94 <_printf_float+0x1a0>
 8006d8e:	6822      	ldr	r2, [r4, #0]
 8006d90:	07d0      	lsls	r0, r2, #31
 8006d92:	d502      	bpl.n	8006d9a <_printf_float+0x1a6>
 8006d94:	3301      	adds	r3, #1
 8006d96:	440b      	add	r3, r1
 8006d98:	6123      	str	r3, [r4, #16]
 8006d9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d9c:	f04f 0900 	mov.w	r9, #0
 8006da0:	e7de      	b.n	8006d60 <_printf_float+0x16c>
 8006da2:	b913      	cbnz	r3, 8006daa <_printf_float+0x1b6>
 8006da4:	6822      	ldr	r2, [r4, #0]
 8006da6:	07d2      	lsls	r2, r2, #31
 8006da8:	d501      	bpl.n	8006dae <_printf_float+0x1ba>
 8006daa:	3302      	adds	r3, #2
 8006dac:	e7f4      	b.n	8006d98 <_printf_float+0x1a4>
 8006dae:	2301      	movs	r3, #1
 8006db0:	e7f2      	b.n	8006d98 <_printf_float+0x1a4>
 8006db2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006db8:	4299      	cmp	r1, r3
 8006dba:	db05      	blt.n	8006dc8 <_printf_float+0x1d4>
 8006dbc:	6823      	ldr	r3, [r4, #0]
 8006dbe:	6121      	str	r1, [r4, #16]
 8006dc0:	07d8      	lsls	r0, r3, #31
 8006dc2:	d5ea      	bpl.n	8006d9a <_printf_float+0x1a6>
 8006dc4:	1c4b      	adds	r3, r1, #1
 8006dc6:	e7e7      	b.n	8006d98 <_printf_float+0x1a4>
 8006dc8:	2900      	cmp	r1, #0
 8006dca:	bfd4      	ite	le
 8006dcc:	f1c1 0202 	rsble	r2, r1, #2
 8006dd0:	2201      	movgt	r2, #1
 8006dd2:	4413      	add	r3, r2
 8006dd4:	e7e0      	b.n	8006d98 <_printf_float+0x1a4>
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	055a      	lsls	r2, r3, #21
 8006dda:	d407      	bmi.n	8006dec <_printf_float+0x1f8>
 8006ddc:	6923      	ldr	r3, [r4, #16]
 8006dde:	4642      	mov	r2, r8
 8006de0:	4631      	mov	r1, r6
 8006de2:	4628      	mov	r0, r5
 8006de4:	47b8      	blx	r7
 8006de6:	3001      	adds	r0, #1
 8006de8:	d12c      	bne.n	8006e44 <_printf_float+0x250>
 8006dea:	e764      	b.n	8006cb6 <_printf_float+0xc2>
 8006dec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006df0:	f240 80e0 	bls.w	8006fb4 <_printf_float+0x3c0>
 8006df4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006df8:	2200      	movs	r2, #0
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f7f9 fe6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d034      	beq.n	8006e6e <_printf_float+0x27a>
 8006e04:	4a37      	ldr	r2, [pc, #220]	; (8006ee4 <_printf_float+0x2f0>)
 8006e06:	2301      	movs	r3, #1
 8006e08:	4631      	mov	r1, r6
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	47b8      	blx	r7
 8006e0e:	3001      	adds	r0, #1
 8006e10:	f43f af51 	beq.w	8006cb6 <_printf_float+0xc2>
 8006e14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	db02      	blt.n	8006e22 <_printf_float+0x22e>
 8006e1c:	6823      	ldr	r3, [r4, #0]
 8006e1e:	07d8      	lsls	r0, r3, #31
 8006e20:	d510      	bpl.n	8006e44 <_printf_float+0x250>
 8006e22:	ee18 3a10 	vmov	r3, s16
 8006e26:	4652      	mov	r2, sl
 8006e28:	4631      	mov	r1, r6
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	47b8      	blx	r7
 8006e2e:	3001      	adds	r0, #1
 8006e30:	f43f af41 	beq.w	8006cb6 <_printf_float+0xc2>
 8006e34:	f04f 0800 	mov.w	r8, #0
 8006e38:	f104 091a 	add.w	r9, r4, #26
 8006e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	4543      	cmp	r3, r8
 8006e42:	dc09      	bgt.n	8006e58 <_printf_float+0x264>
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	079b      	lsls	r3, r3, #30
 8006e48:	f100 8105 	bmi.w	8007056 <_printf_float+0x462>
 8006e4c:	68e0      	ldr	r0, [r4, #12]
 8006e4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e50:	4298      	cmp	r0, r3
 8006e52:	bfb8      	it	lt
 8006e54:	4618      	movlt	r0, r3
 8006e56:	e730      	b.n	8006cba <_printf_float+0xc6>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	464a      	mov	r2, r9
 8006e5c:	4631      	mov	r1, r6
 8006e5e:	4628      	mov	r0, r5
 8006e60:	47b8      	blx	r7
 8006e62:	3001      	adds	r0, #1
 8006e64:	f43f af27 	beq.w	8006cb6 <_printf_float+0xc2>
 8006e68:	f108 0801 	add.w	r8, r8, #1
 8006e6c:	e7e6      	b.n	8006e3c <_printf_float+0x248>
 8006e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	dc39      	bgt.n	8006ee8 <_printf_float+0x2f4>
 8006e74:	4a1b      	ldr	r2, [pc, #108]	; (8006ee4 <_printf_float+0x2f0>)
 8006e76:	2301      	movs	r3, #1
 8006e78:	4631      	mov	r1, r6
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	47b8      	blx	r7
 8006e7e:	3001      	adds	r0, #1
 8006e80:	f43f af19 	beq.w	8006cb6 <_printf_float+0xc2>
 8006e84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	d102      	bne.n	8006e92 <_printf_float+0x29e>
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	07d9      	lsls	r1, r3, #31
 8006e90:	d5d8      	bpl.n	8006e44 <_printf_float+0x250>
 8006e92:	ee18 3a10 	vmov	r3, s16
 8006e96:	4652      	mov	r2, sl
 8006e98:	4631      	mov	r1, r6
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	47b8      	blx	r7
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	f43f af09 	beq.w	8006cb6 <_printf_float+0xc2>
 8006ea4:	f04f 0900 	mov.w	r9, #0
 8006ea8:	f104 0a1a 	add.w	sl, r4, #26
 8006eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eae:	425b      	negs	r3, r3
 8006eb0:	454b      	cmp	r3, r9
 8006eb2:	dc01      	bgt.n	8006eb8 <_printf_float+0x2c4>
 8006eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb6:	e792      	b.n	8006dde <_printf_float+0x1ea>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	4652      	mov	r2, sl
 8006ebc:	4631      	mov	r1, r6
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	47b8      	blx	r7
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	f43f aef7 	beq.w	8006cb6 <_printf_float+0xc2>
 8006ec8:	f109 0901 	add.w	r9, r9, #1
 8006ecc:	e7ee      	b.n	8006eac <_printf_float+0x2b8>
 8006ece:	bf00      	nop
 8006ed0:	7fefffff 	.word	0x7fefffff
 8006ed4:	0800b468 	.word	0x0800b468
 8006ed8:	0800b46c 	.word	0x0800b46c
 8006edc:	0800b474 	.word	0x0800b474
 8006ee0:	0800b470 	.word	0x0800b470
 8006ee4:	0800b478 	.word	0x0800b478
 8006ee8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006eec:	429a      	cmp	r2, r3
 8006eee:	bfa8      	it	ge
 8006ef0:	461a      	movge	r2, r3
 8006ef2:	2a00      	cmp	r2, #0
 8006ef4:	4691      	mov	r9, r2
 8006ef6:	dc37      	bgt.n	8006f68 <_printf_float+0x374>
 8006ef8:	f04f 0b00 	mov.w	fp, #0
 8006efc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f00:	f104 021a 	add.w	r2, r4, #26
 8006f04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f06:	9305      	str	r3, [sp, #20]
 8006f08:	eba3 0309 	sub.w	r3, r3, r9
 8006f0c:	455b      	cmp	r3, fp
 8006f0e:	dc33      	bgt.n	8006f78 <_printf_float+0x384>
 8006f10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f14:	429a      	cmp	r2, r3
 8006f16:	db3b      	blt.n	8006f90 <_printf_float+0x39c>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	07da      	lsls	r2, r3, #31
 8006f1c:	d438      	bmi.n	8006f90 <_printf_float+0x39c>
 8006f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f20:	9a05      	ldr	r2, [sp, #20]
 8006f22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f24:	1a9a      	subs	r2, r3, r2
 8006f26:	eba3 0901 	sub.w	r9, r3, r1
 8006f2a:	4591      	cmp	r9, r2
 8006f2c:	bfa8      	it	ge
 8006f2e:	4691      	movge	r9, r2
 8006f30:	f1b9 0f00 	cmp.w	r9, #0
 8006f34:	dc35      	bgt.n	8006fa2 <_printf_float+0x3ae>
 8006f36:	f04f 0800 	mov.w	r8, #0
 8006f3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f3e:	f104 0a1a 	add.w	sl, r4, #26
 8006f42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f46:	1a9b      	subs	r3, r3, r2
 8006f48:	eba3 0309 	sub.w	r3, r3, r9
 8006f4c:	4543      	cmp	r3, r8
 8006f4e:	f77f af79 	ble.w	8006e44 <_printf_float+0x250>
 8006f52:	2301      	movs	r3, #1
 8006f54:	4652      	mov	r2, sl
 8006f56:	4631      	mov	r1, r6
 8006f58:	4628      	mov	r0, r5
 8006f5a:	47b8      	blx	r7
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	f43f aeaa 	beq.w	8006cb6 <_printf_float+0xc2>
 8006f62:	f108 0801 	add.w	r8, r8, #1
 8006f66:	e7ec      	b.n	8006f42 <_printf_float+0x34e>
 8006f68:	4613      	mov	r3, r2
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	4642      	mov	r2, r8
 8006f6e:	4628      	mov	r0, r5
 8006f70:	47b8      	blx	r7
 8006f72:	3001      	adds	r0, #1
 8006f74:	d1c0      	bne.n	8006ef8 <_printf_float+0x304>
 8006f76:	e69e      	b.n	8006cb6 <_printf_float+0xc2>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	9205      	str	r2, [sp, #20]
 8006f80:	47b8      	blx	r7
 8006f82:	3001      	adds	r0, #1
 8006f84:	f43f ae97 	beq.w	8006cb6 <_printf_float+0xc2>
 8006f88:	9a05      	ldr	r2, [sp, #20]
 8006f8a:	f10b 0b01 	add.w	fp, fp, #1
 8006f8e:	e7b9      	b.n	8006f04 <_printf_float+0x310>
 8006f90:	ee18 3a10 	vmov	r3, s16
 8006f94:	4652      	mov	r2, sl
 8006f96:	4631      	mov	r1, r6
 8006f98:	4628      	mov	r0, r5
 8006f9a:	47b8      	blx	r7
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	d1be      	bne.n	8006f1e <_printf_float+0x32a>
 8006fa0:	e689      	b.n	8006cb6 <_printf_float+0xc2>
 8006fa2:	9a05      	ldr	r2, [sp, #20]
 8006fa4:	464b      	mov	r3, r9
 8006fa6:	4442      	add	r2, r8
 8006fa8:	4631      	mov	r1, r6
 8006faa:	4628      	mov	r0, r5
 8006fac:	47b8      	blx	r7
 8006fae:	3001      	adds	r0, #1
 8006fb0:	d1c1      	bne.n	8006f36 <_printf_float+0x342>
 8006fb2:	e680      	b.n	8006cb6 <_printf_float+0xc2>
 8006fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fb6:	2a01      	cmp	r2, #1
 8006fb8:	dc01      	bgt.n	8006fbe <_printf_float+0x3ca>
 8006fba:	07db      	lsls	r3, r3, #31
 8006fbc:	d538      	bpl.n	8007030 <_printf_float+0x43c>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	4642      	mov	r2, r8
 8006fc2:	4631      	mov	r1, r6
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	47b8      	blx	r7
 8006fc8:	3001      	adds	r0, #1
 8006fca:	f43f ae74 	beq.w	8006cb6 <_printf_float+0xc2>
 8006fce:	ee18 3a10 	vmov	r3, s16
 8006fd2:	4652      	mov	r2, sl
 8006fd4:	4631      	mov	r1, r6
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	47b8      	blx	r7
 8006fda:	3001      	adds	r0, #1
 8006fdc:	f43f ae6b 	beq.w	8006cb6 <_printf_float+0xc2>
 8006fe0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f7f9 fd76 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fec:	b9d8      	cbnz	r0, 8007026 <_printf_float+0x432>
 8006fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ff0:	f108 0201 	add.w	r2, r8, #1
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	4631      	mov	r1, r6
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	47b8      	blx	r7
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	d10e      	bne.n	800701e <_printf_float+0x42a>
 8007000:	e659      	b.n	8006cb6 <_printf_float+0xc2>
 8007002:	2301      	movs	r3, #1
 8007004:	4652      	mov	r2, sl
 8007006:	4631      	mov	r1, r6
 8007008:	4628      	mov	r0, r5
 800700a:	47b8      	blx	r7
 800700c:	3001      	adds	r0, #1
 800700e:	f43f ae52 	beq.w	8006cb6 <_printf_float+0xc2>
 8007012:	f108 0801 	add.w	r8, r8, #1
 8007016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007018:	3b01      	subs	r3, #1
 800701a:	4543      	cmp	r3, r8
 800701c:	dcf1      	bgt.n	8007002 <_printf_float+0x40e>
 800701e:	464b      	mov	r3, r9
 8007020:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007024:	e6dc      	b.n	8006de0 <_printf_float+0x1ec>
 8007026:	f04f 0800 	mov.w	r8, #0
 800702a:	f104 0a1a 	add.w	sl, r4, #26
 800702e:	e7f2      	b.n	8007016 <_printf_float+0x422>
 8007030:	2301      	movs	r3, #1
 8007032:	4642      	mov	r2, r8
 8007034:	e7df      	b.n	8006ff6 <_printf_float+0x402>
 8007036:	2301      	movs	r3, #1
 8007038:	464a      	mov	r2, r9
 800703a:	4631      	mov	r1, r6
 800703c:	4628      	mov	r0, r5
 800703e:	47b8      	blx	r7
 8007040:	3001      	adds	r0, #1
 8007042:	f43f ae38 	beq.w	8006cb6 <_printf_float+0xc2>
 8007046:	f108 0801 	add.w	r8, r8, #1
 800704a:	68e3      	ldr	r3, [r4, #12]
 800704c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800704e:	1a5b      	subs	r3, r3, r1
 8007050:	4543      	cmp	r3, r8
 8007052:	dcf0      	bgt.n	8007036 <_printf_float+0x442>
 8007054:	e6fa      	b.n	8006e4c <_printf_float+0x258>
 8007056:	f04f 0800 	mov.w	r8, #0
 800705a:	f104 0919 	add.w	r9, r4, #25
 800705e:	e7f4      	b.n	800704a <_printf_float+0x456>

08007060 <_printf_common>:
 8007060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007064:	4616      	mov	r6, r2
 8007066:	4699      	mov	r9, r3
 8007068:	688a      	ldr	r2, [r1, #8]
 800706a:	690b      	ldr	r3, [r1, #16]
 800706c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007070:	4293      	cmp	r3, r2
 8007072:	bfb8      	it	lt
 8007074:	4613      	movlt	r3, r2
 8007076:	6033      	str	r3, [r6, #0]
 8007078:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800707c:	4607      	mov	r7, r0
 800707e:	460c      	mov	r4, r1
 8007080:	b10a      	cbz	r2, 8007086 <_printf_common+0x26>
 8007082:	3301      	adds	r3, #1
 8007084:	6033      	str	r3, [r6, #0]
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	0699      	lsls	r1, r3, #26
 800708a:	bf42      	ittt	mi
 800708c:	6833      	ldrmi	r3, [r6, #0]
 800708e:	3302      	addmi	r3, #2
 8007090:	6033      	strmi	r3, [r6, #0]
 8007092:	6825      	ldr	r5, [r4, #0]
 8007094:	f015 0506 	ands.w	r5, r5, #6
 8007098:	d106      	bne.n	80070a8 <_printf_common+0x48>
 800709a:	f104 0a19 	add.w	sl, r4, #25
 800709e:	68e3      	ldr	r3, [r4, #12]
 80070a0:	6832      	ldr	r2, [r6, #0]
 80070a2:	1a9b      	subs	r3, r3, r2
 80070a4:	42ab      	cmp	r3, r5
 80070a6:	dc26      	bgt.n	80070f6 <_printf_common+0x96>
 80070a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070ac:	1e13      	subs	r3, r2, #0
 80070ae:	6822      	ldr	r2, [r4, #0]
 80070b0:	bf18      	it	ne
 80070b2:	2301      	movne	r3, #1
 80070b4:	0692      	lsls	r2, r2, #26
 80070b6:	d42b      	bmi.n	8007110 <_printf_common+0xb0>
 80070b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070bc:	4649      	mov	r1, r9
 80070be:	4638      	mov	r0, r7
 80070c0:	47c0      	blx	r8
 80070c2:	3001      	adds	r0, #1
 80070c4:	d01e      	beq.n	8007104 <_printf_common+0xa4>
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	68e5      	ldr	r5, [r4, #12]
 80070ca:	6832      	ldr	r2, [r6, #0]
 80070cc:	f003 0306 	and.w	r3, r3, #6
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	bf08      	it	eq
 80070d4:	1aad      	subeq	r5, r5, r2
 80070d6:	68a3      	ldr	r3, [r4, #8]
 80070d8:	6922      	ldr	r2, [r4, #16]
 80070da:	bf0c      	ite	eq
 80070dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070e0:	2500      	movne	r5, #0
 80070e2:	4293      	cmp	r3, r2
 80070e4:	bfc4      	itt	gt
 80070e6:	1a9b      	subgt	r3, r3, r2
 80070e8:	18ed      	addgt	r5, r5, r3
 80070ea:	2600      	movs	r6, #0
 80070ec:	341a      	adds	r4, #26
 80070ee:	42b5      	cmp	r5, r6
 80070f0:	d11a      	bne.n	8007128 <_printf_common+0xc8>
 80070f2:	2000      	movs	r0, #0
 80070f4:	e008      	b.n	8007108 <_printf_common+0xa8>
 80070f6:	2301      	movs	r3, #1
 80070f8:	4652      	mov	r2, sl
 80070fa:	4649      	mov	r1, r9
 80070fc:	4638      	mov	r0, r7
 80070fe:	47c0      	blx	r8
 8007100:	3001      	adds	r0, #1
 8007102:	d103      	bne.n	800710c <_printf_common+0xac>
 8007104:	f04f 30ff 	mov.w	r0, #4294967295
 8007108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800710c:	3501      	adds	r5, #1
 800710e:	e7c6      	b.n	800709e <_printf_common+0x3e>
 8007110:	18e1      	adds	r1, r4, r3
 8007112:	1c5a      	adds	r2, r3, #1
 8007114:	2030      	movs	r0, #48	; 0x30
 8007116:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800711a:	4422      	add	r2, r4
 800711c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007120:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007124:	3302      	adds	r3, #2
 8007126:	e7c7      	b.n	80070b8 <_printf_common+0x58>
 8007128:	2301      	movs	r3, #1
 800712a:	4622      	mov	r2, r4
 800712c:	4649      	mov	r1, r9
 800712e:	4638      	mov	r0, r7
 8007130:	47c0      	blx	r8
 8007132:	3001      	adds	r0, #1
 8007134:	d0e6      	beq.n	8007104 <_printf_common+0xa4>
 8007136:	3601      	adds	r6, #1
 8007138:	e7d9      	b.n	80070ee <_printf_common+0x8e>
	...

0800713c <_printf_i>:
 800713c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007140:	7e0f      	ldrb	r7, [r1, #24]
 8007142:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007144:	2f78      	cmp	r7, #120	; 0x78
 8007146:	4691      	mov	r9, r2
 8007148:	4680      	mov	r8, r0
 800714a:	460c      	mov	r4, r1
 800714c:	469a      	mov	sl, r3
 800714e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007152:	d807      	bhi.n	8007164 <_printf_i+0x28>
 8007154:	2f62      	cmp	r7, #98	; 0x62
 8007156:	d80a      	bhi.n	800716e <_printf_i+0x32>
 8007158:	2f00      	cmp	r7, #0
 800715a:	f000 80d8 	beq.w	800730e <_printf_i+0x1d2>
 800715e:	2f58      	cmp	r7, #88	; 0x58
 8007160:	f000 80a3 	beq.w	80072aa <_printf_i+0x16e>
 8007164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007168:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800716c:	e03a      	b.n	80071e4 <_printf_i+0xa8>
 800716e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007172:	2b15      	cmp	r3, #21
 8007174:	d8f6      	bhi.n	8007164 <_printf_i+0x28>
 8007176:	a101      	add	r1, pc, #4	; (adr r1, 800717c <_printf_i+0x40>)
 8007178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800717c:	080071d5 	.word	0x080071d5
 8007180:	080071e9 	.word	0x080071e9
 8007184:	08007165 	.word	0x08007165
 8007188:	08007165 	.word	0x08007165
 800718c:	08007165 	.word	0x08007165
 8007190:	08007165 	.word	0x08007165
 8007194:	080071e9 	.word	0x080071e9
 8007198:	08007165 	.word	0x08007165
 800719c:	08007165 	.word	0x08007165
 80071a0:	08007165 	.word	0x08007165
 80071a4:	08007165 	.word	0x08007165
 80071a8:	080072f5 	.word	0x080072f5
 80071ac:	08007219 	.word	0x08007219
 80071b0:	080072d7 	.word	0x080072d7
 80071b4:	08007165 	.word	0x08007165
 80071b8:	08007165 	.word	0x08007165
 80071bc:	08007317 	.word	0x08007317
 80071c0:	08007165 	.word	0x08007165
 80071c4:	08007219 	.word	0x08007219
 80071c8:	08007165 	.word	0x08007165
 80071cc:	08007165 	.word	0x08007165
 80071d0:	080072df 	.word	0x080072df
 80071d4:	682b      	ldr	r3, [r5, #0]
 80071d6:	1d1a      	adds	r2, r3, #4
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	602a      	str	r2, [r5, #0]
 80071dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071e4:	2301      	movs	r3, #1
 80071e6:	e0a3      	b.n	8007330 <_printf_i+0x1f4>
 80071e8:	6820      	ldr	r0, [r4, #0]
 80071ea:	6829      	ldr	r1, [r5, #0]
 80071ec:	0606      	lsls	r6, r0, #24
 80071ee:	f101 0304 	add.w	r3, r1, #4
 80071f2:	d50a      	bpl.n	800720a <_printf_i+0xce>
 80071f4:	680e      	ldr	r6, [r1, #0]
 80071f6:	602b      	str	r3, [r5, #0]
 80071f8:	2e00      	cmp	r6, #0
 80071fa:	da03      	bge.n	8007204 <_printf_i+0xc8>
 80071fc:	232d      	movs	r3, #45	; 0x2d
 80071fe:	4276      	negs	r6, r6
 8007200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007204:	485e      	ldr	r0, [pc, #376]	; (8007380 <_printf_i+0x244>)
 8007206:	230a      	movs	r3, #10
 8007208:	e019      	b.n	800723e <_printf_i+0x102>
 800720a:	680e      	ldr	r6, [r1, #0]
 800720c:	602b      	str	r3, [r5, #0]
 800720e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007212:	bf18      	it	ne
 8007214:	b236      	sxthne	r6, r6
 8007216:	e7ef      	b.n	80071f8 <_printf_i+0xbc>
 8007218:	682b      	ldr	r3, [r5, #0]
 800721a:	6820      	ldr	r0, [r4, #0]
 800721c:	1d19      	adds	r1, r3, #4
 800721e:	6029      	str	r1, [r5, #0]
 8007220:	0601      	lsls	r1, r0, #24
 8007222:	d501      	bpl.n	8007228 <_printf_i+0xec>
 8007224:	681e      	ldr	r6, [r3, #0]
 8007226:	e002      	b.n	800722e <_printf_i+0xf2>
 8007228:	0646      	lsls	r6, r0, #25
 800722a:	d5fb      	bpl.n	8007224 <_printf_i+0xe8>
 800722c:	881e      	ldrh	r6, [r3, #0]
 800722e:	4854      	ldr	r0, [pc, #336]	; (8007380 <_printf_i+0x244>)
 8007230:	2f6f      	cmp	r7, #111	; 0x6f
 8007232:	bf0c      	ite	eq
 8007234:	2308      	moveq	r3, #8
 8007236:	230a      	movne	r3, #10
 8007238:	2100      	movs	r1, #0
 800723a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800723e:	6865      	ldr	r5, [r4, #4]
 8007240:	60a5      	str	r5, [r4, #8]
 8007242:	2d00      	cmp	r5, #0
 8007244:	bfa2      	ittt	ge
 8007246:	6821      	ldrge	r1, [r4, #0]
 8007248:	f021 0104 	bicge.w	r1, r1, #4
 800724c:	6021      	strge	r1, [r4, #0]
 800724e:	b90e      	cbnz	r6, 8007254 <_printf_i+0x118>
 8007250:	2d00      	cmp	r5, #0
 8007252:	d04d      	beq.n	80072f0 <_printf_i+0x1b4>
 8007254:	4615      	mov	r5, r2
 8007256:	fbb6 f1f3 	udiv	r1, r6, r3
 800725a:	fb03 6711 	mls	r7, r3, r1, r6
 800725e:	5dc7      	ldrb	r7, [r0, r7]
 8007260:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007264:	4637      	mov	r7, r6
 8007266:	42bb      	cmp	r3, r7
 8007268:	460e      	mov	r6, r1
 800726a:	d9f4      	bls.n	8007256 <_printf_i+0x11a>
 800726c:	2b08      	cmp	r3, #8
 800726e:	d10b      	bne.n	8007288 <_printf_i+0x14c>
 8007270:	6823      	ldr	r3, [r4, #0]
 8007272:	07de      	lsls	r6, r3, #31
 8007274:	d508      	bpl.n	8007288 <_printf_i+0x14c>
 8007276:	6923      	ldr	r3, [r4, #16]
 8007278:	6861      	ldr	r1, [r4, #4]
 800727a:	4299      	cmp	r1, r3
 800727c:	bfde      	ittt	le
 800727e:	2330      	movle	r3, #48	; 0x30
 8007280:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007284:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007288:	1b52      	subs	r2, r2, r5
 800728a:	6122      	str	r2, [r4, #16]
 800728c:	f8cd a000 	str.w	sl, [sp]
 8007290:	464b      	mov	r3, r9
 8007292:	aa03      	add	r2, sp, #12
 8007294:	4621      	mov	r1, r4
 8007296:	4640      	mov	r0, r8
 8007298:	f7ff fee2 	bl	8007060 <_printf_common>
 800729c:	3001      	adds	r0, #1
 800729e:	d14c      	bne.n	800733a <_printf_i+0x1fe>
 80072a0:	f04f 30ff 	mov.w	r0, #4294967295
 80072a4:	b004      	add	sp, #16
 80072a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072aa:	4835      	ldr	r0, [pc, #212]	; (8007380 <_printf_i+0x244>)
 80072ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072b0:	6829      	ldr	r1, [r5, #0]
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80072b8:	6029      	str	r1, [r5, #0]
 80072ba:	061d      	lsls	r5, r3, #24
 80072bc:	d514      	bpl.n	80072e8 <_printf_i+0x1ac>
 80072be:	07df      	lsls	r7, r3, #31
 80072c0:	bf44      	itt	mi
 80072c2:	f043 0320 	orrmi.w	r3, r3, #32
 80072c6:	6023      	strmi	r3, [r4, #0]
 80072c8:	b91e      	cbnz	r6, 80072d2 <_printf_i+0x196>
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	f023 0320 	bic.w	r3, r3, #32
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	2310      	movs	r3, #16
 80072d4:	e7b0      	b.n	8007238 <_printf_i+0xfc>
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	f043 0320 	orr.w	r3, r3, #32
 80072dc:	6023      	str	r3, [r4, #0]
 80072de:	2378      	movs	r3, #120	; 0x78
 80072e0:	4828      	ldr	r0, [pc, #160]	; (8007384 <_printf_i+0x248>)
 80072e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072e6:	e7e3      	b.n	80072b0 <_printf_i+0x174>
 80072e8:	0659      	lsls	r1, r3, #25
 80072ea:	bf48      	it	mi
 80072ec:	b2b6      	uxthmi	r6, r6
 80072ee:	e7e6      	b.n	80072be <_printf_i+0x182>
 80072f0:	4615      	mov	r5, r2
 80072f2:	e7bb      	b.n	800726c <_printf_i+0x130>
 80072f4:	682b      	ldr	r3, [r5, #0]
 80072f6:	6826      	ldr	r6, [r4, #0]
 80072f8:	6961      	ldr	r1, [r4, #20]
 80072fa:	1d18      	adds	r0, r3, #4
 80072fc:	6028      	str	r0, [r5, #0]
 80072fe:	0635      	lsls	r5, r6, #24
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	d501      	bpl.n	8007308 <_printf_i+0x1cc>
 8007304:	6019      	str	r1, [r3, #0]
 8007306:	e002      	b.n	800730e <_printf_i+0x1d2>
 8007308:	0670      	lsls	r0, r6, #25
 800730a:	d5fb      	bpl.n	8007304 <_printf_i+0x1c8>
 800730c:	8019      	strh	r1, [r3, #0]
 800730e:	2300      	movs	r3, #0
 8007310:	6123      	str	r3, [r4, #16]
 8007312:	4615      	mov	r5, r2
 8007314:	e7ba      	b.n	800728c <_printf_i+0x150>
 8007316:	682b      	ldr	r3, [r5, #0]
 8007318:	1d1a      	adds	r2, r3, #4
 800731a:	602a      	str	r2, [r5, #0]
 800731c:	681d      	ldr	r5, [r3, #0]
 800731e:	6862      	ldr	r2, [r4, #4]
 8007320:	2100      	movs	r1, #0
 8007322:	4628      	mov	r0, r5
 8007324:	f7f8 ff64 	bl	80001f0 <memchr>
 8007328:	b108      	cbz	r0, 800732e <_printf_i+0x1f2>
 800732a:	1b40      	subs	r0, r0, r5
 800732c:	6060      	str	r0, [r4, #4]
 800732e:	6863      	ldr	r3, [r4, #4]
 8007330:	6123      	str	r3, [r4, #16]
 8007332:	2300      	movs	r3, #0
 8007334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007338:	e7a8      	b.n	800728c <_printf_i+0x150>
 800733a:	6923      	ldr	r3, [r4, #16]
 800733c:	462a      	mov	r2, r5
 800733e:	4649      	mov	r1, r9
 8007340:	4640      	mov	r0, r8
 8007342:	47d0      	blx	sl
 8007344:	3001      	adds	r0, #1
 8007346:	d0ab      	beq.n	80072a0 <_printf_i+0x164>
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	079b      	lsls	r3, r3, #30
 800734c:	d413      	bmi.n	8007376 <_printf_i+0x23a>
 800734e:	68e0      	ldr	r0, [r4, #12]
 8007350:	9b03      	ldr	r3, [sp, #12]
 8007352:	4298      	cmp	r0, r3
 8007354:	bfb8      	it	lt
 8007356:	4618      	movlt	r0, r3
 8007358:	e7a4      	b.n	80072a4 <_printf_i+0x168>
 800735a:	2301      	movs	r3, #1
 800735c:	4632      	mov	r2, r6
 800735e:	4649      	mov	r1, r9
 8007360:	4640      	mov	r0, r8
 8007362:	47d0      	blx	sl
 8007364:	3001      	adds	r0, #1
 8007366:	d09b      	beq.n	80072a0 <_printf_i+0x164>
 8007368:	3501      	adds	r5, #1
 800736a:	68e3      	ldr	r3, [r4, #12]
 800736c:	9903      	ldr	r1, [sp, #12]
 800736e:	1a5b      	subs	r3, r3, r1
 8007370:	42ab      	cmp	r3, r5
 8007372:	dcf2      	bgt.n	800735a <_printf_i+0x21e>
 8007374:	e7eb      	b.n	800734e <_printf_i+0x212>
 8007376:	2500      	movs	r5, #0
 8007378:	f104 0619 	add.w	r6, r4, #25
 800737c:	e7f5      	b.n	800736a <_printf_i+0x22e>
 800737e:	bf00      	nop
 8007380:	0800b47a 	.word	0x0800b47a
 8007384:	0800b48b 	.word	0x0800b48b

08007388 <_scanf_float>:
 8007388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738c:	b087      	sub	sp, #28
 800738e:	4617      	mov	r7, r2
 8007390:	9303      	str	r3, [sp, #12]
 8007392:	688b      	ldr	r3, [r1, #8]
 8007394:	1e5a      	subs	r2, r3, #1
 8007396:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800739a:	bf83      	ittte	hi
 800739c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80073a0:	195b      	addhi	r3, r3, r5
 80073a2:	9302      	strhi	r3, [sp, #8]
 80073a4:	2300      	movls	r3, #0
 80073a6:	bf86      	itte	hi
 80073a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80073ac:	608b      	strhi	r3, [r1, #8]
 80073ae:	9302      	strls	r3, [sp, #8]
 80073b0:	680b      	ldr	r3, [r1, #0]
 80073b2:	468b      	mov	fp, r1
 80073b4:	2500      	movs	r5, #0
 80073b6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80073ba:	f84b 3b1c 	str.w	r3, [fp], #28
 80073be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80073c2:	4680      	mov	r8, r0
 80073c4:	460c      	mov	r4, r1
 80073c6:	465e      	mov	r6, fp
 80073c8:	46aa      	mov	sl, r5
 80073ca:	46a9      	mov	r9, r5
 80073cc:	9501      	str	r5, [sp, #4]
 80073ce:	68a2      	ldr	r2, [r4, #8]
 80073d0:	b152      	cbz	r2, 80073e8 <_scanf_float+0x60>
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b4e      	cmp	r3, #78	; 0x4e
 80073d8:	d864      	bhi.n	80074a4 <_scanf_float+0x11c>
 80073da:	2b40      	cmp	r3, #64	; 0x40
 80073dc:	d83c      	bhi.n	8007458 <_scanf_float+0xd0>
 80073de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80073e2:	b2c8      	uxtb	r0, r1
 80073e4:	280e      	cmp	r0, #14
 80073e6:	d93a      	bls.n	800745e <_scanf_float+0xd6>
 80073e8:	f1b9 0f00 	cmp.w	r9, #0
 80073ec:	d003      	beq.n	80073f6 <_scanf_float+0x6e>
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073f4:	6023      	str	r3, [r4, #0]
 80073f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073fa:	f1ba 0f01 	cmp.w	sl, #1
 80073fe:	f200 8113 	bhi.w	8007628 <_scanf_float+0x2a0>
 8007402:	455e      	cmp	r6, fp
 8007404:	f200 8105 	bhi.w	8007612 <_scanf_float+0x28a>
 8007408:	2501      	movs	r5, #1
 800740a:	4628      	mov	r0, r5
 800740c:	b007      	add	sp, #28
 800740e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007412:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007416:	2a0d      	cmp	r2, #13
 8007418:	d8e6      	bhi.n	80073e8 <_scanf_float+0x60>
 800741a:	a101      	add	r1, pc, #4	; (adr r1, 8007420 <_scanf_float+0x98>)
 800741c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007420:	0800755f 	.word	0x0800755f
 8007424:	080073e9 	.word	0x080073e9
 8007428:	080073e9 	.word	0x080073e9
 800742c:	080073e9 	.word	0x080073e9
 8007430:	080075bf 	.word	0x080075bf
 8007434:	08007597 	.word	0x08007597
 8007438:	080073e9 	.word	0x080073e9
 800743c:	080073e9 	.word	0x080073e9
 8007440:	0800756d 	.word	0x0800756d
 8007444:	080073e9 	.word	0x080073e9
 8007448:	080073e9 	.word	0x080073e9
 800744c:	080073e9 	.word	0x080073e9
 8007450:	080073e9 	.word	0x080073e9
 8007454:	08007525 	.word	0x08007525
 8007458:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800745c:	e7db      	b.n	8007416 <_scanf_float+0x8e>
 800745e:	290e      	cmp	r1, #14
 8007460:	d8c2      	bhi.n	80073e8 <_scanf_float+0x60>
 8007462:	a001      	add	r0, pc, #4	; (adr r0, 8007468 <_scanf_float+0xe0>)
 8007464:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007468:	08007517 	.word	0x08007517
 800746c:	080073e9 	.word	0x080073e9
 8007470:	08007517 	.word	0x08007517
 8007474:	080075ab 	.word	0x080075ab
 8007478:	080073e9 	.word	0x080073e9
 800747c:	080074c5 	.word	0x080074c5
 8007480:	08007501 	.word	0x08007501
 8007484:	08007501 	.word	0x08007501
 8007488:	08007501 	.word	0x08007501
 800748c:	08007501 	.word	0x08007501
 8007490:	08007501 	.word	0x08007501
 8007494:	08007501 	.word	0x08007501
 8007498:	08007501 	.word	0x08007501
 800749c:	08007501 	.word	0x08007501
 80074a0:	08007501 	.word	0x08007501
 80074a4:	2b6e      	cmp	r3, #110	; 0x6e
 80074a6:	d809      	bhi.n	80074bc <_scanf_float+0x134>
 80074a8:	2b60      	cmp	r3, #96	; 0x60
 80074aa:	d8b2      	bhi.n	8007412 <_scanf_float+0x8a>
 80074ac:	2b54      	cmp	r3, #84	; 0x54
 80074ae:	d077      	beq.n	80075a0 <_scanf_float+0x218>
 80074b0:	2b59      	cmp	r3, #89	; 0x59
 80074b2:	d199      	bne.n	80073e8 <_scanf_float+0x60>
 80074b4:	2d07      	cmp	r5, #7
 80074b6:	d197      	bne.n	80073e8 <_scanf_float+0x60>
 80074b8:	2508      	movs	r5, #8
 80074ba:	e029      	b.n	8007510 <_scanf_float+0x188>
 80074bc:	2b74      	cmp	r3, #116	; 0x74
 80074be:	d06f      	beq.n	80075a0 <_scanf_float+0x218>
 80074c0:	2b79      	cmp	r3, #121	; 0x79
 80074c2:	e7f6      	b.n	80074b2 <_scanf_float+0x12a>
 80074c4:	6821      	ldr	r1, [r4, #0]
 80074c6:	05c8      	lsls	r0, r1, #23
 80074c8:	d51a      	bpl.n	8007500 <_scanf_float+0x178>
 80074ca:	9b02      	ldr	r3, [sp, #8]
 80074cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80074d0:	6021      	str	r1, [r4, #0]
 80074d2:	f109 0901 	add.w	r9, r9, #1
 80074d6:	b11b      	cbz	r3, 80074e0 <_scanf_float+0x158>
 80074d8:	3b01      	subs	r3, #1
 80074da:	3201      	adds	r2, #1
 80074dc:	9302      	str	r3, [sp, #8]
 80074de:	60a2      	str	r2, [r4, #8]
 80074e0:	68a3      	ldr	r3, [r4, #8]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	60a3      	str	r3, [r4, #8]
 80074e6:	6923      	ldr	r3, [r4, #16]
 80074e8:	3301      	adds	r3, #1
 80074ea:	6123      	str	r3, [r4, #16]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	3b01      	subs	r3, #1
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	607b      	str	r3, [r7, #4]
 80074f4:	f340 8084 	ble.w	8007600 <_scanf_float+0x278>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	3301      	adds	r3, #1
 80074fc:	603b      	str	r3, [r7, #0]
 80074fe:	e766      	b.n	80073ce <_scanf_float+0x46>
 8007500:	eb1a 0f05 	cmn.w	sl, r5
 8007504:	f47f af70 	bne.w	80073e8 <_scanf_float+0x60>
 8007508:	6822      	ldr	r2, [r4, #0]
 800750a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800750e:	6022      	str	r2, [r4, #0]
 8007510:	f806 3b01 	strb.w	r3, [r6], #1
 8007514:	e7e4      	b.n	80074e0 <_scanf_float+0x158>
 8007516:	6822      	ldr	r2, [r4, #0]
 8007518:	0610      	lsls	r0, r2, #24
 800751a:	f57f af65 	bpl.w	80073e8 <_scanf_float+0x60>
 800751e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007522:	e7f4      	b.n	800750e <_scanf_float+0x186>
 8007524:	f1ba 0f00 	cmp.w	sl, #0
 8007528:	d10e      	bne.n	8007548 <_scanf_float+0x1c0>
 800752a:	f1b9 0f00 	cmp.w	r9, #0
 800752e:	d10e      	bne.n	800754e <_scanf_float+0x1c6>
 8007530:	6822      	ldr	r2, [r4, #0]
 8007532:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007536:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800753a:	d108      	bne.n	800754e <_scanf_float+0x1c6>
 800753c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007540:	6022      	str	r2, [r4, #0]
 8007542:	f04f 0a01 	mov.w	sl, #1
 8007546:	e7e3      	b.n	8007510 <_scanf_float+0x188>
 8007548:	f1ba 0f02 	cmp.w	sl, #2
 800754c:	d055      	beq.n	80075fa <_scanf_float+0x272>
 800754e:	2d01      	cmp	r5, #1
 8007550:	d002      	beq.n	8007558 <_scanf_float+0x1d0>
 8007552:	2d04      	cmp	r5, #4
 8007554:	f47f af48 	bne.w	80073e8 <_scanf_float+0x60>
 8007558:	3501      	adds	r5, #1
 800755a:	b2ed      	uxtb	r5, r5
 800755c:	e7d8      	b.n	8007510 <_scanf_float+0x188>
 800755e:	f1ba 0f01 	cmp.w	sl, #1
 8007562:	f47f af41 	bne.w	80073e8 <_scanf_float+0x60>
 8007566:	f04f 0a02 	mov.w	sl, #2
 800756a:	e7d1      	b.n	8007510 <_scanf_float+0x188>
 800756c:	b97d      	cbnz	r5, 800758e <_scanf_float+0x206>
 800756e:	f1b9 0f00 	cmp.w	r9, #0
 8007572:	f47f af3c 	bne.w	80073ee <_scanf_float+0x66>
 8007576:	6822      	ldr	r2, [r4, #0]
 8007578:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800757c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007580:	f47f af39 	bne.w	80073f6 <_scanf_float+0x6e>
 8007584:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007588:	6022      	str	r2, [r4, #0]
 800758a:	2501      	movs	r5, #1
 800758c:	e7c0      	b.n	8007510 <_scanf_float+0x188>
 800758e:	2d03      	cmp	r5, #3
 8007590:	d0e2      	beq.n	8007558 <_scanf_float+0x1d0>
 8007592:	2d05      	cmp	r5, #5
 8007594:	e7de      	b.n	8007554 <_scanf_float+0x1cc>
 8007596:	2d02      	cmp	r5, #2
 8007598:	f47f af26 	bne.w	80073e8 <_scanf_float+0x60>
 800759c:	2503      	movs	r5, #3
 800759e:	e7b7      	b.n	8007510 <_scanf_float+0x188>
 80075a0:	2d06      	cmp	r5, #6
 80075a2:	f47f af21 	bne.w	80073e8 <_scanf_float+0x60>
 80075a6:	2507      	movs	r5, #7
 80075a8:	e7b2      	b.n	8007510 <_scanf_float+0x188>
 80075aa:	6822      	ldr	r2, [r4, #0]
 80075ac:	0591      	lsls	r1, r2, #22
 80075ae:	f57f af1b 	bpl.w	80073e8 <_scanf_float+0x60>
 80075b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80075b6:	6022      	str	r2, [r4, #0]
 80075b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80075bc:	e7a8      	b.n	8007510 <_scanf_float+0x188>
 80075be:	6822      	ldr	r2, [r4, #0]
 80075c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80075c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80075c8:	d006      	beq.n	80075d8 <_scanf_float+0x250>
 80075ca:	0550      	lsls	r0, r2, #21
 80075cc:	f57f af0c 	bpl.w	80073e8 <_scanf_float+0x60>
 80075d0:	f1b9 0f00 	cmp.w	r9, #0
 80075d4:	f43f af0f 	beq.w	80073f6 <_scanf_float+0x6e>
 80075d8:	0591      	lsls	r1, r2, #22
 80075da:	bf58      	it	pl
 80075dc:	9901      	ldrpl	r1, [sp, #4]
 80075de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80075e2:	bf58      	it	pl
 80075e4:	eba9 0101 	subpl.w	r1, r9, r1
 80075e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80075ec:	bf58      	it	pl
 80075ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80075f2:	6022      	str	r2, [r4, #0]
 80075f4:	f04f 0900 	mov.w	r9, #0
 80075f8:	e78a      	b.n	8007510 <_scanf_float+0x188>
 80075fa:	f04f 0a03 	mov.w	sl, #3
 80075fe:	e787      	b.n	8007510 <_scanf_float+0x188>
 8007600:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007604:	4639      	mov	r1, r7
 8007606:	4640      	mov	r0, r8
 8007608:	4798      	blx	r3
 800760a:	2800      	cmp	r0, #0
 800760c:	f43f aedf 	beq.w	80073ce <_scanf_float+0x46>
 8007610:	e6ea      	b.n	80073e8 <_scanf_float+0x60>
 8007612:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007616:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800761a:	463a      	mov	r2, r7
 800761c:	4640      	mov	r0, r8
 800761e:	4798      	blx	r3
 8007620:	6923      	ldr	r3, [r4, #16]
 8007622:	3b01      	subs	r3, #1
 8007624:	6123      	str	r3, [r4, #16]
 8007626:	e6ec      	b.n	8007402 <_scanf_float+0x7a>
 8007628:	1e6b      	subs	r3, r5, #1
 800762a:	2b06      	cmp	r3, #6
 800762c:	d825      	bhi.n	800767a <_scanf_float+0x2f2>
 800762e:	2d02      	cmp	r5, #2
 8007630:	d836      	bhi.n	80076a0 <_scanf_float+0x318>
 8007632:	455e      	cmp	r6, fp
 8007634:	f67f aee8 	bls.w	8007408 <_scanf_float+0x80>
 8007638:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800763c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007640:	463a      	mov	r2, r7
 8007642:	4640      	mov	r0, r8
 8007644:	4798      	blx	r3
 8007646:	6923      	ldr	r3, [r4, #16]
 8007648:	3b01      	subs	r3, #1
 800764a:	6123      	str	r3, [r4, #16]
 800764c:	e7f1      	b.n	8007632 <_scanf_float+0x2aa>
 800764e:	9802      	ldr	r0, [sp, #8]
 8007650:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007654:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007658:	9002      	str	r0, [sp, #8]
 800765a:	463a      	mov	r2, r7
 800765c:	4640      	mov	r0, r8
 800765e:	4798      	blx	r3
 8007660:	6923      	ldr	r3, [r4, #16]
 8007662:	3b01      	subs	r3, #1
 8007664:	6123      	str	r3, [r4, #16]
 8007666:	f10a 3aff 	add.w	sl, sl, #4294967295
 800766a:	fa5f fa8a 	uxtb.w	sl, sl
 800766e:	f1ba 0f02 	cmp.w	sl, #2
 8007672:	d1ec      	bne.n	800764e <_scanf_float+0x2c6>
 8007674:	3d03      	subs	r5, #3
 8007676:	b2ed      	uxtb	r5, r5
 8007678:	1b76      	subs	r6, r6, r5
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	05da      	lsls	r2, r3, #23
 800767e:	d52f      	bpl.n	80076e0 <_scanf_float+0x358>
 8007680:	055b      	lsls	r3, r3, #21
 8007682:	d510      	bpl.n	80076a6 <_scanf_float+0x31e>
 8007684:	455e      	cmp	r6, fp
 8007686:	f67f aebf 	bls.w	8007408 <_scanf_float+0x80>
 800768a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800768e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007692:	463a      	mov	r2, r7
 8007694:	4640      	mov	r0, r8
 8007696:	4798      	blx	r3
 8007698:	6923      	ldr	r3, [r4, #16]
 800769a:	3b01      	subs	r3, #1
 800769c:	6123      	str	r3, [r4, #16]
 800769e:	e7f1      	b.n	8007684 <_scanf_float+0x2fc>
 80076a0:	46aa      	mov	sl, r5
 80076a2:	9602      	str	r6, [sp, #8]
 80076a4:	e7df      	b.n	8007666 <_scanf_float+0x2de>
 80076a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80076aa:	6923      	ldr	r3, [r4, #16]
 80076ac:	2965      	cmp	r1, #101	; 0x65
 80076ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80076b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80076b6:	6123      	str	r3, [r4, #16]
 80076b8:	d00c      	beq.n	80076d4 <_scanf_float+0x34c>
 80076ba:	2945      	cmp	r1, #69	; 0x45
 80076bc:	d00a      	beq.n	80076d4 <_scanf_float+0x34c>
 80076be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076c2:	463a      	mov	r2, r7
 80076c4:	4640      	mov	r0, r8
 80076c6:	4798      	blx	r3
 80076c8:	6923      	ldr	r3, [r4, #16]
 80076ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80076ce:	3b01      	subs	r3, #1
 80076d0:	1eb5      	subs	r5, r6, #2
 80076d2:	6123      	str	r3, [r4, #16]
 80076d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076d8:	463a      	mov	r2, r7
 80076da:	4640      	mov	r0, r8
 80076dc:	4798      	blx	r3
 80076de:	462e      	mov	r6, r5
 80076e0:	6825      	ldr	r5, [r4, #0]
 80076e2:	f015 0510 	ands.w	r5, r5, #16
 80076e6:	d159      	bne.n	800779c <_scanf_float+0x414>
 80076e8:	7035      	strb	r5, [r6, #0]
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80076f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076f4:	d11b      	bne.n	800772e <_scanf_float+0x3a6>
 80076f6:	9b01      	ldr	r3, [sp, #4]
 80076f8:	454b      	cmp	r3, r9
 80076fa:	eba3 0209 	sub.w	r2, r3, r9
 80076fe:	d123      	bne.n	8007748 <_scanf_float+0x3c0>
 8007700:	2200      	movs	r2, #0
 8007702:	4659      	mov	r1, fp
 8007704:	4640      	mov	r0, r8
 8007706:	f000 fead 	bl	8008464 <_strtod_r>
 800770a:	6822      	ldr	r2, [r4, #0]
 800770c:	9b03      	ldr	r3, [sp, #12]
 800770e:	f012 0f02 	tst.w	r2, #2
 8007712:	ec57 6b10 	vmov	r6, r7, d0
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	d021      	beq.n	800775e <_scanf_float+0x3d6>
 800771a:	9903      	ldr	r1, [sp, #12]
 800771c:	1d1a      	adds	r2, r3, #4
 800771e:	600a      	str	r2, [r1, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	e9c3 6700 	strd	r6, r7, [r3]
 8007726:	68e3      	ldr	r3, [r4, #12]
 8007728:	3301      	adds	r3, #1
 800772a:	60e3      	str	r3, [r4, #12]
 800772c:	e66d      	b.n	800740a <_scanf_float+0x82>
 800772e:	9b04      	ldr	r3, [sp, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d0e5      	beq.n	8007700 <_scanf_float+0x378>
 8007734:	9905      	ldr	r1, [sp, #20]
 8007736:	230a      	movs	r3, #10
 8007738:	462a      	mov	r2, r5
 800773a:	3101      	adds	r1, #1
 800773c:	4640      	mov	r0, r8
 800773e:	f000 ff19 	bl	8008574 <_strtol_r>
 8007742:	9b04      	ldr	r3, [sp, #16]
 8007744:	9e05      	ldr	r6, [sp, #20]
 8007746:	1ac2      	subs	r2, r0, r3
 8007748:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800774c:	429e      	cmp	r6, r3
 800774e:	bf28      	it	cs
 8007750:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007754:	4912      	ldr	r1, [pc, #72]	; (80077a0 <_scanf_float+0x418>)
 8007756:	4630      	mov	r0, r6
 8007758:	f000 f82c 	bl	80077b4 <siprintf>
 800775c:	e7d0      	b.n	8007700 <_scanf_float+0x378>
 800775e:	9903      	ldr	r1, [sp, #12]
 8007760:	f012 0f04 	tst.w	r2, #4
 8007764:	f103 0204 	add.w	r2, r3, #4
 8007768:	600a      	str	r2, [r1, #0]
 800776a:	d1d9      	bne.n	8007720 <_scanf_float+0x398>
 800776c:	f8d3 8000 	ldr.w	r8, [r3]
 8007770:	ee10 2a10 	vmov	r2, s0
 8007774:	ee10 0a10 	vmov	r0, s0
 8007778:	463b      	mov	r3, r7
 800777a:	4639      	mov	r1, r7
 800777c:	f7f9 f9de 	bl	8000b3c <__aeabi_dcmpun>
 8007780:	b128      	cbz	r0, 800778e <_scanf_float+0x406>
 8007782:	4808      	ldr	r0, [pc, #32]	; (80077a4 <_scanf_float+0x41c>)
 8007784:	f000 f810 	bl	80077a8 <nanf>
 8007788:	ed88 0a00 	vstr	s0, [r8]
 800778c:	e7cb      	b.n	8007726 <_scanf_float+0x39e>
 800778e:	4630      	mov	r0, r6
 8007790:	4639      	mov	r1, r7
 8007792:	f7f9 fa31 	bl	8000bf8 <__aeabi_d2f>
 8007796:	f8c8 0000 	str.w	r0, [r8]
 800779a:	e7c4      	b.n	8007726 <_scanf_float+0x39e>
 800779c:	2500      	movs	r5, #0
 800779e:	e634      	b.n	800740a <_scanf_float+0x82>
 80077a0:	0800b49c 	.word	0x0800b49c
 80077a4:	0800b8a8 	.word	0x0800b8a8

080077a8 <nanf>:
 80077a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80077b0 <nanf+0x8>
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	7fc00000 	.word	0x7fc00000

080077b4 <siprintf>:
 80077b4:	b40e      	push	{r1, r2, r3}
 80077b6:	b500      	push	{lr}
 80077b8:	b09c      	sub	sp, #112	; 0x70
 80077ba:	ab1d      	add	r3, sp, #116	; 0x74
 80077bc:	9002      	str	r0, [sp, #8]
 80077be:	9006      	str	r0, [sp, #24]
 80077c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077c4:	4809      	ldr	r0, [pc, #36]	; (80077ec <siprintf+0x38>)
 80077c6:	9107      	str	r1, [sp, #28]
 80077c8:	9104      	str	r1, [sp, #16]
 80077ca:	4909      	ldr	r1, [pc, #36]	; (80077f0 <siprintf+0x3c>)
 80077cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80077d0:	9105      	str	r1, [sp, #20]
 80077d2:	6800      	ldr	r0, [r0, #0]
 80077d4:	9301      	str	r3, [sp, #4]
 80077d6:	a902      	add	r1, sp, #8
 80077d8:	f002 fef8 	bl	800a5cc <_svfiprintf_r>
 80077dc:	9b02      	ldr	r3, [sp, #8]
 80077de:	2200      	movs	r2, #0
 80077e0:	701a      	strb	r2, [r3, #0]
 80077e2:	b01c      	add	sp, #112	; 0x70
 80077e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80077e8:	b003      	add	sp, #12
 80077ea:	4770      	bx	lr
 80077ec:	2000000c 	.word	0x2000000c
 80077f0:	ffff0208 	.word	0xffff0208

080077f4 <strncmp>:
 80077f4:	b510      	push	{r4, lr}
 80077f6:	b17a      	cbz	r2, 8007818 <strncmp+0x24>
 80077f8:	4603      	mov	r3, r0
 80077fa:	3901      	subs	r1, #1
 80077fc:	1884      	adds	r4, r0, r2
 80077fe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007802:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007806:	4290      	cmp	r0, r2
 8007808:	d101      	bne.n	800780e <strncmp+0x1a>
 800780a:	42a3      	cmp	r3, r4
 800780c:	d101      	bne.n	8007812 <strncmp+0x1e>
 800780e:	1a80      	subs	r0, r0, r2
 8007810:	bd10      	pop	{r4, pc}
 8007812:	2800      	cmp	r0, #0
 8007814:	d1f3      	bne.n	80077fe <strncmp+0xa>
 8007816:	e7fa      	b.n	800780e <strncmp+0x1a>
 8007818:	4610      	mov	r0, r2
 800781a:	e7f9      	b.n	8007810 <strncmp+0x1c>

0800781c <sulp>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	4604      	mov	r4, r0
 8007820:	460d      	mov	r5, r1
 8007822:	ec45 4b10 	vmov	d0, r4, r5
 8007826:	4616      	mov	r6, r2
 8007828:	f002 fc2e 	bl	800a088 <__ulp>
 800782c:	ec51 0b10 	vmov	r0, r1, d0
 8007830:	b17e      	cbz	r6, 8007852 <sulp+0x36>
 8007832:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007836:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800783a:	2b00      	cmp	r3, #0
 800783c:	dd09      	ble.n	8007852 <sulp+0x36>
 800783e:	051b      	lsls	r3, r3, #20
 8007840:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007844:	2400      	movs	r4, #0
 8007846:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800784a:	4622      	mov	r2, r4
 800784c:	462b      	mov	r3, r5
 800784e:	f7f8 fedb 	bl	8000608 <__aeabi_dmul>
 8007852:	bd70      	pop	{r4, r5, r6, pc}
 8007854:	0000      	movs	r0, r0
	...

08007858 <_strtod_l>:
 8007858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785c:	ed2d 8b02 	vpush	{d8}
 8007860:	b09d      	sub	sp, #116	; 0x74
 8007862:	461f      	mov	r7, r3
 8007864:	2300      	movs	r3, #0
 8007866:	9318      	str	r3, [sp, #96]	; 0x60
 8007868:	4ba2      	ldr	r3, [pc, #648]	; (8007af4 <_strtod_l+0x29c>)
 800786a:	9213      	str	r2, [sp, #76]	; 0x4c
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	9305      	str	r3, [sp, #20]
 8007870:	4604      	mov	r4, r0
 8007872:	4618      	mov	r0, r3
 8007874:	4688      	mov	r8, r1
 8007876:	f7f8 fcb3 	bl	80001e0 <strlen>
 800787a:	f04f 0a00 	mov.w	sl, #0
 800787e:	4605      	mov	r5, r0
 8007880:	f04f 0b00 	mov.w	fp, #0
 8007884:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800788a:	781a      	ldrb	r2, [r3, #0]
 800788c:	2a2b      	cmp	r2, #43	; 0x2b
 800788e:	d04e      	beq.n	800792e <_strtod_l+0xd6>
 8007890:	d83b      	bhi.n	800790a <_strtod_l+0xb2>
 8007892:	2a0d      	cmp	r2, #13
 8007894:	d834      	bhi.n	8007900 <_strtod_l+0xa8>
 8007896:	2a08      	cmp	r2, #8
 8007898:	d834      	bhi.n	8007904 <_strtod_l+0xac>
 800789a:	2a00      	cmp	r2, #0
 800789c:	d03e      	beq.n	800791c <_strtod_l+0xc4>
 800789e:	2300      	movs	r3, #0
 80078a0:	930a      	str	r3, [sp, #40]	; 0x28
 80078a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80078a4:	7833      	ldrb	r3, [r6, #0]
 80078a6:	2b30      	cmp	r3, #48	; 0x30
 80078a8:	f040 80b0 	bne.w	8007a0c <_strtod_l+0x1b4>
 80078ac:	7873      	ldrb	r3, [r6, #1]
 80078ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80078b2:	2b58      	cmp	r3, #88	; 0x58
 80078b4:	d168      	bne.n	8007988 <_strtod_l+0x130>
 80078b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b8:	9301      	str	r3, [sp, #4]
 80078ba:	ab18      	add	r3, sp, #96	; 0x60
 80078bc:	9702      	str	r7, [sp, #8]
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	4a8d      	ldr	r2, [pc, #564]	; (8007af8 <_strtod_l+0x2a0>)
 80078c2:	ab19      	add	r3, sp, #100	; 0x64
 80078c4:	a917      	add	r1, sp, #92	; 0x5c
 80078c6:	4620      	mov	r0, r4
 80078c8:	f001 fd38 	bl	800933c <__gethex>
 80078cc:	f010 0707 	ands.w	r7, r0, #7
 80078d0:	4605      	mov	r5, r0
 80078d2:	d005      	beq.n	80078e0 <_strtod_l+0x88>
 80078d4:	2f06      	cmp	r7, #6
 80078d6:	d12c      	bne.n	8007932 <_strtod_l+0xda>
 80078d8:	3601      	adds	r6, #1
 80078da:	2300      	movs	r3, #0
 80078dc:	9617      	str	r6, [sp, #92]	; 0x5c
 80078de:	930a      	str	r3, [sp, #40]	; 0x28
 80078e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f040 8590 	bne.w	8008408 <_strtod_l+0xbb0>
 80078e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ea:	b1eb      	cbz	r3, 8007928 <_strtod_l+0xd0>
 80078ec:	4652      	mov	r2, sl
 80078ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80078f2:	ec43 2b10 	vmov	d0, r2, r3
 80078f6:	b01d      	add	sp, #116	; 0x74
 80078f8:	ecbd 8b02 	vpop	{d8}
 80078fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007900:	2a20      	cmp	r2, #32
 8007902:	d1cc      	bne.n	800789e <_strtod_l+0x46>
 8007904:	3301      	adds	r3, #1
 8007906:	9317      	str	r3, [sp, #92]	; 0x5c
 8007908:	e7be      	b.n	8007888 <_strtod_l+0x30>
 800790a:	2a2d      	cmp	r2, #45	; 0x2d
 800790c:	d1c7      	bne.n	800789e <_strtod_l+0x46>
 800790e:	2201      	movs	r2, #1
 8007910:	920a      	str	r2, [sp, #40]	; 0x28
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	9217      	str	r2, [sp, #92]	; 0x5c
 8007916:	785b      	ldrb	r3, [r3, #1]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1c2      	bne.n	80078a2 <_strtod_l+0x4a>
 800791c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800791e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007922:	2b00      	cmp	r3, #0
 8007924:	f040 856e 	bne.w	8008404 <_strtod_l+0xbac>
 8007928:	4652      	mov	r2, sl
 800792a:	465b      	mov	r3, fp
 800792c:	e7e1      	b.n	80078f2 <_strtod_l+0x9a>
 800792e:	2200      	movs	r2, #0
 8007930:	e7ee      	b.n	8007910 <_strtod_l+0xb8>
 8007932:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007934:	b13a      	cbz	r2, 8007946 <_strtod_l+0xee>
 8007936:	2135      	movs	r1, #53	; 0x35
 8007938:	a81a      	add	r0, sp, #104	; 0x68
 800793a:	f002 fcb0 	bl	800a29e <__copybits>
 800793e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007940:	4620      	mov	r0, r4
 8007942:	f002 f86f 	bl	8009a24 <_Bfree>
 8007946:	3f01      	subs	r7, #1
 8007948:	2f04      	cmp	r7, #4
 800794a:	d806      	bhi.n	800795a <_strtod_l+0x102>
 800794c:	e8df f007 	tbb	[pc, r7]
 8007950:	1714030a 	.word	0x1714030a
 8007954:	0a          	.byte	0x0a
 8007955:	00          	.byte	0x00
 8007956:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800795a:	0728      	lsls	r0, r5, #28
 800795c:	d5c0      	bpl.n	80078e0 <_strtod_l+0x88>
 800795e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007962:	e7bd      	b.n	80078e0 <_strtod_l+0x88>
 8007964:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007968:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800796a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800796e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007972:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007976:	e7f0      	b.n	800795a <_strtod_l+0x102>
 8007978:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007afc <_strtod_l+0x2a4>
 800797c:	e7ed      	b.n	800795a <_strtod_l+0x102>
 800797e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007982:	f04f 3aff 	mov.w	sl, #4294967295
 8007986:	e7e8      	b.n	800795a <_strtod_l+0x102>
 8007988:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800798a:	1c5a      	adds	r2, r3, #1
 800798c:	9217      	str	r2, [sp, #92]	; 0x5c
 800798e:	785b      	ldrb	r3, [r3, #1]
 8007990:	2b30      	cmp	r3, #48	; 0x30
 8007992:	d0f9      	beq.n	8007988 <_strtod_l+0x130>
 8007994:	2b00      	cmp	r3, #0
 8007996:	d0a3      	beq.n	80078e0 <_strtod_l+0x88>
 8007998:	2301      	movs	r3, #1
 800799a:	f04f 0900 	mov.w	r9, #0
 800799e:	9304      	str	r3, [sp, #16]
 80079a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079a2:	9308      	str	r3, [sp, #32]
 80079a4:	f8cd 901c 	str.w	r9, [sp, #28]
 80079a8:	464f      	mov	r7, r9
 80079aa:	220a      	movs	r2, #10
 80079ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80079ae:	7806      	ldrb	r6, [r0, #0]
 80079b0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80079b4:	b2d9      	uxtb	r1, r3
 80079b6:	2909      	cmp	r1, #9
 80079b8:	d92a      	bls.n	8007a10 <_strtod_l+0x1b8>
 80079ba:	9905      	ldr	r1, [sp, #20]
 80079bc:	462a      	mov	r2, r5
 80079be:	f7ff ff19 	bl	80077f4 <strncmp>
 80079c2:	b398      	cbz	r0, 8007a2c <_strtod_l+0x1d4>
 80079c4:	2000      	movs	r0, #0
 80079c6:	4632      	mov	r2, r6
 80079c8:	463d      	mov	r5, r7
 80079ca:	9005      	str	r0, [sp, #20]
 80079cc:	4603      	mov	r3, r0
 80079ce:	2a65      	cmp	r2, #101	; 0x65
 80079d0:	d001      	beq.n	80079d6 <_strtod_l+0x17e>
 80079d2:	2a45      	cmp	r2, #69	; 0x45
 80079d4:	d118      	bne.n	8007a08 <_strtod_l+0x1b0>
 80079d6:	b91d      	cbnz	r5, 80079e0 <_strtod_l+0x188>
 80079d8:	9a04      	ldr	r2, [sp, #16]
 80079da:	4302      	orrs	r2, r0
 80079dc:	d09e      	beq.n	800791c <_strtod_l+0xc4>
 80079de:	2500      	movs	r5, #0
 80079e0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80079e4:	f108 0201 	add.w	r2, r8, #1
 80079e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80079ea:	f898 2001 	ldrb.w	r2, [r8, #1]
 80079ee:	2a2b      	cmp	r2, #43	; 0x2b
 80079f0:	d075      	beq.n	8007ade <_strtod_l+0x286>
 80079f2:	2a2d      	cmp	r2, #45	; 0x2d
 80079f4:	d07b      	beq.n	8007aee <_strtod_l+0x296>
 80079f6:	f04f 0c00 	mov.w	ip, #0
 80079fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80079fe:	2909      	cmp	r1, #9
 8007a00:	f240 8082 	bls.w	8007b08 <_strtod_l+0x2b0>
 8007a04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007a08:	2600      	movs	r6, #0
 8007a0a:	e09d      	b.n	8007b48 <_strtod_l+0x2f0>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	e7c4      	b.n	800799a <_strtod_l+0x142>
 8007a10:	2f08      	cmp	r7, #8
 8007a12:	bfd8      	it	le
 8007a14:	9907      	ldrle	r1, [sp, #28]
 8007a16:	f100 0001 	add.w	r0, r0, #1
 8007a1a:	bfda      	itte	le
 8007a1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a20:	9307      	strle	r3, [sp, #28]
 8007a22:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007a26:	3701      	adds	r7, #1
 8007a28:	9017      	str	r0, [sp, #92]	; 0x5c
 8007a2a:	e7bf      	b.n	80079ac <_strtod_l+0x154>
 8007a2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a2e:	195a      	adds	r2, r3, r5
 8007a30:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a32:	5d5a      	ldrb	r2, [r3, r5]
 8007a34:	2f00      	cmp	r7, #0
 8007a36:	d037      	beq.n	8007aa8 <_strtod_l+0x250>
 8007a38:	9005      	str	r0, [sp, #20]
 8007a3a:	463d      	mov	r5, r7
 8007a3c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007a40:	2b09      	cmp	r3, #9
 8007a42:	d912      	bls.n	8007a6a <_strtod_l+0x212>
 8007a44:	2301      	movs	r3, #1
 8007a46:	e7c2      	b.n	80079ce <_strtod_l+0x176>
 8007a48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a4e:	785a      	ldrb	r2, [r3, #1]
 8007a50:	3001      	adds	r0, #1
 8007a52:	2a30      	cmp	r2, #48	; 0x30
 8007a54:	d0f8      	beq.n	8007a48 <_strtod_l+0x1f0>
 8007a56:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007a5a:	2b08      	cmp	r3, #8
 8007a5c:	f200 84d9 	bhi.w	8008412 <_strtod_l+0xbba>
 8007a60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a62:	9005      	str	r0, [sp, #20]
 8007a64:	2000      	movs	r0, #0
 8007a66:	9308      	str	r3, [sp, #32]
 8007a68:	4605      	mov	r5, r0
 8007a6a:	3a30      	subs	r2, #48	; 0x30
 8007a6c:	f100 0301 	add.w	r3, r0, #1
 8007a70:	d014      	beq.n	8007a9c <_strtod_l+0x244>
 8007a72:	9905      	ldr	r1, [sp, #20]
 8007a74:	4419      	add	r1, r3
 8007a76:	9105      	str	r1, [sp, #20]
 8007a78:	462b      	mov	r3, r5
 8007a7a:	eb00 0e05 	add.w	lr, r0, r5
 8007a7e:	210a      	movs	r1, #10
 8007a80:	4573      	cmp	r3, lr
 8007a82:	d113      	bne.n	8007aac <_strtod_l+0x254>
 8007a84:	182b      	adds	r3, r5, r0
 8007a86:	2b08      	cmp	r3, #8
 8007a88:	f105 0501 	add.w	r5, r5, #1
 8007a8c:	4405      	add	r5, r0
 8007a8e:	dc1c      	bgt.n	8007aca <_strtod_l+0x272>
 8007a90:	9907      	ldr	r1, [sp, #28]
 8007a92:	230a      	movs	r3, #10
 8007a94:	fb03 2301 	mla	r3, r3, r1, r2
 8007a98:	9307      	str	r3, [sp, #28]
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a9e:	1c51      	adds	r1, r2, #1
 8007aa0:	9117      	str	r1, [sp, #92]	; 0x5c
 8007aa2:	7852      	ldrb	r2, [r2, #1]
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	e7c9      	b.n	8007a3c <_strtod_l+0x1e4>
 8007aa8:	4638      	mov	r0, r7
 8007aaa:	e7d2      	b.n	8007a52 <_strtod_l+0x1fa>
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	dc04      	bgt.n	8007aba <_strtod_l+0x262>
 8007ab0:	9e07      	ldr	r6, [sp, #28]
 8007ab2:	434e      	muls	r6, r1
 8007ab4:	9607      	str	r6, [sp, #28]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	e7e2      	b.n	8007a80 <_strtod_l+0x228>
 8007aba:	f103 0c01 	add.w	ip, r3, #1
 8007abe:	f1bc 0f10 	cmp.w	ip, #16
 8007ac2:	bfd8      	it	le
 8007ac4:	fb01 f909 	mulle.w	r9, r1, r9
 8007ac8:	e7f5      	b.n	8007ab6 <_strtod_l+0x25e>
 8007aca:	2d10      	cmp	r5, #16
 8007acc:	bfdc      	itt	le
 8007ace:	230a      	movle	r3, #10
 8007ad0:	fb03 2909 	mlale	r9, r3, r9, r2
 8007ad4:	e7e1      	b.n	8007a9a <_strtod_l+0x242>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	9305      	str	r3, [sp, #20]
 8007ada:	2301      	movs	r3, #1
 8007adc:	e77c      	b.n	80079d8 <_strtod_l+0x180>
 8007ade:	f04f 0c00 	mov.w	ip, #0
 8007ae2:	f108 0202 	add.w	r2, r8, #2
 8007ae6:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ae8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007aec:	e785      	b.n	80079fa <_strtod_l+0x1a2>
 8007aee:	f04f 0c01 	mov.w	ip, #1
 8007af2:	e7f6      	b.n	8007ae2 <_strtod_l+0x28a>
 8007af4:	0800b6f0 	.word	0x0800b6f0
 8007af8:	0800b4a4 	.word	0x0800b4a4
 8007afc:	7ff00000 	.word	0x7ff00000
 8007b00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b02:	1c51      	adds	r1, r2, #1
 8007b04:	9117      	str	r1, [sp, #92]	; 0x5c
 8007b06:	7852      	ldrb	r2, [r2, #1]
 8007b08:	2a30      	cmp	r2, #48	; 0x30
 8007b0a:	d0f9      	beq.n	8007b00 <_strtod_l+0x2a8>
 8007b0c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007b10:	2908      	cmp	r1, #8
 8007b12:	f63f af79 	bhi.w	8007a08 <_strtod_l+0x1b0>
 8007b16:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007b1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b1c:	9206      	str	r2, [sp, #24]
 8007b1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b20:	1c51      	adds	r1, r2, #1
 8007b22:	9117      	str	r1, [sp, #92]	; 0x5c
 8007b24:	7852      	ldrb	r2, [r2, #1]
 8007b26:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007b2a:	2e09      	cmp	r6, #9
 8007b2c:	d937      	bls.n	8007b9e <_strtod_l+0x346>
 8007b2e:	9e06      	ldr	r6, [sp, #24]
 8007b30:	1b89      	subs	r1, r1, r6
 8007b32:	2908      	cmp	r1, #8
 8007b34:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007b38:	dc02      	bgt.n	8007b40 <_strtod_l+0x2e8>
 8007b3a:	4576      	cmp	r6, lr
 8007b3c:	bfa8      	it	ge
 8007b3e:	4676      	movge	r6, lr
 8007b40:	f1bc 0f00 	cmp.w	ip, #0
 8007b44:	d000      	beq.n	8007b48 <_strtod_l+0x2f0>
 8007b46:	4276      	negs	r6, r6
 8007b48:	2d00      	cmp	r5, #0
 8007b4a:	d14d      	bne.n	8007be8 <_strtod_l+0x390>
 8007b4c:	9904      	ldr	r1, [sp, #16]
 8007b4e:	4301      	orrs	r1, r0
 8007b50:	f47f aec6 	bne.w	80078e0 <_strtod_l+0x88>
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f47f aee1 	bne.w	800791c <_strtod_l+0xc4>
 8007b5a:	2a69      	cmp	r2, #105	; 0x69
 8007b5c:	d027      	beq.n	8007bae <_strtod_l+0x356>
 8007b5e:	dc24      	bgt.n	8007baa <_strtod_l+0x352>
 8007b60:	2a49      	cmp	r2, #73	; 0x49
 8007b62:	d024      	beq.n	8007bae <_strtod_l+0x356>
 8007b64:	2a4e      	cmp	r2, #78	; 0x4e
 8007b66:	f47f aed9 	bne.w	800791c <_strtod_l+0xc4>
 8007b6a:	499f      	ldr	r1, [pc, #636]	; (8007de8 <_strtod_l+0x590>)
 8007b6c:	a817      	add	r0, sp, #92	; 0x5c
 8007b6e:	f001 fe3d 	bl	80097ec <__match>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	f43f aed2 	beq.w	800791c <_strtod_l+0xc4>
 8007b78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b28      	cmp	r3, #40	; 0x28
 8007b7e:	d12d      	bne.n	8007bdc <_strtod_l+0x384>
 8007b80:	499a      	ldr	r1, [pc, #616]	; (8007dec <_strtod_l+0x594>)
 8007b82:	aa1a      	add	r2, sp, #104	; 0x68
 8007b84:	a817      	add	r0, sp, #92	; 0x5c
 8007b86:	f001 fe45 	bl	8009814 <__hexnan>
 8007b8a:	2805      	cmp	r0, #5
 8007b8c:	d126      	bne.n	8007bdc <_strtod_l+0x384>
 8007b8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b90:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007b94:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007b98:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007b9c:	e6a0      	b.n	80078e0 <_strtod_l+0x88>
 8007b9e:	210a      	movs	r1, #10
 8007ba0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007ba4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007ba8:	e7b9      	b.n	8007b1e <_strtod_l+0x2c6>
 8007baa:	2a6e      	cmp	r2, #110	; 0x6e
 8007bac:	e7db      	b.n	8007b66 <_strtod_l+0x30e>
 8007bae:	4990      	ldr	r1, [pc, #576]	; (8007df0 <_strtod_l+0x598>)
 8007bb0:	a817      	add	r0, sp, #92	; 0x5c
 8007bb2:	f001 fe1b 	bl	80097ec <__match>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	f43f aeb0 	beq.w	800791c <_strtod_l+0xc4>
 8007bbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bbe:	498d      	ldr	r1, [pc, #564]	; (8007df4 <_strtod_l+0x59c>)
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	a817      	add	r0, sp, #92	; 0x5c
 8007bc4:	9317      	str	r3, [sp, #92]	; 0x5c
 8007bc6:	f001 fe11 	bl	80097ec <__match>
 8007bca:	b910      	cbnz	r0, 8007bd2 <_strtod_l+0x37a>
 8007bcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bce:	3301      	adds	r3, #1
 8007bd0:	9317      	str	r3, [sp, #92]	; 0x5c
 8007bd2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007e04 <_strtod_l+0x5ac>
 8007bd6:	f04f 0a00 	mov.w	sl, #0
 8007bda:	e681      	b.n	80078e0 <_strtod_l+0x88>
 8007bdc:	4886      	ldr	r0, [pc, #536]	; (8007df8 <_strtod_l+0x5a0>)
 8007bde:	f002 fdf7 	bl	800a7d0 <nan>
 8007be2:	ec5b ab10 	vmov	sl, fp, d0
 8007be6:	e67b      	b.n	80078e0 <_strtod_l+0x88>
 8007be8:	9b05      	ldr	r3, [sp, #20]
 8007bea:	9807      	ldr	r0, [sp, #28]
 8007bec:	1af3      	subs	r3, r6, r3
 8007bee:	2f00      	cmp	r7, #0
 8007bf0:	bf08      	it	eq
 8007bf2:	462f      	moveq	r7, r5
 8007bf4:	2d10      	cmp	r5, #16
 8007bf6:	9306      	str	r3, [sp, #24]
 8007bf8:	46a8      	mov	r8, r5
 8007bfa:	bfa8      	it	ge
 8007bfc:	f04f 0810 	movge.w	r8, #16
 8007c00:	f7f8 fc88 	bl	8000514 <__aeabi_ui2d>
 8007c04:	2d09      	cmp	r5, #9
 8007c06:	4682      	mov	sl, r0
 8007c08:	468b      	mov	fp, r1
 8007c0a:	dd13      	ble.n	8007c34 <_strtod_l+0x3dc>
 8007c0c:	4b7b      	ldr	r3, [pc, #492]	; (8007dfc <_strtod_l+0x5a4>)
 8007c0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007c12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007c16:	f7f8 fcf7 	bl	8000608 <__aeabi_dmul>
 8007c1a:	4682      	mov	sl, r0
 8007c1c:	4648      	mov	r0, r9
 8007c1e:	468b      	mov	fp, r1
 8007c20:	f7f8 fc78 	bl	8000514 <__aeabi_ui2d>
 8007c24:	4602      	mov	r2, r0
 8007c26:	460b      	mov	r3, r1
 8007c28:	4650      	mov	r0, sl
 8007c2a:	4659      	mov	r1, fp
 8007c2c:	f7f8 fb36 	bl	800029c <__adddf3>
 8007c30:	4682      	mov	sl, r0
 8007c32:	468b      	mov	fp, r1
 8007c34:	2d0f      	cmp	r5, #15
 8007c36:	dc38      	bgt.n	8007caa <_strtod_l+0x452>
 8007c38:	9b06      	ldr	r3, [sp, #24]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f43f ae50 	beq.w	80078e0 <_strtod_l+0x88>
 8007c40:	dd24      	ble.n	8007c8c <_strtod_l+0x434>
 8007c42:	2b16      	cmp	r3, #22
 8007c44:	dc0b      	bgt.n	8007c5e <_strtod_l+0x406>
 8007c46:	496d      	ldr	r1, [pc, #436]	; (8007dfc <_strtod_l+0x5a4>)
 8007c48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c50:	4652      	mov	r2, sl
 8007c52:	465b      	mov	r3, fp
 8007c54:	f7f8 fcd8 	bl	8000608 <__aeabi_dmul>
 8007c58:	4682      	mov	sl, r0
 8007c5a:	468b      	mov	fp, r1
 8007c5c:	e640      	b.n	80078e0 <_strtod_l+0x88>
 8007c5e:	9a06      	ldr	r2, [sp, #24]
 8007c60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007c64:	4293      	cmp	r3, r2
 8007c66:	db20      	blt.n	8007caa <_strtod_l+0x452>
 8007c68:	4c64      	ldr	r4, [pc, #400]	; (8007dfc <_strtod_l+0x5a4>)
 8007c6a:	f1c5 050f 	rsb	r5, r5, #15
 8007c6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007c72:	4652      	mov	r2, sl
 8007c74:	465b      	mov	r3, fp
 8007c76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c7a:	f7f8 fcc5 	bl	8000608 <__aeabi_dmul>
 8007c7e:	9b06      	ldr	r3, [sp, #24]
 8007c80:	1b5d      	subs	r5, r3, r5
 8007c82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007c86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007c8a:	e7e3      	b.n	8007c54 <_strtod_l+0x3fc>
 8007c8c:	9b06      	ldr	r3, [sp, #24]
 8007c8e:	3316      	adds	r3, #22
 8007c90:	db0b      	blt.n	8007caa <_strtod_l+0x452>
 8007c92:	9b05      	ldr	r3, [sp, #20]
 8007c94:	1b9e      	subs	r6, r3, r6
 8007c96:	4b59      	ldr	r3, [pc, #356]	; (8007dfc <_strtod_l+0x5a4>)
 8007c98:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007c9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ca0:	4650      	mov	r0, sl
 8007ca2:	4659      	mov	r1, fp
 8007ca4:	f7f8 fdda 	bl	800085c <__aeabi_ddiv>
 8007ca8:	e7d6      	b.n	8007c58 <_strtod_l+0x400>
 8007caa:	9b06      	ldr	r3, [sp, #24]
 8007cac:	eba5 0808 	sub.w	r8, r5, r8
 8007cb0:	4498      	add	r8, r3
 8007cb2:	f1b8 0f00 	cmp.w	r8, #0
 8007cb6:	dd74      	ble.n	8007da2 <_strtod_l+0x54a>
 8007cb8:	f018 030f 	ands.w	r3, r8, #15
 8007cbc:	d00a      	beq.n	8007cd4 <_strtod_l+0x47c>
 8007cbe:	494f      	ldr	r1, [pc, #316]	; (8007dfc <_strtod_l+0x5a4>)
 8007cc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cc4:	4652      	mov	r2, sl
 8007cc6:	465b      	mov	r3, fp
 8007cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ccc:	f7f8 fc9c 	bl	8000608 <__aeabi_dmul>
 8007cd0:	4682      	mov	sl, r0
 8007cd2:	468b      	mov	fp, r1
 8007cd4:	f038 080f 	bics.w	r8, r8, #15
 8007cd8:	d04f      	beq.n	8007d7a <_strtod_l+0x522>
 8007cda:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007cde:	dd22      	ble.n	8007d26 <_strtod_l+0x4ce>
 8007ce0:	2500      	movs	r5, #0
 8007ce2:	462e      	mov	r6, r5
 8007ce4:	9507      	str	r5, [sp, #28]
 8007ce6:	9505      	str	r5, [sp, #20]
 8007ce8:	2322      	movs	r3, #34	; 0x22
 8007cea:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007e04 <_strtod_l+0x5ac>
 8007cee:	6023      	str	r3, [r4, #0]
 8007cf0:	f04f 0a00 	mov.w	sl, #0
 8007cf4:	9b07      	ldr	r3, [sp, #28]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f43f adf2 	beq.w	80078e0 <_strtod_l+0x88>
 8007cfc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007cfe:	4620      	mov	r0, r4
 8007d00:	f001 fe90 	bl	8009a24 <_Bfree>
 8007d04:	9905      	ldr	r1, [sp, #20]
 8007d06:	4620      	mov	r0, r4
 8007d08:	f001 fe8c 	bl	8009a24 <_Bfree>
 8007d0c:	4631      	mov	r1, r6
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f001 fe88 	bl	8009a24 <_Bfree>
 8007d14:	9907      	ldr	r1, [sp, #28]
 8007d16:	4620      	mov	r0, r4
 8007d18:	f001 fe84 	bl	8009a24 <_Bfree>
 8007d1c:	4629      	mov	r1, r5
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f001 fe80 	bl	8009a24 <_Bfree>
 8007d24:	e5dc      	b.n	80078e0 <_strtod_l+0x88>
 8007d26:	4b36      	ldr	r3, [pc, #216]	; (8007e00 <_strtod_l+0x5a8>)
 8007d28:	9304      	str	r3, [sp, #16]
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007d30:	4650      	mov	r0, sl
 8007d32:	4659      	mov	r1, fp
 8007d34:	4699      	mov	r9, r3
 8007d36:	f1b8 0f01 	cmp.w	r8, #1
 8007d3a:	dc21      	bgt.n	8007d80 <_strtod_l+0x528>
 8007d3c:	b10b      	cbz	r3, 8007d42 <_strtod_l+0x4ea>
 8007d3e:	4682      	mov	sl, r0
 8007d40:	468b      	mov	fp, r1
 8007d42:	4b2f      	ldr	r3, [pc, #188]	; (8007e00 <_strtod_l+0x5a8>)
 8007d44:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007d48:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007d4c:	4652      	mov	r2, sl
 8007d4e:	465b      	mov	r3, fp
 8007d50:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007d54:	f7f8 fc58 	bl	8000608 <__aeabi_dmul>
 8007d58:	4b2a      	ldr	r3, [pc, #168]	; (8007e04 <_strtod_l+0x5ac>)
 8007d5a:	460a      	mov	r2, r1
 8007d5c:	400b      	ands	r3, r1
 8007d5e:	492a      	ldr	r1, [pc, #168]	; (8007e08 <_strtod_l+0x5b0>)
 8007d60:	428b      	cmp	r3, r1
 8007d62:	4682      	mov	sl, r0
 8007d64:	d8bc      	bhi.n	8007ce0 <_strtod_l+0x488>
 8007d66:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007d6a:	428b      	cmp	r3, r1
 8007d6c:	bf86      	itte	hi
 8007d6e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007e0c <_strtod_l+0x5b4>
 8007d72:	f04f 3aff 	movhi.w	sl, #4294967295
 8007d76:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	9304      	str	r3, [sp, #16]
 8007d7e:	e084      	b.n	8007e8a <_strtod_l+0x632>
 8007d80:	f018 0f01 	tst.w	r8, #1
 8007d84:	d005      	beq.n	8007d92 <_strtod_l+0x53a>
 8007d86:	9b04      	ldr	r3, [sp, #16]
 8007d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8c:	f7f8 fc3c 	bl	8000608 <__aeabi_dmul>
 8007d90:	2301      	movs	r3, #1
 8007d92:	9a04      	ldr	r2, [sp, #16]
 8007d94:	3208      	adds	r2, #8
 8007d96:	f109 0901 	add.w	r9, r9, #1
 8007d9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007d9e:	9204      	str	r2, [sp, #16]
 8007da0:	e7c9      	b.n	8007d36 <_strtod_l+0x4de>
 8007da2:	d0ea      	beq.n	8007d7a <_strtod_l+0x522>
 8007da4:	f1c8 0800 	rsb	r8, r8, #0
 8007da8:	f018 020f 	ands.w	r2, r8, #15
 8007dac:	d00a      	beq.n	8007dc4 <_strtod_l+0x56c>
 8007dae:	4b13      	ldr	r3, [pc, #76]	; (8007dfc <_strtod_l+0x5a4>)
 8007db0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007db4:	4650      	mov	r0, sl
 8007db6:	4659      	mov	r1, fp
 8007db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbc:	f7f8 fd4e 	bl	800085c <__aeabi_ddiv>
 8007dc0:	4682      	mov	sl, r0
 8007dc2:	468b      	mov	fp, r1
 8007dc4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007dc8:	d0d7      	beq.n	8007d7a <_strtod_l+0x522>
 8007dca:	f1b8 0f1f 	cmp.w	r8, #31
 8007dce:	dd1f      	ble.n	8007e10 <_strtod_l+0x5b8>
 8007dd0:	2500      	movs	r5, #0
 8007dd2:	462e      	mov	r6, r5
 8007dd4:	9507      	str	r5, [sp, #28]
 8007dd6:	9505      	str	r5, [sp, #20]
 8007dd8:	2322      	movs	r3, #34	; 0x22
 8007dda:	f04f 0a00 	mov.w	sl, #0
 8007dde:	f04f 0b00 	mov.w	fp, #0
 8007de2:	6023      	str	r3, [r4, #0]
 8007de4:	e786      	b.n	8007cf4 <_strtod_l+0x49c>
 8007de6:	bf00      	nop
 8007de8:	0800b475 	.word	0x0800b475
 8007dec:	0800b4b8 	.word	0x0800b4b8
 8007df0:	0800b46d 	.word	0x0800b46d
 8007df4:	0800b5fc 	.word	0x0800b5fc
 8007df8:	0800b8a8 	.word	0x0800b8a8
 8007dfc:	0800b788 	.word	0x0800b788
 8007e00:	0800b760 	.word	0x0800b760
 8007e04:	7ff00000 	.word	0x7ff00000
 8007e08:	7ca00000 	.word	0x7ca00000
 8007e0c:	7fefffff 	.word	0x7fefffff
 8007e10:	f018 0310 	ands.w	r3, r8, #16
 8007e14:	bf18      	it	ne
 8007e16:	236a      	movne	r3, #106	; 0x6a
 8007e18:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80081c8 <_strtod_l+0x970>
 8007e1c:	9304      	str	r3, [sp, #16]
 8007e1e:	4650      	mov	r0, sl
 8007e20:	4659      	mov	r1, fp
 8007e22:	2300      	movs	r3, #0
 8007e24:	f018 0f01 	tst.w	r8, #1
 8007e28:	d004      	beq.n	8007e34 <_strtod_l+0x5dc>
 8007e2a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007e2e:	f7f8 fbeb 	bl	8000608 <__aeabi_dmul>
 8007e32:	2301      	movs	r3, #1
 8007e34:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007e38:	f109 0908 	add.w	r9, r9, #8
 8007e3c:	d1f2      	bne.n	8007e24 <_strtod_l+0x5cc>
 8007e3e:	b10b      	cbz	r3, 8007e44 <_strtod_l+0x5ec>
 8007e40:	4682      	mov	sl, r0
 8007e42:	468b      	mov	fp, r1
 8007e44:	9b04      	ldr	r3, [sp, #16]
 8007e46:	b1c3      	cbz	r3, 8007e7a <_strtod_l+0x622>
 8007e48:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007e4c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	4659      	mov	r1, fp
 8007e54:	dd11      	ble.n	8007e7a <_strtod_l+0x622>
 8007e56:	2b1f      	cmp	r3, #31
 8007e58:	f340 8124 	ble.w	80080a4 <_strtod_l+0x84c>
 8007e5c:	2b34      	cmp	r3, #52	; 0x34
 8007e5e:	bfde      	ittt	le
 8007e60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007e64:	f04f 33ff 	movle.w	r3, #4294967295
 8007e68:	fa03 f202 	lslle.w	r2, r3, r2
 8007e6c:	f04f 0a00 	mov.w	sl, #0
 8007e70:	bfcc      	ite	gt
 8007e72:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007e76:	ea02 0b01 	andle.w	fp, r2, r1
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	4650      	mov	r0, sl
 8007e80:	4659      	mov	r1, fp
 8007e82:	f7f8 fe29 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d1a2      	bne.n	8007dd0 <_strtod_l+0x578>
 8007e8a:	9b07      	ldr	r3, [sp, #28]
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	9908      	ldr	r1, [sp, #32]
 8007e90:	462b      	mov	r3, r5
 8007e92:	463a      	mov	r2, r7
 8007e94:	4620      	mov	r0, r4
 8007e96:	f001 fe2d 	bl	8009af4 <__s2b>
 8007e9a:	9007      	str	r0, [sp, #28]
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	f43f af1f 	beq.w	8007ce0 <_strtod_l+0x488>
 8007ea2:	9b05      	ldr	r3, [sp, #20]
 8007ea4:	1b9e      	subs	r6, r3, r6
 8007ea6:	9b06      	ldr	r3, [sp, #24]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	bfb4      	ite	lt
 8007eac:	4633      	movlt	r3, r6
 8007eae:	2300      	movge	r3, #0
 8007eb0:	930c      	str	r3, [sp, #48]	; 0x30
 8007eb2:	9b06      	ldr	r3, [sp, #24]
 8007eb4:	2500      	movs	r5, #0
 8007eb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007eba:	9312      	str	r3, [sp, #72]	; 0x48
 8007ebc:	462e      	mov	r6, r5
 8007ebe:	9b07      	ldr	r3, [sp, #28]
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	6859      	ldr	r1, [r3, #4]
 8007ec4:	f001 fd6e 	bl	80099a4 <_Balloc>
 8007ec8:	9005      	str	r0, [sp, #20]
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	f43f af0c 	beq.w	8007ce8 <_strtod_l+0x490>
 8007ed0:	9b07      	ldr	r3, [sp, #28]
 8007ed2:	691a      	ldr	r2, [r3, #16]
 8007ed4:	3202      	adds	r2, #2
 8007ed6:	f103 010c 	add.w	r1, r3, #12
 8007eda:	0092      	lsls	r2, r2, #2
 8007edc:	300c      	adds	r0, #12
 8007ede:	f001 fd53 	bl	8009988 <memcpy>
 8007ee2:	ec4b ab10 	vmov	d0, sl, fp
 8007ee6:	aa1a      	add	r2, sp, #104	; 0x68
 8007ee8:	a919      	add	r1, sp, #100	; 0x64
 8007eea:	4620      	mov	r0, r4
 8007eec:	f002 f948 	bl	800a180 <__d2b>
 8007ef0:	ec4b ab18 	vmov	d8, sl, fp
 8007ef4:	9018      	str	r0, [sp, #96]	; 0x60
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	f43f aef6 	beq.w	8007ce8 <_strtod_l+0x490>
 8007efc:	2101      	movs	r1, #1
 8007efe:	4620      	mov	r0, r4
 8007f00:	f001 fe92 	bl	8009c28 <__i2b>
 8007f04:	4606      	mov	r6, r0
 8007f06:	2800      	cmp	r0, #0
 8007f08:	f43f aeee 	beq.w	8007ce8 <_strtod_l+0x490>
 8007f0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f0e:	9904      	ldr	r1, [sp, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	bfab      	itete	ge
 8007f14:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007f16:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007f18:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007f1a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007f1e:	bfac      	ite	ge
 8007f20:	eb03 0902 	addge.w	r9, r3, r2
 8007f24:	1ad7      	sublt	r7, r2, r3
 8007f26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007f28:	eba3 0801 	sub.w	r8, r3, r1
 8007f2c:	4490      	add	r8, r2
 8007f2e:	4ba1      	ldr	r3, [pc, #644]	; (80081b4 <_strtod_l+0x95c>)
 8007f30:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f34:	4598      	cmp	r8, r3
 8007f36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007f3a:	f280 80c7 	bge.w	80080cc <_strtod_l+0x874>
 8007f3e:	eba3 0308 	sub.w	r3, r3, r8
 8007f42:	2b1f      	cmp	r3, #31
 8007f44:	eba2 0203 	sub.w	r2, r2, r3
 8007f48:	f04f 0101 	mov.w	r1, #1
 8007f4c:	f300 80b1 	bgt.w	80080b2 <_strtod_l+0x85a>
 8007f50:	fa01 f303 	lsl.w	r3, r1, r3
 8007f54:	930d      	str	r3, [sp, #52]	; 0x34
 8007f56:	2300      	movs	r3, #0
 8007f58:	9308      	str	r3, [sp, #32]
 8007f5a:	eb09 0802 	add.w	r8, r9, r2
 8007f5e:	9b04      	ldr	r3, [sp, #16]
 8007f60:	45c1      	cmp	r9, r8
 8007f62:	4417      	add	r7, r2
 8007f64:	441f      	add	r7, r3
 8007f66:	464b      	mov	r3, r9
 8007f68:	bfa8      	it	ge
 8007f6a:	4643      	movge	r3, r8
 8007f6c:	42bb      	cmp	r3, r7
 8007f6e:	bfa8      	it	ge
 8007f70:	463b      	movge	r3, r7
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	bfc2      	ittt	gt
 8007f76:	eba8 0803 	subgt.w	r8, r8, r3
 8007f7a:	1aff      	subgt	r7, r7, r3
 8007f7c:	eba9 0903 	subgt.w	r9, r9, r3
 8007f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	dd17      	ble.n	8007fb6 <_strtod_l+0x75e>
 8007f86:	4631      	mov	r1, r6
 8007f88:	461a      	mov	r2, r3
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f001 ff0c 	bl	8009da8 <__pow5mult>
 8007f90:	4606      	mov	r6, r0
 8007f92:	2800      	cmp	r0, #0
 8007f94:	f43f aea8 	beq.w	8007ce8 <_strtod_l+0x490>
 8007f98:	4601      	mov	r1, r0
 8007f9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f001 fe59 	bl	8009c54 <__multiply>
 8007fa2:	900b      	str	r0, [sp, #44]	; 0x2c
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	f43f ae9f 	beq.w	8007ce8 <_strtod_l+0x490>
 8007faa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007fac:	4620      	mov	r0, r4
 8007fae:	f001 fd39 	bl	8009a24 <_Bfree>
 8007fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fb4:	9318      	str	r3, [sp, #96]	; 0x60
 8007fb6:	f1b8 0f00 	cmp.w	r8, #0
 8007fba:	f300 808c 	bgt.w	80080d6 <_strtod_l+0x87e>
 8007fbe:	9b06      	ldr	r3, [sp, #24]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	dd08      	ble.n	8007fd6 <_strtod_l+0x77e>
 8007fc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fc6:	9905      	ldr	r1, [sp, #20]
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f001 feed 	bl	8009da8 <__pow5mult>
 8007fce:	9005      	str	r0, [sp, #20]
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	f43f ae89 	beq.w	8007ce8 <_strtod_l+0x490>
 8007fd6:	2f00      	cmp	r7, #0
 8007fd8:	dd08      	ble.n	8007fec <_strtod_l+0x794>
 8007fda:	9905      	ldr	r1, [sp, #20]
 8007fdc:	463a      	mov	r2, r7
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f001 ff3c 	bl	8009e5c <__lshift>
 8007fe4:	9005      	str	r0, [sp, #20]
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	f43f ae7e 	beq.w	8007ce8 <_strtod_l+0x490>
 8007fec:	f1b9 0f00 	cmp.w	r9, #0
 8007ff0:	dd08      	ble.n	8008004 <_strtod_l+0x7ac>
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	464a      	mov	r2, r9
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f001 ff30 	bl	8009e5c <__lshift>
 8007ffc:	4606      	mov	r6, r0
 8007ffe:	2800      	cmp	r0, #0
 8008000:	f43f ae72 	beq.w	8007ce8 <_strtod_l+0x490>
 8008004:	9a05      	ldr	r2, [sp, #20]
 8008006:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008008:	4620      	mov	r0, r4
 800800a:	f001 ffb3 	bl	8009f74 <__mdiff>
 800800e:	4605      	mov	r5, r0
 8008010:	2800      	cmp	r0, #0
 8008012:	f43f ae69 	beq.w	8007ce8 <_strtod_l+0x490>
 8008016:	68c3      	ldr	r3, [r0, #12]
 8008018:	930b      	str	r3, [sp, #44]	; 0x2c
 800801a:	2300      	movs	r3, #0
 800801c:	60c3      	str	r3, [r0, #12]
 800801e:	4631      	mov	r1, r6
 8008020:	f001 ff8c 	bl	8009f3c <__mcmp>
 8008024:	2800      	cmp	r0, #0
 8008026:	da60      	bge.n	80080ea <_strtod_l+0x892>
 8008028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800802a:	ea53 030a 	orrs.w	r3, r3, sl
 800802e:	f040 8082 	bne.w	8008136 <_strtod_l+0x8de>
 8008032:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008036:	2b00      	cmp	r3, #0
 8008038:	d17d      	bne.n	8008136 <_strtod_l+0x8de>
 800803a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800803e:	0d1b      	lsrs	r3, r3, #20
 8008040:	051b      	lsls	r3, r3, #20
 8008042:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008046:	d976      	bls.n	8008136 <_strtod_l+0x8de>
 8008048:	696b      	ldr	r3, [r5, #20]
 800804a:	b913      	cbnz	r3, 8008052 <_strtod_l+0x7fa>
 800804c:	692b      	ldr	r3, [r5, #16]
 800804e:	2b01      	cmp	r3, #1
 8008050:	dd71      	ble.n	8008136 <_strtod_l+0x8de>
 8008052:	4629      	mov	r1, r5
 8008054:	2201      	movs	r2, #1
 8008056:	4620      	mov	r0, r4
 8008058:	f001 ff00 	bl	8009e5c <__lshift>
 800805c:	4631      	mov	r1, r6
 800805e:	4605      	mov	r5, r0
 8008060:	f001 ff6c 	bl	8009f3c <__mcmp>
 8008064:	2800      	cmp	r0, #0
 8008066:	dd66      	ble.n	8008136 <_strtod_l+0x8de>
 8008068:	9904      	ldr	r1, [sp, #16]
 800806a:	4a53      	ldr	r2, [pc, #332]	; (80081b8 <_strtod_l+0x960>)
 800806c:	465b      	mov	r3, fp
 800806e:	2900      	cmp	r1, #0
 8008070:	f000 8081 	beq.w	8008176 <_strtod_l+0x91e>
 8008074:	ea02 010b 	and.w	r1, r2, fp
 8008078:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800807c:	dc7b      	bgt.n	8008176 <_strtod_l+0x91e>
 800807e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008082:	f77f aea9 	ble.w	8007dd8 <_strtod_l+0x580>
 8008086:	4b4d      	ldr	r3, [pc, #308]	; (80081bc <_strtod_l+0x964>)
 8008088:	4650      	mov	r0, sl
 800808a:	4659      	mov	r1, fp
 800808c:	2200      	movs	r2, #0
 800808e:	f7f8 fabb 	bl	8000608 <__aeabi_dmul>
 8008092:	460b      	mov	r3, r1
 8008094:	4303      	orrs	r3, r0
 8008096:	bf08      	it	eq
 8008098:	2322      	moveq	r3, #34	; 0x22
 800809a:	4682      	mov	sl, r0
 800809c:	468b      	mov	fp, r1
 800809e:	bf08      	it	eq
 80080a0:	6023      	streq	r3, [r4, #0]
 80080a2:	e62b      	b.n	8007cfc <_strtod_l+0x4a4>
 80080a4:	f04f 32ff 	mov.w	r2, #4294967295
 80080a8:	fa02 f303 	lsl.w	r3, r2, r3
 80080ac:	ea03 0a0a 	and.w	sl, r3, sl
 80080b0:	e6e3      	b.n	8007e7a <_strtod_l+0x622>
 80080b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80080b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80080ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80080be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80080c2:	fa01 f308 	lsl.w	r3, r1, r8
 80080c6:	9308      	str	r3, [sp, #32]
 80080c8:	910d      	str	r1, [sp, #52]	; 0x34
 80080ca:	e746      	b.n	8007f5a <_strtod_l+0x702>
 80080cc:	2300      	movs	r3, #0
 80080ce:	9308      	str	r3, [sp, #32]
 80080d0:	2301      	movs	r3, #1
 80080d2:	930d      	str	r3, [sp, #52]	; 0x34
 80080d4:	e741      	b.n	8007f5a <_strtod_l+0x702>
 80080d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80080d8:	4642      	mov	r2, r8
 80080da:	4620      	mov	r0, r4
 80080dc:	f001 febe 	bl	8009e5c <__lshift>
 80080e0:	9018      	str	r0, [sp, #96]	; 0x60
 80080e2:	2800      	cmp	r0, #0
 80080e4:	f47f af6b 	bne.w	8007fbe <_strtod_l+0x766>
 80080e8:	e5fe      	b.n	8007ce8 <_strtod_l+0x490>
 80080ea:	465f      	mov	r7, fp
 80080ec:	d16e      	bne.n	80081cc <_strtod_l+0x974>
 80080ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080f4:	b342      	cbz	r2, 8008148 <_strtod_l+0x8f0>
 80080f6:	4a32      	ldr	r2, [pc, #200]	; (80081c0 <_strtod_l+0x968>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d128      	bne.n	800814e <_strtod_l+0x8f6>
 80080fc:	9b04      	ldr	r3, [sp, #16]
 80080fe:	4651      	mov	r1, sl
 8008100:	b1eb      	cbz	r3, 800813e <_strtod_l+0x8e6>
 8008102:	4b2d      	ldr	r3, [pc, #180]	; (80081b8 <_strtod_l+0x960>)
 8008104:	403b      	ands	r3, r7
 8008106:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800810a:	f04f 32ff 	mov.w	r2, #4294967295
 800810e:	d819      	bhi.n	8008144 <_strtod_l+0x8ec>
 8008110:	0d1b      	lsrs	r3, r3, #20
 8008112:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008116:	fa02 f303 	lsl.w	r3, r2, r3
 800811a:	4299      	cmp	r1, r3
 800811c:	d117      	bne.n	800814e <_strtod_l+0x8f6>
 800811e:	4b29      	ldr	r3, [pc, #164]	; (80081c4 <_strtod_l+0x96c>)
 8008120:	429f      	cmp	r7, r3
 8008122:	d102      	bne.n	800812a <_strtod_l+0x8d2>
 8008124:	3101      	adds	r1, #1
 8008126:	f43f addf 	beq.w	8007ce8 <_strtod_l+0x490>
 800812a:	4b23      	ldr	r3, [pc, #140]	; (80081b8 <_strtod_l+0x960>)
 800812c:	403b      	ands	r3, r7
 800812e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008132:	f04f 0a00 	mov.w	sl, #0
 8008136:	9b04      	ldr	r3, [sp, #16]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1a4      	bne.n	8008086 <_strtod_l+0x82e>
 800813c:	e5de      	b.n	8007cfc <_strtod_l+0x4a4>
 800813e:	f04f 33ff 	mov.w	r3, #4294967295
 8008142:	e7ea      	b.n	800811a <_strtod_l+0x8c2>
 8008144:	4613      	mov	r3, r2
 8008146:	e7e8      	b.n	800811a <_strtod_l+0x8c2>
 8008148:	ea53 030a 	orrs.w	r3, r3, sl
 800814c:	d08c      	beq.n	8008068 <_strtod_l+0x810>
 800814e:	9b08      	ldr	r3, [sp, #32]
 8008150:	b1db      	cbz	r3, 800818a <_strtod_l+0x932>
 8008152:	423b      	tst	r3, r7
 8008154:	d0ef      	beq.n	8008136 <_strtod_l+0x8de>
 8008156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008158:	9a04      	ldr	r2, [sp, #16]
 800815a:	4650      	mov	r0, sl
 800815c:	4659      	mov	r1, fp
 800815e:	b1c3      	cbz	r3, 8008192 <_strtod_l+0x93a>
 8008160:	f7ff fb5c 	bl	800781c <sulp>
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	ec51 0b18 	vmov	r0, r1, d8
 800816c:	f7f8 f896 	bl	800029c <__adddf3>
 8008170:	4682      	mov	sl, r0
 8008172:	468b      	mov	fp, r1
 8008174:	e7df      	b.n	8008136 <_strtod_l+0x8de>
 8008176:	4013      	ands	r3, r2
 8008178:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800817c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008180:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008184:	f04f 3aff 	mov.w	sl, #4294967295
 8008188:	e7d5      	b.n	8008136 <_strtod_l+0x8de>
 800818a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800818c:	ea13 0f0a 	tst.w	r3, sl
 8008190:	e7e0      	b.n	8008154 <_strtod_l+0x8fc>
 8008192:	f7ff fb43 	bl	800781c <sulp>
 8008196:	4602      	mov	r2, r0
 8008198:	460b      	mov	r3, r1
 800819a:	ec51 0b18 	vmov	r0, r1, d8
 800819e:	f7f8 f87b 	bl	8000298 <__aeabi_dsub>
 80081a2:	2200      	movs	r2, #0
 80081a4:	2300      	movs	r3, #0
 80081a6:	4682      	mov	sl, r0
 80081a8:	468b      	mov	fp, r1
 80081aa:	f7f8 fc95 	bl	8000ad8 <__aeabi_dcmpeq>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d0c1      	beq.n	8008136 <_strtod_l+0x8de>
 80081b2:	e611      	b.n	8007dd8 <_strtod_l+0x580>
 80081b4:	fffffc02 	.word	0xfffffc02
 80081b8:	7ff00000 	.word	0x7ff00000
 80081bc:	39500000 	.word	0x39500000
 80081c0:	000fffff 	.word	0x000fffff
 80081c4:	7fefffff 	.word	0x7fefffff
 80081c8:	0800b4d0 	.word	0x0800b4d0
 80081cc:	4631      	mov	r1, r6
 80081ce:	4628      	mov	r0, r5
 80081d0:	f002 f832 	bl	800a238 <__ratio>
 80081d4:	ec59 8b10 	vmov	r8, r9, d0
 80081d8:	ee10 0a10 	vmov	r0, s0
 80081dc:	2200      	movs	r2, #0
 80081de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081e2:	4649      	mov	r1, r9
 80081e4:	f7f8 fc8c 	bl	8000b00 <__aeabi_dcmple>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	d07a      	beq.n	80082e2 <_strtod_l+0xa8a>
 80081ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d04a      	beq.n	8008288 <_strtod_l+0xa30>
 80081f2:	4b95      	ldr	r3, [pc, #596]	; (8008448 <_strtod_l+0xbf0>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80081fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008448 <_strtod_l+0xbf0>
 80081fe:	f04f 0800 	mov.w	r8, #0
 8008202:	4b92      	ldr	r3, [pc, #584]	; (800844c <_strtod_l+0xbf4>)
 8008204:	403b      	ands	r3, r7
 8008206:	930d      	str	r3, [sp, #52]	; 0x34
 8008208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800820a:	4b91      	ldr	r3, [pc, #580]	; (8008450 <_strtod_l+0xbf8>)
 800820c:	429a      	cmp	r2, r3
 800820e:	f040 80b0 	bne.w	8008372 <_strtod_l+0xb1a>
 8008212:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008216:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800821a:	ec4b ab10 	vmov	d0, sl, fp
 800821e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008222:	f001 ff31 	bl	800a088 <__ulp>
 8008226:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800822a:	ec53 2b10 	vmov	r2, r3, d0
 800822e:	f7f8 f9eb 	bl	8000608 <__aeabi_dmul>
 8008232:	4652      	mov	r2, sl
 8008234:	465b      	mov	r3, fp
 8008236:	f7f8 f831 	bl	800029c <__adddf3>
 800823a:	460b      	mov	r3, r1
 800823c:	4983      	ldr	r1, [pc, #524]	; (800844c <_strtod_l+0xbf4>)
 800823e:	4a85      	ldr	r2, [pc, #532]	; (8008454 <_strtod_l+0xbfc>)
 8008240:	4019      	ands	r1, r3
 8008242:	4291      	cmp	r1, r2
 8008244:	4682      	mov	sl, r0
 8008246:	d960      	bls.n	800830a <_strtod_l+0xab2>
 8008248:	ee18 3a90 	vmov	r3, s17
 800824c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008250:	4293      	cmp	r3, r2
 8008252:	d104      	bne.n	800825e <_strtod_l+0xa06>
 8008254:	ee18 3a10 	vmov	r3, s16
 8008258:	3301      	adds	r3, #1
 800825a:	f43f ad45 	beq.w	8007ce8 <_strtod_l+0x490>
 800825e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008460 <_strtod_l+0xc08>
 8008262:	f04f 3aff 	mov.w	sl, #4294967295
 8008266:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008268:	4620      	mov	r0, r4
 800826a:	f001 fbdb 	bl	8009a24 <_Bfree>
 800826e:	9905      	ldr	r1, [sp, #20]
 8008270:	4620      	mov	r0, r4
 8008272:	f001 fbd7 	bl	8009a24 <_Bfree>
 8008276:	4631      	mov	r1, r6
 8008278:	4620      	mov	r0, r4
 800827a:	f001 fbd3 	bl	8009a24 <_Bfree>
 800827e:	4629      	mov	r1, r5
 8008280:	4620      	mov	r0, r4
 8008282:	f001 fbcf 	bl	8009a24 <_Bfree>
 8008286:	e61a      	b.n	8007ebe <_strtod_l+0x666>
 8008288:	f1ba 0f00 	cmp.w	sl, #0
 800828c:	d11b      	bne.n	80082c6 <_strtod_l+0xa6e>
 800828e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008292:	b9f3      	cbnz	r3, 80082d2 <_strtod_l+0xa7a>
 8008294:	4b6c      	ldr	r3, [pc, #432]	; (8008448 <_strtod_l+0xbf0>)
 8008296:	2200      	movs	r2, #0
 8008298:	4640      	mov	r0, r8
 800829a:	4649      	mov	r1, r9
 800829c:	f7f8 fc26 	bl	8000aec <__aeabi_dcmplt>
 80082a0:	b9d0      	cbnz	r0, 80082d8 <_strtod_l+0xa80>
 80082a2:	4640      	mov	r0, r8
 80082a4:	4649      	mov	r1, r9
 80082a6:	4b6c      	ldr	r3, [pc, #432]	; (8008458 <_strtod_l+0xc00>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	f7f8 f9ad 	bl	8000608 <__aeabi_dmul>
 80082ae:	4680      	mov	r8, r0
 80082b0:	4689      	mov	r9, r1
 80082b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80082b6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80082ba:	9315      	str	r3, [sp, #84]	; 0x54
 80082bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80082c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80082c4:	e79d      	b.n	8008202 <_strtod_l+0x9aa>
 80082c6:	f1ba 0f01 	cmp.w	sl, #1
 80082ca:	d102      	bne.n	80082d2 <_strtod_l+0xa7a>
 80082cc:	2f00      	cmp	r7, #0
 80082ce:	f43f ad83 	beq.w	8007dd8 <_strtod_l+0x580>
 80082d2:	4b62      	ldr	r3, [pc, #392]	; (800845c <_strtod_l+0xc04>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	e78e      	b.n	80081f6 <_strtod_l+0x99e>
 80082d8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008458 <_strtod_l+0xc00>
 80082dc:	f04f 0800 	mov.w	r8, #0
 80082e0:	e7e7      	b.n	80082b2 <_strtod_l+0xa5a>
 80082e2:	4b5d      	ldr	r3, [pc, #372]	; (8008458 <_strtod_l+0xc00>)
 80082e4:	4640      	mov	r0, r8
 80082e6:	4649      	mov	r1, r9
 80082e8:	2200      	movs	r2, #0
 80082ea:	f7f8 f98d 	bl	8000608 <__aeabi_dmul>
 80082ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082f0:	4680      	mov	r8, r0
 80082f2:	4689      	mov	r9, r1
 80082f4:	b933      	cbnz	r3, 8008304 <_strtod_l+0xaac>
 80082f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082fa:	900e      	str	r0, [sp, #56]	; 0x38
 80082fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80082fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008302:	e7dd      	b.n	80082c0 <_strtod_l+0xa68>
 8008304:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008308:	e7f9      	b.n	80082fe <_strtod_l+0xaa6>
 800830a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800830e:	9b04      	ldr	r3, [sp, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1a8      	bne.n	8008266 <_strtod_l+0xa0e>
 8008314:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008318:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800831a:	0d1b      	lsrs	r3, r3, #20
 800831c:	051b      	lsls	r3, r3, #20
 800831e:	429a      	cmp	r2, r3
 8008320:	d1a1      	bne.n	8008266 <_strtod_l+0xa0e>
 8008322:	4640      	mov	r0, r8
 8008324:	4649      	mov	r1, r9
 8008326:	f7f8 fcb7 	bl	8000c98 <__aeabi_d2lz>
 800832a:	f7f8 f93f 	bl	80005ac <__aeabi_l2d>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4640      	mov	r0, r8
 8008334:	4649      	mov	r1, r9
 8008336:	f7f7 ffaf 	bl	8000298 <__aeabi_dsub>
 800833a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800833c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008340:	ea43 030a 	orr.w	r3, r3, sl
 8008344:	4313      	orrs	r3, r2
 8008346:	4680      	mov	r8, r0
 8008348:	4689      	mov	r9, r1
 800834a:	d055      	beq.n	80083f8 <_strtod_l+0xba0>
 800834c:	a336      	add	r3, pc, #216	; (adr r3, 8008428 <_strtod_l+0xbd0>)
 800834e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008352:	f7f8 fbcb 	bl	8000aec <__aeabi_dcmplt>
 8008356:	2800      	cmp	r0, #0
 8008358:	f47f acd0 	bne.w	8007cfc <_strtod_l+0x4a4>
 800835c:	a334      	add	r3, pc, #208	; (adr r3, 8008430 <_strtod_l+0xbd8>)
 800835e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008362:	4640      	mov	r0, r8
 8008364:	4649      	mov	r1, r9
 8008366:	f7f8 fbdf 	bl	8000b28 <__aeabi_dcmpgt>
 800836a:	2800      	cmp	r0, #0
 800836c:	f43f af7b 	beq.w	8008266 <_strtod_l+0xa0e>
 8008370:	e4c4      	b.n	8007cfc <_strtod_l+0x4a4>
 8008372:	9b04      	ldr	r3, [sp, #16]
 8008374:	b333      	cbz	r3, 80083c4 <_strtod_l+0xb6c>
 8008376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008378:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800837c:	d822      	bhi.n	80083c4 <_strtod_l+0xb6c>
 800837e:	a32e      	add	r3, pc, #184	; (adr r3, 8008438 <_strtod_l+0xbe0>)
 8008380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008384:	4640      	mov	r0, r8
 8008386:	4649      	mov	r1, r9
 8008388:	f7f8 fbba 	bl	8000b00 <__aeabi_dcmple>
 800838c:	b1a0      	cbz	r0, 80083b8 <_strtod_l+0xb60>
 800838e:	4649      	mov	r1, r9
 8008390:	4640      	mov	r0, r8
 8008392:	f7f8 fc11 	bl	8000bb8 <__aeabi_d2uiz>
 8008396:	2801      	cmp	r0, #1
 8008398:	bf38      	it	cc
 800839a:	2001      	movcc	r0, #1
 800839c:	f7f8 f8ba 	bl	8000514 <__aeabi_ui2d>
 80083a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083a2:	4680      	mov	r8, r0
 80083a4:	4689      	mov	r9, r1
 80083a6:	bb23      	cbnz	r3, 80083f2 <_strtod_l+0xb9a>
 80083a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083ac:	9010      	str	r0, [sp, #64]	; 0x40
 80083ae:	9311      	str	r3, [sp, #68]	; 0x44
 80083b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80083b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083bc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80083c0:	1a9b      	subs	r3, r3, r2
 80083c2:	9309      	str	r3, [sp, #36]	; 0x24
 80083c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083c8:	eeb0 0a48 	vmov.f32	s0, s16
 80083cc:	eef0 0a68 	vmov.f32	s1, s17
 80083d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80083d4:	f001 fe58 	bl	800a088 <__ulp>
 80083d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083dc:	ec53 2b10 	vmov	r2, r3, d0
 80083e0:	f7f8 f912 	bl	8000608 <__aeabi_dmul>
 80083e4:	ec53 2b18 	vmov	r2, r3, d8
 80083e8:	f7f7 ff58 	bl	800029c <__adddf3>
 80083ec:	4682      	mov	sl, r0
 80083ee:	468b      	mov	fp, r1
 80083f0:	e78d      	b.n	800830e <_strtod_l+0xab6>
 80083f2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80083f6:	e7db      	b.n	80083b0 <_strtod_l+0xb58>
 80083f8:	a311      	add	r3, pc, #68	; (adr r3, 8008440 <_strtod_l+0xbe8>)
 80083fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fe:	f7f8 fb75 	bl	8000aec <__aeabi_dcmplt>
 8008402:	e7b2      	b.n	800836a <_strtod_l+0xb12>
 8008404:	2300      	movs	r3, #0
 8008406:	930a      	str	r3, [sp, #40]	; 0x28
 8008408:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800840a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800840c:	6013      	str	r3, [r2, #0]
 800840e:	f7ff ba6b 	b.w	80078e8 <_strtod_l+0x90>
 8008412:	2a65      	cmp	r2, #101	; 0x65
 8008414:	f43f ab5f 	beq.w	8007ad6 <_strtod_l+0x27e>
 8008418:	2a45      	cmp	r2, #69	; 0x45
 800841a:	f43f ab5c 	beq.w	8007ad6 <_strtod_l+0x27e>
 800841e:	2301      	movs	r3, #1
 8008420:	f7ff bb94 	b.w	8007b4c <_strtod_l+0x2f4>
 8008424:	f3af 8000 	nop.w
 8008428:	94a03595 	.word	0x94a03595
 800842c:	3fdfffff 	.word	0x3fdfffff
 8008430:	35afe535 	.word	0x35afe535
 8008434:	3fe00000 	.word	0x3fe00000
 8008438:	ffc00000 	.word	0xffc00000
 800843c:	41dfffff 	.word	0x41dfffff
 8008440:	94a03595 	.word	0x94a03595
 8008444:	3fcfffff 	.word	0x3fcfffff
 8008448:	3ff00000 	.word	0x3ff00000
 800844c:	7ff00000 	.word	0x7ff00000
 8008450:	7fe00000 	.word	0x7fe00000
 8008454:	7c9fffff 	.word	0x7c9fffff
 8008458:	3fe00000 	.word	0x3fe00000
 800845c:	bff00000 	.word	0xbff00000
 8008460:	7fefffff 	.word	0x7fefffff

08008464 <_strtod_r>:
 8008464:	4b01      	ldr	r3, [pc, #4]	; (800846c <_strtod_r+0x8>)
 8008466:	f7ff b9f7 	b.w	8007858 <_strtod_l>
 800846a:	bf00      	nop
 800846c:	20000074 	.word	0x20000074

08008470 <_strtol_l.constprop.0>:
 8008470:	2b01      	cmp	r3, #1
 8008472:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008476:	d001      	beq.n	800847c <_strtol_l.constprop.0+0xc>
 8008478:	2b24      	cmp	r3, #36	; 0x24
 800847a:	d906      	bls.n	800848a <_strtol_l.constprop.0+0x1a>
 800847c:	f7fe fae8 	bl	8006a50 <__errno>
 8008480:	2316      	movs	r3, #22
 8008482:	6003      	str	r3, [r0, #0]
 8008484:	2000      	movs	r0, #0
 8008486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800848a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008570 <_strtol_l.constprop.0+0x100>
 800848e:	460d      	mov	r5, r1
 8008490:	462e      	mov	r6, r5
 8008492:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008496:	f814 700c 	ldrb.w	r7, [r4, ip]
 800849a:	f017 0708 	ands.w	r7, r7, #8
 800849e:	d1f7      	bne.n	8008490 <_strtol_l.constprop.0+0x20>
 80084a0:	2c2d      	cmp	r4, #45	; 0x2d
 80084a2:	d132      	bne.n	800850a <_strtol_l.constprop.0+0x9a>
 80084a4:	782c      	ldrb	r4, [r5, #0]
 80084a6:	2701      	movs	r7, #1
 80084a8:	1cb5      	adds	r5, r6, #2
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d05b      	beq.n	8008566 <_strtol_l.constprop.0+0xf6>
 80084ae:	2b10      	cmp	r3, #16
 80084b0:	d109      	bne.n	80084c6 <_strtol_l.constprop.0+0x56>
 80084b2:	2c30      	cmp	r4, #48	; 0x30
 80084b4:	d107      	bne.n	80084c6 <_strtol_l.constprop.0+0x56>
 80084b6:	782c      	ldrb	r4, [r5, #0]
 80084b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80084bc:	2c58      	cmp	r4, #88	; 0x58
 80084be:	d14d      	bne.n	800855c <_strtol_l.constprop.0+0xec>
 80084c0:	786c      	ldrb	r4, [r5, #1]
 80084c2:	2310      	movs	r3, #16
 80084c4:	3502      	adds	r5, #2
 80084c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80084ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80084ce:	f04f 0c00 	mov.w	ip, #0
 80084d2:	fbb8 f9f3 	udiv	r9, r8, r3
 80084d6:	4666      	mov	r6, ip
 80084d8:	fb03 8a19 	mls	sl, r3, r9, r8
 80084dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80084e0:	f1be 0f09 	cmp.w	lr, #9
 80084e4:	d816      	bhi.n	8008514 <_strtol_l.constprop.0+0xa4>
 80084e6:	4674      	mov	r4, lr
 80084e8:	42a3      	cmp	r3, r4
 80084ea:	dd24      	ble.n	8008536 <_strtol_l.constprop.0+0xc6>
 80084ec:	f1bc 0f00 	cmp.w	ip, #0
 80084f0:	db1e      	blt.n	8008530 <_strtol_l.constprop.0+0xc0>
 80084f2:	45b1      	cmp	r9, r6
 80084f4:	d31c      	bcc.n	8008530 <_strtol_l.constprop.0+0xc0>
 80084f6:	d101      	bne.n	80084fc <_strtol_l.constprop.0+0x8c>
 80084f8:	45a2      	cmp	sl, r4
 80084fa:	db19      	blt.n	8008530 <_strtol_l.constprop.0+0xc0>
 80084fc:	fb06 4603 	mla	r6, r6, r3, r4
 8008500:	f04f 0c01 	mov.w	ip, #1
 8008504:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008508:	e7e8      	b.n	80084dc <_strtol_l.constprop.0+0x6c>
 800850a:	2c2b      	cmp	r4, #43	; 0x2b
 800850c:	bf04      	itt	eq
 800850e:	782c      	ldrbeq	r4, [r5, #0]
 8008510:	1cb5      	addeq	r5, r6, #2
 8008512:	e7ca      	b.n	80084aa <_strtol_l.constprop.0+0x3a>
 8008514:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008518:	f1be 0f19 	cmp.w	lr, #25
 800851c:	d801      	bhi.n	8008522 <_strtol_l.constprop.0+0xb2>
 800851e:	3c37      	subs	r4, #55	; 0x37
 8008520:	e7e2      	b.n	80084e8 <_strtol_l.constprop.0+0x78>
 8008522:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008526:	f1be 0f19 	cmp.w	lr, #25
 800852a:	d804      	bhi.n	8008536 <_strtol_l.constprop.0+0xc6>
 800852c:	3c57      	subs	r4, #87	; 0x57
 800852e:	e7db      	b.n	80084e8 <_strtol_l.constprop.0+0x78>
 8008530:	f04f 3cff 	mov.w	ip, #4294967295
 8008534:	e7e6      	b.n	8008504 <_strtol_l.constprop.0+0x94>
 8008536:	f1bc 0f00 	cmp.w	ip, #0
 800853a:	da05      	bge.n	8008548 <_strtol_l.constprop.0+0xd8>
 800853c:	2322      	movs	r3, #34	; 0x22
 800853e:	6003      	str	r3, [r0, #0]
 8008540:	4646      	mov	r6, r8
 8008542:	b942      	cbnz	r2, 8008556 <_strtol_l.constprop.0+0xe6>
 8008544:	4630      	mov	r0, r6
 8008546:	e79e      	b.n	8008486 <_strtol_l.constprop.0+0x16>
 8008548:	b107      	cbz	r7, 800854c <_strtol_l.constprop.0+0xdc>
 800854a:	4276      	negs	r6, r6
 800854c:	2a00      	cmp	r2, #0
 800854e:	d0f9      	beq.n	8008544 <_strtol_l.constprop.0+0xd4>
 8008550:	f1bc 0f00 	cmp.w	ip, #0
 8008554:	d000      	beq.n	8008558 <_strtol_l.constprop.0+0xe8>
 8008556:	1e69      	subs	r1, r5, #1
 8008558:	6011      	str	r1, [r2, #0]
 800855a:	e7f3      	b.n	8008544 <_strtol_l.constprop.0+0xd4>
 800855c:	2430      	movs	r4, #48	; 0x30
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1b1      	bne.n	80084c6 <_strtol_l.constprop.0+0x56>
 8008562:	2308      	movs	r3, #8
 8008564:	e7af      	b.n	80084c6 <_strtol_l.constprop.0+0x56>
 8008566:	2c30      	cmp	r4, #48	; 0x30
 8008568:	d0a5      	beq.n	80084b6 <_strtol_l.constprop.0+0x46>
 800856a:	230a      	movs	r3, #10
 800856c:	e7ab      	b.n	80084c6 <_strtol_l.constprop.0+0x56>
 800856e:	bf00      	nop
 8008570:	0800b4f9 	.word	0x0800b4f9

08008574 <_strtol_r>:
 8008574:	f7ff bf7c 	b.w	8008470 <_strtol_l.constprop.0>

08008578 <quorem>:
 8008578:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857c:	6903      	ldr	r3, [r0, #16]
 800857e:	690c      	ldr	r4, [r1, #16]
 8008580:	42a3      	cmp	r3, r4
 8008582:	4607      	mov	r7, r0
 8008584:	f2c0 8081 	blt.w	800868a <quorem+0x112>
 8008588:	3c01      	subs	r4, #1
 800858a:	f101 0814 	add.w	r8, r1, #20
 800858e:	f100 0514 	add.w	r5, r0, #20
 8008592:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008596:	9301      	str	r3, [sp, #4]
 8008598:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800859c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085a0:	3301      	adds	r3, #1
 80085a2:	429a      	cmp	r2, r3
 80085a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80085a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80085b0:	d331      	bcc.n	8008616 <quorem+0x9e>
 80085b2:	f04f 0e00 	mov.w	lr, #0
 80085b6:	4640      	mov	r0, r8
 80085b8:	46ac      	mov	ip, r5
 80085ba:	46f2      	mov	sl, lr
 80085bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80085c0:	b293      	uxth	r3, r2
 80085c2:	fb06 e303 	mla	r3, r6, r3, lr
 80085c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	ebaa 0303 	sub.w	r3, sl, r3
 80085d0:	f8dc a000 	ldr.w	sl, [ip]
 80085d4:	0c12      	lsrs	r2, r2, #16
 80085d6:	fa13 f38a 	uxtah	r3, r3, sl
 80085da:	fb06 e202 	mla	r2, r6, r2, lr
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	9b00      	ldr	r3, [sp, #0]
 80085e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80085e6:	b292      	uxth	r2, r2
 80085e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80085ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80085f4:	4581      	cmp	r9, r0
 80085f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085fa:	f84c 3b04 	str.w	r3, [ip], #4
 80085fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008602:	d2db      	bcs.n	80085bc <quorem+0x44>
 8008604:	f855 300b 	ldr.w	r3, [r5, fp]
 8008608:	b92b      	cbnz	r3, 8008616 <quorem+0x9e>
 800860a:	9b01      	ldr	r3, [sp, #4]
 800860c:	3b04      	subs	r3, #4
 800860e:	429d      	cmp	r5, r3
 8008610:	461a      	mov	r2, r3
 8008612:	d32e      	bcc.n	8008672 <quorem+0xfa>
 8008614:	613c      	str	r4, [r7, #16]
 8008616:	4638      	mov	r0, r7
 8008618:	f001 fc90 	bl	8009f3c <__mcmp>
 800861c:	2800      	cmp	r0, #0
 800861e:	db24      	blt.n	800866a <quorem+0xf2>
 8008620:	3601      	adds	r6, #1
 8008622:	4628      	mov	r0, r5
 8008624:	f04f 0c00 	mov.w	ip, #0
 8008628:	f858 2b04 	ldr.w	r2, [r8], #4
 800862c:	f8d0 e000 	ldr.w	lr, [r0]
 8008630:	b293      	uxth	r3, r2
 8008632:	ebac 0303 	sub.w	r3, ip, r3
 8008636:	0c12      	lsrs	r2, r2, #16
 8008638:	fa13 f38e 	uxtah	r3, r3, lr
 800863c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008640:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008644:	b29b      	uxth	r3, r3
 8008646:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800864a:	45c1      	cmp	r9, r8
 800864c:	f840 3b04 	str.w	r3, [r0], #4
 8008650:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008654:	d2e8      	bcs.n	8008628 <quorem+0xb0>
 8008656:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800865a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800865e:	b922      	cbnz	r2, 800866a <quorem+0xf2>
 8008660:	3b04      	subs	r3, #4
 8008662:	429d      	cmp	r5, r3
 8008664:	461a      	mov	r2, r3
 8008666:	d30a      	bcc.n	800867e <quorem+0x106>
 8008668:	613c      	str	r4, [r7, #16]
 800866a:	4630      	mov	r0, r6
 800866c:	b003      	add	sp, #12
 800866e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008672:	6812      	ldr	r2, [r2, #0]
 8008674:	3b04      	subs	r3, #4
 8008676:	2a00      	cmp	r2, #0
 8008678:	d1cc      	bne.n	8008614 <quorem+0x9c>
 800867a:	3c01      	subs	r4, #1
 800867c:	e7c7      	b.n	800860e <quorem+0x96>
 800867e:	6812      	ldr	r2, [r2, #0]
 8008680:	3b04      	subs	r3, #4
 8008682:	2a00      	cmp	r2, #0
 8008684:	d1f0      	bne.n	8008668 <quorem+0xf0>
 8008686:	3c01      	subs	r4, #1
 8008688:	e7eb      	b.n	8008662 <quorem+0xea>
 800868a:	2000      	movs	r0, #0
 800868c:	e7ee      	b.n	800866c <quorem+0xf4>
	...

08008690 <_dtoa_r>:
 8008690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008694:	ed2d 8b04 	vpush	{d8-d9}
 8008698:	ec57 6b10 	vmov	r6, r7, d0
 800869c:	b093      	sub	sp, #76	; 0x4c
 800869e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80086a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80086a4:	9106      	str	r1, [sp, #24]
 80086a6:	ee10 aa10 	vmov	sl, s0
 80086aa:	4604      	mov	r4, r0
 80086ac:	9209      	str	r2, [sp, #36]	; 0x24
 80086ae:	930c      	str	r3, [sp, #48]	; 0x30
 80086b0:	46bb      	mov	fp, r7
 80086b2:	b975      	cbnz	r5, 80086d2 <_dtoa_r+0x42>
 80086b4:	2010      	movs	r0, #16
 80086b6:	f001 f94d 	bl	8009954 <malloc>
 80086ba:	4602      	mov	r2, r0
 80086bc:	6260      	str	r0, [r4, #36]	; 0x24
 80086be:	b920      	cbnz	r0, 80086ca <_dtoa_r+0x3a>
 80086c0:	4ba7      	ldr	r3, [pc, #668]	; (8008960 <_dtoa_r+0x2d0>)
 80086c2:	21ea      	movs	r1, #234	; 0xea
 80086c4:	48a7      	ldr	r0, [pc, #668]	; (8008964 <_dtoa_r+0x2d4>)
 80086c6:	f002 f8a9 	bl	800a81c <__assert_func>
 80086ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80086ce:	6005      	str	r5, [r0, #0]
 80086d0:	60c5      	str	r5, [r0, #12]
 80086d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086d4:	6819      	ldr	r1, [r3, #0]
 80086d6:	b151      	cbz	r1, 80086ee <_dtoa_r+0x5e>
 80086d8:	685a      	ldr	r2, [r3, #4]
 80086da:	604a      	str	r2, [r1, #4]
 80086dc:	2301      	movs	r3, #1
 80086de:	4093      	lsls	r3, r2
 80086e0:	608b      	str	r3, [r1, #8]
 80086e2:	4620      	mov	r0, r4
 80086e4:	f001 f99e 	bl	8009a24 <_Bfree>
 80086e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086ea:	2200      	movs	r2, #0
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	1e3b      	subs	r3, r7, #0
 80086f0:	bfaa      	itet	ge
 80086f2:	2300      	movge	r3, #0
 80086f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80086f8:	f8c8 3000 	strge.w	r3, [r8]
 80086fc:	4b9a      	ldr	r3, [pc, #616]	; (8008968 <_dtoa_r+0x2d8>)
 80086fe:	bfbc      	itt	lt
 8008700:	2201      	movlt	r2, #1
 8008702:	f8c8 2000 	strlt.w	r2, [r8]
 8008706:	ea33 030b 	bics.w	r3, r3, fp
 800870a:	d11b      	bne.n	8008744 <_dtoa_r+0xb4>
 800870c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800870e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008712:	6013      	str	r3, [r2, #0]
 8008714:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008718:	4333      	orrs	r3, r6
 800871a:	f000 8592 	beq.w	8009242 <_dtoa_r+0xbb2>
 800871e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008720:	b963      	cbnz	r3, 800873c <_dtoa_r+0xac>
 8008722:	4b92      	ldr	r3, [pc, #584]	; (800896c <_dtoa_r+0x2dc>)
 8008724:	e022      	b.n	800876c <_dtoa_r+0xdc>
 8008726:	4b92      	ldr	r3, [pc, #584]	; (8008970 <_dtoa_r+0x2e0>)
 8008728:	9301      	str	r3, [sp, #4]
 800872a:	3308      	adds	r3, #8
 800872c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800872e:	6013      	str	r3, [r2, #0]
 8008730:	9801      	ldr	r0, [sp, #4]
 8008732:	b013      	add	sp, #76	; 0x4c
 8008734:	ecbd 8b04 	vpop	{d8-d9}
 8008738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800873c:	4b8b      	ldr	r3, [pc, #556]	; (800896c <_dtoa_r+0x2dc>)
 800873e:	9301      	str	r3, [sp, #4]
 8008740:	3303      	adds	r3, #3
 8008742:	e7f3      	b.n	800872c <_dtoa_r+0x9c>
 8008744:	2200      	movs	r2, #0
 8008746:	2300      	movs	r3, #0
 8008748:	4650      	mov	r0, sl
 800874a:	4659      	mov	r1, fp
 800874c:	f7f8 f9c4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008750:	ec4b ab19 	vmov	d9, sl, fp
 8008754:	4680      	mov	r8, r0
 8008756:	b158      	cbz	r0, 8008770 <_dtoa_r+0xe0>
 8008758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800875a:	2301      	movs	r3, #1
 800875c:	6013      	str	r3, [r2, #0]
 800875e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 856b 	beq.w	800923c <_dtoa_r+0xbac>
 8008766:	4883      	ldr	r0, [pc, #524]	; (8008974 <_dtoa_r+0x2e4>)
 8008768:	6018      	str	r0, [r3, #0]
 800876a:	1e43      	subs	r3, r0, #1
 800876c:	9301      	str	r3, [sp, #4]
 800876e:	e7df      	b.n	8008730 <_dtoa_r+0xa0>
 8008770:	ec4b ab10 	vmov	d0, sl, fp
 8008774:	aa10      	add	r2, sp, #64	; 0x40
 8008776:	a911      	add	r1, sp, #68	; 0x44
 8008778:	4620      	mov	r0, r4
 800877a:	f001 fd01 	bl	800a180 <__d2b>
 800877e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008782:	ee08 0a10 	vmov	s16, r0
 8008786:	2d00      	cmp	r5, #0
 8008788:	f000 8084 	beq.w	8008894 <_dtoa_r+0x204>
 800878c:	ee19 3a90 	vmov	r3, s19
 8008790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008794:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008798:	4656      	mov	r6, sl
 800879a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800879e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80087a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80087a6:	4b74      	ldr	r3, [pc, #464]	; (8008978 <_dtoa_r+0x2e8>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	4630      	mov	r0, r6
 80087ac:	4639      	mov	r1, r7
 80087ae:	f7f7 fd73 	bl	8000298 <__aeabi_dsub>
 80087b2:	a365      	add	r3, pc, #404	; (adr r3, 8008948 <_dtoa_r+0x2b8>)
 80087b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b8:	f7f7 ff26 	bl	8000608 <__aeabi_dmul>
 80087bc:	a364      	add	r3, pc, #400	; (adr r3, 8008950 <_dtoa_r+0x2c0>)
 80087be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c2:	f7f7 fd6b 	bl	800029c <__adddf3>
 80087c6:	4606      	mov	r6, r0
 80087c8:	4628      	mov	r0, r5
 80087ca:	460f      	mov	r7, r1
 80087cc:	f7f7 feb2 	bl	8000534 <__aeabi_i2d>
 80087d0:	a361      	add	r3, pc, #388	; (adr r3, 8008958 <_dtoa_r+0x2c8>)
 80087d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d6:	f7f7 ff17 	bl	8000608 <__aeabi_dmul>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	4630      	mov	r0, r6
 80087e0:	4639      	mov	r1, r7
 80087e2:	f7f7 fd5b 	bl	800029c <__adddf3>
 80087e6:	4606      	mov	r6, r0
 80087e8:	460f      	mov	r7, r1
 80087ea:	f7f8 f9bd 	bl	8000b68 <__aeabi_d2iz>
 80087ee:	2200      	movs	r2, #0
 80087f0:	9000      	str	r0, [sp, #0]
 80087f2:	2300      	movs	r3, #0
 80087f4:	4630      	mov	r0, r6
 80087f6:	4639      	mov	r1, r7
 80087f8:	f7f8 f978 	bl	8000aec <__aeabi_dcmplt>
 80087fc:	b150      	cbz	r0, 8008814 <_dtoa_r+0x184>
 80087fe:	9800      	ldr	r0, [sp, #0]
 8008800:	f7f7 fe98 	bl	8000534 <__aeabi_i2d>
 8008804:	4632      	mov	r2, r6
 8008806:	463b      	mov	r3, r7
 8008808:	f7f8 f966 	bl	8000ad8 <__aeabi_dcmpeq>
 800880c:	b910      	cbnz	r0, 8008814 <_dtoa_r+0x184>
 800880e:	9b00      	ldr	r3, [sp, #0]
 8008810:	3b01      	subs	r3, #1
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	9b00      	ldr	r3, [sp, #0]
 8008816:	2b16      	cmp	r3, #22
 8008818:	d85a      	bhi.n	80088d0 <_dtoa_r+0x240>
 800881a:	9a00      	ldr	r2, [sp, #0]
 800881c:	4b57      	ldr	r3, [pc, #348]	; (800897c <_dtoa_r+0x2ec>)
 800881e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008826:	ec51 0b19 	vmov	r0, r1, d9
 800882a:	f7f8 f95f 	bl	8000aec <__aeabi_dcmplt>
 800882e:	2800      	cmp	r0, #0
 8008830:	d050      	beq.n	80088d4 <_dtoa_r+0x244>
 8008832:	9b00      	ldr	r3, [sp, #0]
 8008834:	3b01      	subs	r3, #1
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	2300      	movs	r3, #0
 800883a:	930b      	str	r3, [sp, #44]	; 0x2c
 800883c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800883e:	1b5d      	subs	r5, r3, r5
 8008840:	1e6b      	subs	r3, r5, #1
 8008842:	9305      	str	r3, [sp, #20]
 8008844:	bf45      	ittet	mi
 8008846:	f1c5 0301 	rsbmi	r3, r5, #1
 800884a:	9304      	strmi	r3, [sp, #16]
 800884c:	2300      	movpl	r3, #0
 800884e:	2300      	movmi	r3, #0
 8008850:	bf4c      	ite	mi
 8008852:	9305      	strmi	r3, [sp, #20]
 8008854:	9304      	strpl	r3, [sp, #16]
 8008856:	9b00      	ldr	r3, [sp, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	db3d      	blt.n	80088d8 <_dtoa_r+0x248>
 800885c:	9b05      	ldr	r3, [sp, #20]
 800885e:	9a00      	ldr	r2, [sp, #0]
 8008860:	920a      	str	r2, [sp, #40]	; 0x28
 8008862:	4413      	add	r3, r2
 8008864:	9305      	str	r3, [sp, #20]
 8008866:	2300      	movs	r3, #0
 8008868:	9307      	str	r3, [sp, #28]
 800886a:	9b06      	ldr	r3, [sp, #24]
 800886c:	2b09      	cmp	r3, #9
 800886e:	f200 8089 	bhi.w	8008984 <_dtoa_r+0x2f4>
 8008872:	2b05      	cmp	r3, #5
 8008874:	bfc4      	itt	gt
 8008876:	3b04      	subgt	r3, #4
 8008878:	9306      	strgt	r3, [sp, #24]
 800887a:	9b06      	ldr	r3, [sp, #24]
 800887c:	f1a3 0302 	sub.w	r3, r3, #2
 8008880:	bfcc      	ite	gt
 8008882:	2500      	movgt	r5, #0
 8008884:	2501      	movle	r5, #1
 8008886:	2b03      	cmp	r3, #3
 8008888:	f200 8087 	bhi.w	800899a <_dtoa_r+0x30a>
 800888c:	e8df f003 	tbb	[pc, r3]
 8008890:	59383a2d 	.word	0x59383a2d
 8008894:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008898:	441d      	add	r5, r3
 800889a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800889e:	2b20      	cmp	r3, #32
 80088a0:	bfc1      	itttt	gt
 80088a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80088a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80088aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80088ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80088b2:	bfda      	itte	le
 80088b4:	f1c3 0320 	rsble	r3, r3, #32
 80088b8:	fa06 f003 	lslle.w	r0, r6, r3
 80088bc:	4318      	orrgt	r0, r3
 80088be:	f7f7 fe29 	bl	8000514 <__aeabi_ui2d>
 80088c2:	2301      	movs	r3, #1
 80088c4:	4606      	mov	r6, r0
 80088c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80088ca:	3d01      	subs	r5, #1
 80088cc:	930e      	str	r3, [sp, #56]	; 0x38
 80088ce:	e76a      	b.n	80087a6 <_dtoa_r+0x116>
 80088d0:	2301      	movs	r3, #1
 80088d2:	e7b2      	b.n	800883a <_dtoa_r+0x1aa>
 80088d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80088d6:	e7b1      	b.n	800883c <_dtoa_r+0x1ac>
 80088d8:	9b04      	ldr	r3, [sp, #16]
 80088da:	9a00      	ldr	r2, [sp, #0]
 80088dc:	1a9b      	subs	r3, r3, r2
 80088de:	9304      	str	r3, [sp, #16]
 80088e0:	4253      	negs	r3, r2
 80088e2:	9307      	str	r3, [sp, #28]
 80088e4:	2300      	movs	r3, #0
 80088e6:	930a      	str	r3, [sp, #40]	; 0x28
 80088e8:	e7bf      	b.n	800886a <_dtoa_r+0x1da>
 80088ea:	2300      	movs	r3, #0
 80088ec:	9308      	str	r3, [sp, #32]
 80088ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	dc55      	bgt.n	80089a0 <_dtoa_r+0x310>
 80088f4:	2301      	movs	r3, #1
 80088f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80088fa:	461a      	mov	r2, r3
 80088fc:	9209      	str	r2, [sp, #36]	; 0x24
 80088fe:	e00c      	b.n	800891a <_dtoa_r+0x28a>
 8008900:	2301      	movs	r3, #1
 8008902:	e7f3      	b.n	80088ec <_dtoa_r+0x25c>
 8008904:	2300      	movs	r3, #0
 8008906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008908:	9308      	str	r3, [sp, #32]
 800890a:	9b00      	ldr	r3, [sp, #0]
 800890c:	4413      	add	r3, r2
 800890e:	9302      	str	r3, [sp, #8]
 8008910:	3301      	adds	r3, #1
 8008912:	2b01      	cmp	r3, #1
 8008914:	9303      	str	r3, [sp, #12]
 8008916:	bfb8      	it	lt
 8008918:	2301      	movlt	r3, #1
 800891a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800891c:	2200      	movs	r2, #0
 800891e:	6042      	str	r2, [r0, #4]
 8008920:	2204      	movs	r2, #4
 8008922:	f102 0614 	add.w	r6, r2, #20
 8008926:	429e      	cmp	r6, r3
 8008928:	6841      	ldr	r1, [r0, #4]
 800892a:	d93d      	bls.n	80089a8 <_dtoa_r+0x318>
 800892c:	4620      	mov	r0, r4
 800892e:	f001 f839 	bl	80099a4 <_Balloc>
 8008932:	9001      	str	r0, [sp, #4]
 8008934:	2800      	cmp	r0, #0
 8008936:	d13b      	bne.n	80089b0 <_dtoa_r+0x320>
 8008938:	4b11      	ldr	r3, [pc, #68]	; (8008980 <_dtoa_r+0x2f0>)
 800893a:	4602      	mov	r2, r0
 800893c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008940:	e6c0      	b.n	80086c4 <_dtoa_r+0x34>
 8008942:	2301      	movs	r3, #1
 8008944:	e7df      	b.n	8008906 <_dtoa_r+0x276>
 8008946:	bf00      	nop
 8008948:	636f4361 	.word	0x636f4361
 800894c:	3fd287a7 	.word	0x3fd287a7
 8008950:	8b60c8b3 	.word	0x8b60c8b3
 8008954:	3fc68a28 	.word	0x3fc68a28
 8008958:	509f79fb 	.word	0x509f79fb
 800895c:	3fd34413 	.word	0x3fd34413
 8008960:	0800b606 	.word	0x0800b606
 8008964:	0800b61d 	.word	0x0800b61d
 8008968:	7ff00000 	.word	0x7ff00000
 800896c:	0800b602 	.word	0x0800b602
 8008970:	0800b5f9 	.word	0x0800b5f9
 8008974:	0800b479 	.word	0x0800b479
 8008978:	3ff80000 	.word	0x3ff80000
 800897c:	0800b788 	.word	0x0800b788
 8008980:	0800b678 	.word	0x0800b678
 8008984:	2501      	movs	r5, #1
 8008986:	2300      	movs	r3, #0
 8008988:	9306      	str	r3, [sp, #24]
 800898a:	9508      	str	r5, [sp, #32]
 800898c:	f04f 33ff 	mov.w	r3, #4294967295
 8008990:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008994:	2200      	movs	r2, #0
 8008996:	2312      	movs	r3, #18
 8008998:	e7b0      	b.n	80088fc <_dtoa_r+0x26c>
 800899a:	2301      	movs	r3, #1
 800899c:	9308      	str	r3, [sp, #32]
 800899e:	e7f5      	b.n	800898c <_dtoa_r+0x2fc>
 80089a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80089a6:	e7b8      	b.n	800891a <_dtoa_r+0x28a>
 80089a8:	3101      	adds	r1, #1
 80089aa:	6041      	str	r1, [r0, #4]
 80089ac:	0052      	lsls	r2, r2, #1
 80089ae:	e7b8      	b.n	8008922 <_dtoa_r+0x292>
 80089b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089b2:	9a01      	ldr	r2, [sp, #4]
 80089b4:	601a      	str	r2, [r3, #0]
 80089b6:	9b03      	ldr	r3, [sp, #12]
 80089b8:	2b0e      	cmp	r3, #14
 80089ba:	f200 809d 	bhi.w	8008af8 <_dtoa_r+0x468>
 80089be:	2d00      	cmp	r5, #0
 80089c0:	f000 809a 	beq.w	8008af8 <_dtoa_r+0x468>
 80089c4:	9b00      	ldr	r3, [sp, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	dd32      	ble.n	8008a30 <_dtoa_r+0x3a0>
 80089ca:	4ab7      	ldr	r2, [pc, #732]	; (8008ca8 <_dtoa_r+0x618>)
 80089cc:	f003 030f 	and.w	r3, r3, #15
 80089d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80089d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089d8:	9b00      	ldr	r3, [sp, #0]
 80089da:	05d8      	lsls	r0, r3, #23
 80089dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80089e0:	d516      	bpl.n	8008a10 <_dtoa_r+0x380>
 80089e2:	4bb2      	ldr	r3, [pc, #712]	; (8008cac <_dtoa_r+0x61c>)
 80089e4:	ec51 0b19 	vmov	r0, r1, d9
 80089e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089ec:	f7f7 ff36 	bl	800085c <__aeabi_ddiv>
 80089f0:	f007 070f 	and.w	r7, r7, #15
 80089f4:	4682      	mov	sl, r0
 80089f6:	468b      	mov	fp, r1
 80089f8:	2503      	movs	r5, #3
 80089fa:	4eac      	ldr	r6, [pc, #688]	; (8008cac <_dtoa_r+0x61c>)
 80089fc:	b957      	cbnz	r7, 8008a14 <_dtoa_r+0x384>
 80089fe:	4642      	mov	r2, r8
 8008a00:	464b      	mov	r3, r9
 8008a02:	4650      	mov	r0, sl
 8008a04:	4659      	mov	r1, fp
 8008a06:	f7f7 ff29 	bl	800085c <__aeabi_ddiv>
 8008a0a:	4682      	mov	sl, r0
 8008a0c:	468b      	mov	fp, r1
 8008a0e:	e028      	b.n	8008a62 <_dtoa_r+0x3d2>
 8008a10:	2502      	movs	r5, #2
 8008a12:	e7f2      	b.n	80089fa <_dtoa_r+0x36a>
 8008a14:	07f9      	lsls	r1, r7, #31
 8008a16:	d508      	bpl.n	8008a2a <_dtoa_r+0x39a>
 8008a18:	4640      	mov	r0, r8
 8008a1a:	4649      	mov	r1, r9
 8008a1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a20:	f7f7 fdf2 	bl	8000608 <__aeabi_dmul>
 8008a24:	3501      	adds	r5, #1
 8008a26:	4680      	mov	r8, r0
 8008a28:	4689      	mov	r9, r1
 8008a2a:	107f      	asrs	r7, r7, #1
 8008a2c:	3608      	adds	r6, #8
 8008a2e:	e7e5      	b.n	80089fc <_dtoa_r+0x36c>
 8008a30:	f000 809b 	beq.w	8008b6a <_dtoa_r+0x4da>
 8008a34:	9b00      	ldr	r3, [sp, #0]
 8008a36:	4f9d      	ldr	r7, [pc, #628]	; (8008cac <_dtoa_r+0x61c>)
 8008a38:	425e      	negs	r6, r3
 8008a3a:	4b9b      	ldr	r3, [pc, #620]	; (8008ca8 <_dtoa_r+0x618>)
 8008a3c:	f006 020f 	and.w	r2, r6, #15
 8008a40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a48:	ec51 0b19 	vmov	r0, r1, d9
 8008a4c:	f7f7 fddc 	bl	8000608 <__aeabi_dmul>
 8008a50:	1136      	asrs	r6, r6, #4
 8008a52:	4682      	mov	sl, r0
 8008a54:	468b      	mov	fp, r1
 8008a56:	2300      	movs	r3, #0
 8008a58:	2502      	movs	r5, #2
 8008a5a:	2e00      	cmp	r6, #0
 8008a5c:	d17a      	bne.n	8008b54 <_dtoa_r+0x4c4>
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1d3      	bne.n	8008a0a <_dtoa_r+0x37a>
 8008a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 8082 	beq.w	8008b6e <_dtoa_r+0x4de>
 8008a6a:	4b91      	ldr	r3, [pc, #580]	; (8008cb0 <_dtoa_r+0x620>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	4650      	mov	r0, sl
 8008a70:	4659      	mov	r1, fp
 8008a72:	f7f8 f83b 	bl	8000aec <__aeabi_dcmplt>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	d079      	beq.n	8008b6e <_dtoa_r+0x4de>
 8008a7a:	9b03      	ldr	r3, [sp, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d076      	beq.n	8008b6e <_dtoa_r+0x4de>
 8008a80:	9b02      	ldr	r3, [sp, #8]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	dd36      	ble.n	8008af4 <_dtoa_r+0x464>
 8008a86:	9b00      	ldr	r3, [sp, #0]
 8008a88:	4650      	mov	r0, sl
 8008a8a:	4659      	mov	r1, fp
 8008a8c:	1e5f      	subs	r7, r3, #1
 8008a8e:	2200      	movs	r2, #0
 8008a90:	4b88      	ldr	r3, [pc, #544]	; (8008cb4 <_dtoa_r+0x624>)
 8008a92:	f7f7 fdb9 	bl	8000608 <__aeabi_dmul>
 8008a96:	9e02      	ldr	r6, [sp, #8]
 8008a98:	4682      	mov	sl, r0
 8008a9a:	468b      	mov	fp, r1
 8008a9c:	3501      	adds	r5, #1
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	f7f7 fd48 	bl	8000534 <__aeabi_i2d>
 8008aa4:	4652      	mov	r2, sl
 8008aa6:	465b      	mov	r3, fp
 8008aa8:	f7f7 fdae 	bl	8000608 <__aeabi_dmul>
 8008aac:	4b82      	ldr	r3, [pc, #520]	; (8008cb8 <_dtoa_r+0x628>)
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f7f7 fbf4 	bl	800029c <__adddf3>
 8008ab4:	46d0      	mov	r8, sl
 8008ab6:	46d9      	mov	r9, fp
 8008ab8:	4682      	mov	sl, r0
 8008aba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008abe:	2e00      	cmp	r6, #0
 8008ac0:	d158      	bne.n	8008b74 <_dtoa_r+0x4e4>
 8008ac2:	4b7e      	ldr	r3, [pc, #504]	; (8008cbc <_dtoa_r+0x62c>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	4640      	mov	r0, r8
 8008ac8:	4649      	mov	r1, r9
 8008aca:	f7f7 fbe5 	bl	8000298 <__aeabi_dsub>
 8008ace:	4652      	mov	r2, sl
 8008ad0:	465b      	mov	r3, fp
 8008ad2:	4680      	mov	r8, r0
 8008ad4:	4689      	mov	r9, r1
 8008ad6:	f7f8 f827 	bl	8000b28 <__aeabi_dcmpgt>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	f040 8295 	bne.w	800900a <_dtoa_r+0x97a>
 8008ae0:	4652      	mov	r2, sl
 8008ae2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008ae6:	4640      	mov	r0, r8
 8008ae8:	4649      	mov	r1, r9
 8008aea:	f7f7 ffff 	bl	8000aec <__aeabi_dcmplt>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	f040 8289 	bne.w	8009006 <_dtoa_r+0x976>
 8008af4:	ec5b ab19 	vmov	sl, fp, d9
 8008af8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f2c0 8148 	blt.w	8008d90 <_dtoa_r+0x700>
 8008b00:	9a00      	ldr	r2, [sp, #0]
 8008b02:	2a0e      	cmp	r2, #14
 8008b04:	f300 8144 	bgt.w	8008d90 <_dtoa_r+0x700>
 8008b08:	4b67      	ldr	r3, [pc, #412]	; (8008ca8 <_dtoa_r+0x618>)
 8008b0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f280 80d5 	bge.w	8008cc4 <_dtoa_r+0x634>
 8008b1a:	9b03      	ldr	r3, [sp, #12]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f300 80d1 	bgt.w	8008cc4 <_dtoa_r+0x634>
 8008b22:	f040 826f 	bne.w	8009004 <_dtoa_r+0x974>
 8008b26:	4b65      	ldr	r3, [pc, #404]	; (8008cbc <_dtoa_r+0x62c>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	4640      	mov	r0, r8
 8008b2c:	4649      	mov	r1, r9
 8008b2e:	f7f7 fd6b 	bl	8000608 <__aeabi_dmul>
 8008b32:	4652      	mov	r2, sl
 8008b34:	465b      	mov	r3, fp
 8008b36:	f7f7 ffed 	bl	8000b14 <__aeabi_dcmpge>
 8008b3a:	9e03      	ldr	r6, [sp, #12]
 8008b3c:	4637      	mov	r7, r6
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	f040 8245 	bne.w	8008fce <_dtoa_r+0x93e>
 8008b44:	9d01      	ldr	r5, [sp, #4]
 8008b46:	2331      	movs	r3, #49	; 0x31
 8008b48:	f805 3b01 	strb.w	r3, [r5], #1
 8008b4c:	9b00      	ldr	r3, [sp, #0]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	e240      	b.n	8008fd6 <_dtoa_r+0x946>
 8008b54:	07f2      	lsls	r2, r6, #31
 8008b56:	d505      	bpl.n	8008b64 <_dtoa_r+0x4d4>
 8008b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b5c:	f7f7 fd54 	bl	8000608 <__aeabi_dmul>
 8008b60:	3501      	adds	r5, #1
 8008b62:	2301      	movs	r3, #1
 8008b64:	1076      	asrs	r6, r6, #1
 8008b66:	3708      	adds	r7, #8
 8008b68:	e777      	b.n	8008a5a <_dtoa_r+0x3ca>
 8008b6a:	2502      	movs	r5, #2
 8008b6c:	e779      	b.n	8008a62 <_dtoa_r+0x3d2>
 8008b6e:	9f00      	ldr	r7, [sp, #0]
 8008b70:	9e03      	ldr	r6, [sp, #12]
 8008b72:	e794      	b.n	8008a9e <_dtoa_r+0x40e>
 8008b74:	9901      	ldr	r1, [sp, #4]
 8008b76:	4b4c      	ldr	r3, [pc, #304]	; (8008ca8 <_dtoa_r+0x618>)
 8008b78:	4431      	add	r1, r6
 8008b7a:	910d      	str	r1, [sp, #52]	; 0x34
 8008b7c:	9908      	ldr	r1, [sp, #32]
 8008b7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008b82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b86:	2900      	cmp	r1, #0
 8008b88:	d043      	beq.n	8008c12 <_dtoa_r+0x582>
 8008b8a:	494d      	ldr	r1, [pc, #308]	; (8008cc0 <_dtoa_r+0x630>)
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	f7f7 fe65 	bl	800085c <__aeabi_ddiv>
 8008b92:	4652      	mov	r2, sl
 8008b94:	465b      	mov	r3, fp
 8008b96:	f7f7 fb7f 	bl	8000298 <__aeabi_dsub>
 8008b9a:	9d01      	ldr	r5, [sp, #4]
 8008b9c:	4682      	mov	sl, r0
 8008b9e:	468b      	mov	fp, r1
 8008ba0:	4649      	mov	r1, r9
 8008ba2:	4640      	mov	r0, r8
 8008ba4:	f7f7 ffe0 	bl	8000b68 <__aeabi_d2iz>
 8008ba8:	4606      	mov	r6, r0
 8008baa:	f7f7 fcc3 	bl	8000534 <__aeabi_i2d>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	4640      	mov	r0, r8
 8008bb4:	4649      	mov	r1, r9
 8008bb6:	f7f7 fb6f 	bl	8000298 <__aeabi_dsub>
 8008bba:	3630      	adds	r6, #48	; 0x30
 8008bbc:	f805 6b01 	strb.w	r6, [r5], #1
 8008bc0:	4652      	mov	r2, sl
 8008bc2:	465b      	mov	r3, fp
 8008bc4:	4680      	mov	r8, r0
 8008bc6:	4689      	mov	r9, r1
 8008bc8:	f7f7 ff90 	bl	8000aec <__aeabi_dcmplt>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	d163      	bne.n	8008c98 <_dtoa_r+0x608>
 8008bd0:	4642      	mov	r2, r8
 8008bd2:	464b      	mov	r3, r9
 8008bd4:	4936      	ldr	r1, [pc, #216]	; (8008cb0 <_dtoa_r+0x620>)
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	f7f7 fb5e 	bl	8000298 <__aeabi_dsub>
 8008bdc:	4652      	mov	r2, sl
 8008bde:	465b      	mov	r3, fp
 8008be0:	f7f7 ff84 	bl	8000aec <__aeabi_dcmplt>
 8008be4:	2800      	cmp	r0, #0
 8008be6:	f040 80b5 	bne.w	8008d54 <_dtoa_r+0x6c4>
 8008bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bec:	429d      	cmp	r5, r3
 8008bee:	d081      	beq.n	8008af4 <_dtoa_r+0x464>
 8008bf0:	4b30      	ldr	r3, [pc, #192]	; (8008cb4 <_dtoa_r+0x624>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	4650      	mov	r0, sl
 8008bf6:	4659      	mov	r1, fp
 8008bf8:	f7f7 fd06 	bl	8000608 <__aeabi_dmul>
 8008bfc:	4b2d      	ldr	r3, [pc, #180]	; (8008cb4 <_dtoa_r+0x624>)
 8008bfe:	4682      	mov	sl, r0
 8008c00:	468b      	mov	fp, r1
 8008c02:	4640      	mov	r0, r8
 8008c04:	4649      	mov	r1, r9
 8008c06:	2200      	movs	r2, #0
 8008c08:	f7f7 fcfe 	bl	8000608 <__aeabi_dmul>
 8008c0c:	4680      	mov	r8, r0
 8008c0e:	4689      	mov	r9, r1
 8008c10:	e7c6      	b.n	8008ba0 <_dtoa_r+0x510>
 8008c12:	4650      	mov	r0, sl
 8008c14:	4659      	mov	r1, fp
 8008c16:	f7f7 fcf7 	bl	8000608 <__aeabi_dmul>
 8008c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c1c:	9d01      	ldr	r5, [sp, #4]
 8008c1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c20:	4682      	mov	sl, r0
 8008c22:	468b      	mov	fp, r1
 8008c24:	4649      	mov	r1, r9
 8008c26:	4640      	mov	r0, r8
 8008c28:	f7f7 ff9e 	bl	8000b68 <__aeabi_d2iz>
 8008c2c:	4606      	mov	r6, r0
 8008c2e:	f7f7 fc81 	bl	8000534 <__aeabi_i2d>
 8008c32:	3630      	adds	r6, #48	; 0x30
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4640      	mov	r0, r8
 8008c3a:	4649      	mov	r1, r9
 8008c3c:	f7f7 fb2c 	bl	8000298 <__aeabi_dsub>
 8008c40:	f805 6b01 	strb.w	r6, [r5], #1
 8008c44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c46:	429d      	cmp	r5, r3
 8008c48:	4680      	mov	r8, r0
 8008c4a:	4689      	mov	r9, r1
 8008c4c:	f04f 0200 	mov.w	r2, #0
 8008c50:	d124      	bne.n	8008c9c <_dtoa_r+0x60c>
 8008c52:	4b1b      	ldr	r3, [pc, #108]	; (8008cc0 <_dtoa_r+0x630>)
 8008c54:	4650      	mov	r0, sl
 8008c56:	4659      	mov	r1, fp
 8008c58:	f7f7 fb20 	bl	800029c <__adddf3>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	4640      	mov	r0, r8
 8008c62:	4649      	mov	r1, r9
 8008c64:	f7f7 ff60 	bl	8000b28 <__aeabi_dcmpgt>
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	d173      	bne.n	8008d54 <_dtoa_r+0x6c4>
 8008c6c:	4652      	mov	r2, sl
 8008c6e:	465b      	mov	r3, fp
 8008c70:	4913      	ldr	r1, [pc, #76]	; (8008cc0 <_dtoa_r+0x630>)
 8008c72:	2000      	movs	r0, #0
 8008c74:	f7f7 fb10 	bl	8000298 <__aeabi_dsub>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4640      	mov	r0, r8
 8008c7e:	4649      	mov	r1, r9
 8008c80:	f7f7 ff34 	bl	8000aec <__aeabi_dcmplt>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	f43f af35 	beq.w	8008af4 <_dtoa_r+0x464>
 8008c8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008c8c:	1e6b      	subs	r3, r5, #1
 8008c8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c94:	2b30      	cmp	r3, #48	; 0x30
 8008c96:	d0f8      	beq.n	8008c8a <_dtoa_r+0x5fa>
 8008c98:	9700      	str	r7, [sp, #0]
 8008c9a:	e049      	b.n	8008d30 <_dtoa_r+0x6a0>
 8008c9c:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <_dtoa_r+0x624>)
 8008c9e:	f7f7 fcb3 	bl	8000608 <__aeabi_dmul>
 8008ca2:	4680      	mov	r8, r0
 8008ca4:	4689      	mov	r9, r1
 8008ca6:	e7bd      	b.n	8008c24 <_dtoa_r+0x594>
 8008ca8:	0800b788 	.word	0x0800b788
 8008cac:	0800b760 	.word	0x0800b760
 8008cb0:	3ff00000 	.word	0x3ff00000
 8008cb4:	40240000 	.word	0x40240000
 8008cb8:	401c0000 	.word	0x401c0000
 8008cbc:	40140000 	.word	0x40140000
 8008cc0:	3fe00000 	.word	0x3fe00000
 8008cc4:	9d01      	ldr	r5, [sp, #4]
 8008cc6:	4656      	mov	r6, sl
 8008cc8:	465f      	mov	r7, fp
 8008cca:	4642      	mov	r2, r8
 8008ccc:	464b      	mov	r3, r9
 8008cce:	4630      	mov	r0, r6
 8008cd0:	4639      	mov	r1, r7
 8008cd2:	f7f7 fdc3 	bl	800085c <__aeabi_ddiv>
 8008cd6:	f7f7 ff47 	bl	8000b68 <__aeabi_d2iz>
 8008cda:	4682      	mov	sl, r0
 8008cdc:	f7f7 fc2a 	bl	8000534 <__aeabi_i2d>
 8008ce0:	4642      	mov	r2, r8
 8008ce2:	464b      	mov	r3, r9
 8008ce4:	f7f7 fc90 	bl	8000608 <__aeabi_dmul>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	4630      	mov	r0, r6
 8008cee:	4639      	mov	r1, r7
 8008cf0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008cf4:	f7f7 fad0 	bl	8000298 <__aeabi_dsub>
 8008cf8:	f805 6b01 	strb.w	r6, [r5], #1
 8008cfc:	9e01      	ldr	r6, [sp, #4]
 8008cfe:	9f03      	ldr	r7, [sp, #12]
 8008d00:	1bae      	subs	r6, r5, r6
 8008d02:	42b7      	cmp	r7, r6
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	d135      	bne.n	8008d76 <_dtoa_r+0x6e6>
 8008d0a:	f7f7 fac7 	bl	800029c <__adddf3>
 8008d0e:	4642      	mov	r2, r8
 8008d10:	464b      	mov	r3, r9
 8008d12:	4606      	mov	r6, r0
 8008d14:	460f      	mov	r7, r1
 8008d16:	f7f7 ff07 	bl	8000b28 <__aeabi_dcmpgt>
 8008d1a:	b9d0      	cbnz	r0, 8008d52 <_dtoa_r+0x6c2>
 8008d1c:	4642      	mov	r2, r8
 8008d1e:	464b      	mov	r3, r9
 8008d20:	4630      	mov	r0, r6
 8008d22:	4639      	mov	r1, r7
 8008d24:	f7f7 fed8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d28:	b110      	cbz	r0, 8008d30 <_dtoa_r+0x6a0>
 8008d2a:	f01a 0f01 	tst.w	sl, #1
 8008d2e:	d110      	bne.n	8008d52 <_dtoa_r+0x6c2>
 8008d30:	4620      	mov	r0, r4
 8008d32:	ee18 1a10 	vmov	r1, s16
 8008d36:	f000 fe75 	bl	8009a24 <_Bfree>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	9800      	ldr	r0, [sp, #0]
 8008d3e:	702b      	strb	r3, [r5, #0]
 8008d40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d42:	3001      	adds	r0, #1
 8008d44:	6018      	str	r0, [r3, #0]
 8008d46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f43f acf1 	beq.w	8008730 <_dtoa_r+0xa0>
 8008d4e:	601d      	str	r5, [r3, #0]
 8008d50:	e4ee      	b.n	8008730 <_dtoa_r+0xa0>
 8008d52:	9f00      	ldr	r7, [sp, #0]
 8008d54:	462b      	mov	r3, r5
 8008d56:	461d      	mov	r5, r3
 8008d58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d5c:	2a39      	cmp	r2, #57	; 0x39
 8008d5e:	d106      	bne.n	8008d6e <_dtoa_r+0x6de>
 8008d60:	9a01      	ldr	r2, [sp, #4]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d1f7      	bne.n	8008d56 <_dtoa_r+0x6c6>
 8008d66:	9901      	ldr	r1, [sp, #4]
 8008d68:	2230      	movs	r2, #48	; 0x30
 8008d6a:	3701      	adds	r7, #1
 8008d6c:	700a      	strb	r2, [r1, #0]
 8008d6e:	781a      	ldrb	r2, [r3, #0]
 8008d70:	3201      	adds	r2, #1
 8008d72:	701a      	strb	r2, [r3, #0]
 8008d74:	e790      	b.n	8008c98 <_dtoa_r+0x608>
 8008d76:	4ba6      	ldr	r3, [pc, #664]	; (8009010 <_dtoa_r+0x980>)
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f7f7 fc45 	bl	8000608 <__aeabi_dmul>
 8008d7e:	2200      	movs	r2, #0
 8008d80:	2300      	movs	r3, #0
 8008d82:	4606      	mov	r6, r0
 8008d84:	460f      	mov	r7, r1
 8008d86:	f7f7 fea7 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d09d      	beq.n	8008cca <_dtoa_r+0x63a>
 8008d8e:	e7cf      	b.n	8008d30 <_dtoa_r+0x6a0>
 8008d90:	9a08      	ldr	r2, [sp, #32]
 8008d92:	2a00      	cmp	r2, #0
 8008d94:	f000 80d7 	beq.w	8008f46 <_dtoa_r+0x8b6>
 8008d98:	9a06      	ldr	r2, [sp, #24]
 8008d9a:	2a01      	cmp	r2, #1
 8008d9c:	f300 80ba 	bgt.w	8008f14 <_dtoa_r+0x884>
 8008da0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008da2:	2a00      	cmp	r2, #0
 8008da4:	f000 80b2 	beq.w	8008f0c <_dtoa_r+0x87c>
 8008da8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008dac:	9e07      	ldr	r6, [sp, #28]
 8008dae:	9d04      	ldr	r5, [sp, #16]
 8008db0:	9a04      	ldr	r2, [sp, #16]
 8008db2:	441a      	add	r2, r3
 8008db4:	9204      	str	r2, [sp, #16]
 8008db6:	9a05      	ldr	r2, [sp, #20]
 8008db8:	2101      	movs	r1, #1
 8008dba:	441a      	add	r2, r3
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	9205      	str	r2, [sp, #20]
 8008dc0:	f000 ff32 	bl	8009c28 <__i2b>
 8008dc4:	4607      	mov	r7, r0
 8008dc6:	2d00      	cmp	r5, #0
 8008dc8:	dd0c      	ble.n	8008de4 <_dtoa_r+0x754>
 8008dca:	9b05      	ldr	r3, [sp, #20]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	dd09      	ble.n	8008de4 <_dtoa_r+0x754>
 8008dd0:	42ab      	cmp	r3, r5
 8008dd2:	9a04      	ldr	r2, [sp, #16]
 8008dd4:	bfa8      	it	ge
 8008dd6:	462b      	movge	r3, r5
 8008dd8:	1ad2      	subs	r2, r2, r3
 8008dda:	9204      	str	r2, [sp, #16]
 8008ddc:	9a05      	ldr	r2, [sp, #20]
 8008dde:	1aed      	subs	r5, r5, r3
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	9305      	str	r3, [sp, #20]
 8008de4:	9b07      	ldr	r3, [sp, #28]
 8008de6:	b31b      	cbz	r3, 8008e30 <_dtoa_r+0x7a0>
 8008de8:	9b08      	ldr	r3, [sp, #32]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f000 80af 	beq.w	8008f4e <_dtoa_r+0x8be>
 8008df0:	2e00      	cmp	r6, #0
 8008df2:	dd13      	ble.n	8008e1c <_dtoa_r+0x78c>
 8008df4:	4639      	mov	r1, r7
 8008df6:	4632      	mov	r2, r6
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f000 ffd5 	bl	8009da8 <__pow5mult>
 8008dfe:	ee18 2a10 	vmov	r2, s16
 8008e02:	4601      	mov	r1, r0
 8008e04:	4607      	mov	r7, r0
 8008e06:	4620      	mov	r0, r4
 8008e08:	f000 ff24 	bl	8009c54 <__multiply>
 8008e0c:	ee18 1a10 	vmov	r1, s16
 8008e10:	4680      	mov	r8, r0
 8008e12:	4620      	mov	r0, r4
 8008e14:	f000 fe06 	bl	8009a24 <_Bfree>
 8008e18:	ee08 8a10 	vmov	s16, r8
 8008e1c:	9b07      	ldr	r3, [sp, #28]
 8008e1e:	1b9a      	subs	r2, r3, r6
 8008e20:	d006      	beq.n	8008e30 <_dtoa_r+0x7a0>
 8008e22:	ee18 1a10 	vmov	r1, s16
 8008e26:	4620      	mov	r0, r4
 8008e28:	f000 ffbe 	bl	8009da8 <__pow5mult>
 8008e2c:	ee08 0a10 	vmov	s16, r0
 8008e30:	2101      	movs	r1, #1
 8008e32:	4620      	mov	r0, r4
 8008e34:	f000 fef8 	bl	8009c28 <__i2b>
 8008e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	4606      	mov	r6, r0
 8008e3e:	f340 8088 	ble.w	8008f52 <_dtoa_r+0x8c2>
 8008e42:	461a      	mov	r2, r3
 8008e44:	4601      	mov	r1, r0
 8008e46:	4620      	mov	r0, r4
 8008e48:	f000 ffae 	bl	8009da8 <__pow5mult>
 8008e4c:	9b06      	ldr	r3, [sp, #24]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	4606      	mov	r6, r0
 8008e52:	f340 8081 	ble.w	8008f58 <_dtoa_r+0x8c8>
 8008e56:	f04f 0800 	mov.w	r8, #0
 8008e5a:	6933      	ldr	r3, [r6, #16]
 8008e5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008e60:	6918      	ldr	r0, [r3, #16]
 8008e62:	f000 fe91 	bl	8009b88 <__hi0bits>
 8008e66:	f1c0 0020 	rsb	r0, r0, #32
 8008e6a:	9b05      	ldr	r3, [sp, #20]
 8008e6c:	4418      	add	r0, r3
 8008e6e:	f010 001f 	ands.w	r0, r0, #31
 8008e72:	f000 8092 	beq.w	8008f9a <_dtoa_r+0x90a>
 8008e76:	f1c0 0320 	rsb	r3, r0, #32
 8008e7a:	2b04      	cmp	r3, #4
 8008e7c:	f340 808a 	ble.w	8008f94 <_dtoa_r+0x904>
 8008e80:	f1c0 001c 	rsb	r0, r0, #28
 8008e84:	9b04      	ldr	r3, [sp, #16]
 8008e86:	4403      	add	r3, r0
 8008e88:	9304      	str	r3, [sp, #16]
 8008e8a:	9b05      	ldr	r3, [sp, #20]
 8008e8c:	4403      	add	r3, r0
 8008e8e:	4405      	add	r5, r0
 8008e90:	9305      	str	r3, [sp, #20]
 8008e92:	9b04      	ldr	r3, [sp, #16]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	dd07      	ble.n	8008ea8 <_dtoa_r+0x818>
 8008e98:	ee18 1a10 	vmov	r1, s16
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f000 ffdc 	bl	8009e5c <__lshift>
 8008ea4:	ee08 0a10 	vmov	s16, r0
 8008ea8:	9b05      	ldr	r3, [sp, #20]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	dd05      	ble.n	8008eba <_dtoa_r+0x82a>
 8008eae:	4631      	mov	r1, r6
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f000 ffd2 	bl	8009e5c <__lshift>
 8008eb8:	4606      	mov	r6, r0
 8008eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d06e      	beq.n	8008f9e <_dtoa_r+0x90e>
 8008ec0:	ee18 0a10 	vmov	r0, s16
 8008ec4:	4631      	mov	r1, r6
 8008ec6:	f001 f839 	bl	8009f3c <__mcmp>
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	da67      	bge.n	8008f9e <_dtoa_r+0x90e>
 8008ece:	9b00      	ldr	r3, [sp, #0]
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	ee18 1a10 	vmov	r1, s16
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	220a      	movs	r2, #10
 8008eda:	2300      	movs	r3, #0
 8008edc:	4620      	mov	r0, r4
 8008ede:	f000 fdc3 	bl	8009a68 <__multadd>
 8008ee2:	9b08      	ldr	r3, [sp, #32]
 8008ee4:	ee08 0a10 	vmov	s16, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f000 81b1 	beq.w	8009250 <_dtoa_r+0xbc0>
 8008eee:	2300      	movs	r3, #0
 8008ef0:	4639      	mov	r1, r7
 8008ef2:	220a      	movs	r2, #10
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	f000 fdb7 	bl	8009a68 <__multadd>
 8008efa:	9b02      	ldr	r3, [sp, #8]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	4607      	mov	r7, r0
 8008f00:	f300 808e 	bgt.w	8009020 <_dtoa_r+0x990>
 8008f04:	9b06      	ldr	r3, [sp, #24]
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	dc51      	bgt.n	8008fae <_dtoa_r+0x91e>
 8008f0a:	e089      	b.n	8009020 <_dtoa_r+0x990>
 8008f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008f12:	e74b      	b.n	8008dac <_dtoa_r+0x71c>
 8008f14:	9b03      	ldr	r3, [sp, #12]
 8008f16:	1e5e      	subs	r6, r3, #1
 8008f18:	9b07      	ldr	r3, [sp, #28]
 8008f1a:	42b3      	cmp	r3, r6
 8008f1c:	bfbf      	itttt	lt
 8008f1e:	9b07      	ldrlt	r3, [sp, #28]
 8008f20:	9607      	strlt	r6, [sp, #28]
 8008f22:	1af2      	sublt	r2, r6, r3
 8008f24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008f26:	bfb6      	itet	lt
 8008f28:	189b      	addlt	r3, r3, r2
 8008f2a:	1b9e      	subge	r6, r3, r6
 8008f2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008f2e:	9b03      	ldr	r3, [sp, #12]
 8008f30:	bfb8      	it	lt
 8008f32:	2600      	movlt	r6, #0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	bfb7      	itett	lt
 8008f38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008f3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008f40:	1a9d      	sublt	r5, r3, r2
 8008f42:	2300      	movlt	r3, #0
 8008f44:	e734      	b.n	8008db0 <_dtoa_r+0x720>
 8008f46:	9e07      	ldr	r6, [sp, #28]
 8008f48:	9d04      	ldr	r5, [sp, #16]
 8008f4a:	9f08      	ldr	r7, [sp, #32]
 8008f4c:	e73b      	b.n	8008dc6 <_dtoa_r+0x736>
 8008f4e:	9a07      	ldr	r2, [sp, #28]
 8008f50:	e767      	b.n	8008e22 <_dtoa_r+0x792>
 8008f52:	9b06      	ldr	r3, [sp, #24]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	dc18      	bgt.n	8008f8a <_dtoa_r+0x8fa>
 8008f58:	f1ba 0f00 	cmp.w	sl, #0
 8008f5c:	d115      	bne.n	8008f8a <_dtoa_r+0x8fa>
 8008f5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f62:	b993      	cbnz	r3, 8008f8a <_dtoa_r+0x8fa>
 8008f64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008f68:	0d1b      	lsrs	r3, r3, #20
 8008f6a:	051b      	lsls	r3, r3, #20
 8008f6c:	b183      	cbz	r3, 8008f90 <_dtoa_r+0x900>
 8008f6e:	9b04      	ldr	r3, [sp, #16]
 8008f70:	3301      	adds	r3, #1
 8008f72:	9304      	str	r3, [sp, #16]
 8008f74:	9b05      	ldr	r3, [sp, #20]
 8008f76:	3301      	adds	r3, #1
 8008f78:	9305      	str	r3, [sp, #20]
 8008f7a:	f04f 0801 	mov.w	r8, #1
 8008f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f47f af6a 	bne.w	8008e5a <_dtoa_r+0x7ca>
 8008f86:	2001      	movs	r0, #1
 8008f88:	e76f      	b.n	8008e6a <_dtoa_r+0x7da>
 8008f8a:	f04f 0800 	mov.w	r8, #0
 8008f8e:	e7f6      	b.n	8008f7e <_dtoa_r+0x8ee>
 8008f90:	4698      	mov	r8, r3
 8008f92:	e7f4      	b.n	8008f7e <_dtoa_r+0x8ee>
 8008f94:	f43f af7d 	beq.w	8008e92 <_dtoa_r+0x802>
 8008f98:	4618      	mov	r0, r3
 8008f9a:	301c      	adds	r0, #28
 8008f9c:	e772      	b.n	8008e84 <_dtoa_r+0x7f4>
 8008f9e:	9b03      	ldr	r3, [sp, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	dc37      	bgt.n	8009014 <_dtoa_r+0x984>
 8008fa4:	9b06      	ldr	r3, [sp, #24]
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	dd34      	ble.n	8009014 <_dtoa_r+0x984>
 8008faa:	9b03      	ldr	r3, [sp, #12]
 8008fac:	9302      	str	r3, [sp, #8]
 8008fae:	9b02      	ldr	r3, [sp, #8]
 8008fb0:	b96b      	cbnz	r3, 8008fce <_dtoa_r+0x93e>
 8008fb2:	4631      	mov	r1, r6
 8008fb4:	2205      	movs	r2, #5
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f000 fd56 	bl	8009a68 <__multadd>
 8008fbc:	4601      	mov	r1, r0
 8008fbe:	4606      	mov	r6, r0
 8008fc0:	ee18 0a10 	vmov	r0, s16
 8008fc4:	f000 ffba 	bl	8009f3c <__mcmp>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	f73f adbb 	bgt.w	8008b44 <_dtoa_r+0x4b4>
 8008fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd0:	9d01      	ldr	r5, [sp, #4]
 8008fd2:	43db      	mvns	r3, r3
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	f04f 0800 	mov.w	r8, #0
 8008fda:	4631      	mov	r1, r6
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f000 fd21 	bl	8009a24 <_Bfree>
 8008fe2:	2f00      	cmp	r7, #0
 8008fe4:	f43f aea4 	beq.w	8008d30 <_dtoa_r+0x6a0>
 8008fe8:	f1b8 0f00 	cmp.w	r8, #0
 8008fec:	d005      	beq.n	8008ffa <_dtoa_r+0x96a>
 8008fee:	45b8      	cmp	r8, r7
 8008ff0:	d003      	beq.n	8008ffa <_dtoa_r+0x96a>
 8008ff2:	4641      	mov	r1, r8
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f000 fd15 	bl	8009a24 <_Bfree>
 8008ffa:	4639      	mov	r1, r7
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f000 fd11 	bl	8009a24 <_Bfree>
 8009002:	e695      	b.n	8008d30 <_dtoa_r+0x6a0>
 8009004:	2600      	movs	r6, #0
 8009006:	4637      	mov	r7, r6
 8009008:	e7e1      	b.n	8008fce <_dtoa_r+0x93e>
 800900a:	9700      	str	r7, [sp, #0]
 800900c:	4637      	mov	r7, r6
 800900e:	e599      	b.n	8008b44 <_dtoa_r+0x4b4>
 8009010:	40240000 	.word	0x40240000
 8009014:	9b08      	ldr	r3, [sp, #32]
 8009016:	2b00      	cmp	r3, #0
 8009018:	f000 80ca 	beq.w	80091b0 <_dtoa_r+0xb20>
 800901c:	9b03      	ldr	r3, [sp, #12]
 800901e:	9302      	str	r3, [sp, #8]
 8009020:	2d00      	cmp	r5, #0
 8009022:	dd05      	ble.n	8009030 <_dtoa_r+0x9a0>
 8009024:	4639      	mov	r1, r7
 8009026:	462a      	mov	r2, r5
 8009028:	4620      	mov	r0, r4
 800902a:	f000 ff17 	bl	8009e5c <__lshift>
 800902e:	4607      	mov	r7, r0
 8009030:	f1b8 0f00 	cmp.w	r8, #0
 8009034:	d05b      	beq.n	80090ee <_dtoa_r+0xa5e>
 8009036:	6879      	ldr	r1, [r7, #4]
 8009038:	4620      	mov	r0, r4
 800903a:	f000 fcb3 	bl	80099a4 <_Balloc>
 800903e:	4605      	mov	r5, r0
 8009040:	b928      	cbnz	r0, 800904e <_dtoa_r+0x9be>
 8009042:	4b87      	ldr	r3, [pc, #540]	; (8009260 <_dtoa_r+0xbd0>)
 8009044:	4602      	mov	r2, r0
 8009046:	f240 21ea 	movw	r1, #746	; 0x2ea
 800904a:	f7ff bb3b 	b.w	80086c4 <_dtoa_r+0x34>
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	3202      	adds	r2, #2
 8009052:	0092      	lsls	r2, r2, #2
 8009054:	f107 010c 	add.w	r1, r7, #12
 8009058:	300c      	adds	r0, #12
 800905a:	f000 fc95 	bl	8009988 <memcpy>
 800905e:	2201      	movs	r2, #1
 8009060:	4629      	mov	r1, r5
 8009062:	4620      	mov	r0, r4
 8009064:	f000 fefa 	bl	8009e5c <__lshift>
 8009068:	9b01      	ldr	r3, [sp, #4]
 800906a:	f103 0901 	add.w	r9, r3, #1
 800906e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009072:	4413      	add	r3, r2
 8009074:	9305      	str	r3, [sp, #20]
 8009076:	f00a 0301 	and.w	r3, sl, #1
 800907a:	46b8      	mov	r8, r7
 800907c:	9304      	str	r3, [sp, #16]
 800907e:	4607      	mov	r7, r0
 8009080:	4631      	mov	r1, r6
 8009082:	ee18 0a10 	vmov	r0, s16
 8009086:	f7ff fa77 	bl	8008578 <quorem>
 800908a:	4641      	mov	r1, r8
 800908c:	9002      	str	r0, [sp, #8]
 800908e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009092:	ee18 0a10 	vmov	r0, s16
 8009096:	f000 ff51 	bl	8009f3c <__mcmp>
 800909a:	463a      	mov	r2, r7
 800909c:	9003      	str	r0, [sp, #12]
 800909e:	4631      	mov	r1, r6
 80090a0:	4620      	mov	r0, r4
 80090a2:	f000 ff67 	bl	8009f74 <__mdiff>
 80090a6:	68c2      	ldr	r2, [r0, #12]
 80090a8:	f109 3bff 	add.w	fp, r9, #4294967295
 80090ac:	4605      	mov	r5, r0
 80090ae:	bb02      	cbnz	r2, 80090f2 <_dtoa_r+0xa62>
 80090b0:	4601      	mov	r1, r0
 80090b2:	ee18 0a10 	vmov	r0, s16
 80090b6:	f000 ff41 	bl	8009f3c <__mcmp>
 80090ba:	4602      	mov	r2, r0
 80090bc:	4629      	mov	r1, r5
 80090be:	4620      	mov	r0, r4
 80090c0:	9207      	str	r2, [sp, #28]
 80090c2:	f000 fcaf 	bl	8009a24 <_Bfree>
 80090c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80090ca:	ea43 0102 	orr.w	r1, r3, r2
 80090ce:	9b04      	ldr	r3, [sp, #16]
 80090d0:	430b      	orrs	r3, r1
 80090d2:	464d      	mov	r5, r9
 80090d4:	d10f      	bne.n	80090f6 <_dtoa_r+0xa66>
 80090d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80090da:	d02a      	beq.n	8009132 <_dtoa_r+0xaa2>
 80090dc:	9b03      	ldr	r3, [sp, #12]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	dd02      	ble.n	80090e8 <_dtoa_r+0xa58>
 80090e2:	9b02      	ldr	r3, [sp, #8]
 80090e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80090e8:	f88b a000 	strb.w	sl, [fp]
 80090ec:	e775      	b.n	8008fda <_dtoa_r+0x94a>
 80090ee:	4638      	mov	r0, r7
 80090f0:	e7ba      	b.n	8009068 <_dtoa_r+0x9d8>
 80090f2:	2201      	movs	r2, #1
 80090f4:	e7e2      	b.n	80090bc <_dtoa_r+0xa2c>
 80090f6:	9b03      	ldr	r3, [sp, #12]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	db04      	blt.n	8009106 <_dtoa_r+0xa76>
 80090fc:	9906      	ldr	r1, [sp, #24]
 80090fe:	430b      	orrs	r3, r1
 8009100:	9904      	ldr	r1, [sp, #16]
 8009102:	430b      	orrs	r3, r1
 8009104:	d122      	bne.n	800914c <_dtoa_r+0xabc>
 8009106:	2a00      	cmp	r2, #0
 8009108:	ddee      	ble.n	80090e8 <_dtoa_r+0xa58>
 800910a:	ee18 1a10 	vmov	r1, s16
 800910e:	2201      	movs	r2, #1
 8009110:	4620      	mov	r0, r4
 8009112:	f000 fea3 	bl	8009e5c <__lshift>
 8009116:	4631      	mov	r1, r6
 8009118:	ee08 0a10 	vmov	s16, r0
 800911c:	f000 ff0e 	bl	8009f3c <__mcmp>
 8009120:	2800      	cmp	r0, #0
 8009122:	dc03      	bgt.n	800912c <_dtoa_r+0xa9c>
 8009124:	d1e0      	bne.n	80090e8 <_dtoa_r+0xa58>
 8009126:	f01a 0f01 	tst.w	sl, #1
 800912a:	d0dd      	beq.n	80090e8 <_dtoa_r+0xa58>
 800912c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009130:	d1d7      	bne.n	80090e2 <_dtoa_r+0xa52>
 8009132:	2339      	movs	r3, #57	; 0x39
 8009134:	f88b 3000 	strb.w	r3, [fp]
 8009138:	462b      	mov	r3, r5
 800913a:	461d      	mov	r5, r3
 800913c:	3b01      	subs	r3, #1
 800913e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009142:	2a39      	cmp	r2, #57	; 0x39
 8009144:	d071      	beq.n	800922a <_dtoa_r+0xb9a>
 8009146:	3201      	adds	r2, #1
 8009148:	701a      	strb	r2, [r3, #0]
 800914a:	e746      	b.n	8008fda <_dtoa_r+0x94a>
 800914c:	2a00      	cmp	r2, #0
 800914e:	dd07      	ble.n	8009160 <_dtoa_r+0xad0>
 8009150:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009154:	d0ed      	beq.n	8009132 <_dtoa_r+0xaa2>
 8009156:	f10a 0301 	add.w	r3, sl, #1
 800915a:	f88b 3000 	strb.w	r3, [fp]
 800915e:	e73c      	b.n	8008fda <_dtoa_r+0x94a>
 8009160:	9b05      	ldr	r3, [sp, #20]
 8009162:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009166:	4599      	cmp	r9, r3
 8009168:	d047      	beq.n	80091fa <_dtoa_r+0xb6a>
 800916a:	ee18 1a10 	vmov	r1, s16
 800916e:	2300      	movs	r3, #0
 8009170:	220a      	movs	r2, #10
 8009172:	4620      	mov	r0, r4
 8009174:	f000 fc78 	bl	8009a68 <__multadd>
 8009178:	45b8      	cmp	r8, r7
 800917a:	ee08 0a10 	vmov	s16, r0
 800917e:	f04f 0300 	mov.w	r3, #0
 8009182:	f04f 020a 	mov.w	r2, #10
 8009186:	4641      	mov	r1, r8
 8009188:	4620      	mov	r0, r4
 800918a:	d106      	bne.n	800919a <_dtoa_r+0xb0a>
 800918c:	f000 fc6c 	bl	8009a68 <__multadd>
 8009190:	4680      	mov	r8, r0
 8009192:	4607      	mov	r7, r0
 8009194:	f109 0901 	add.w	r9, r9, #1
 8009198:	e772      	b.n	8009080 <_dtoa_r+0x9f0>
 800919a:	f000 fc65 	bl	8009a68 <__multadd>
 800919e:	4639      	mov	r1, r7
 80091a0:	4680      	mov	r8, r0
 80091a2:	2300      	movs	r3, #0
 80091a4:	220a      	movs	r2, #10
 80091a6:	4620      	mov	r0, r4
 80091a8:	f000 fc5e 	bl	8009a68 <__multadd>
 80091ac:	4607      	mov	r7, r0
 80091ae:	e7f1      	b.n	8009194 <_dtoa_r+0xb04>
 80091b0:	9b03      	ldr	r3, [sp, #12]
 80091b2:	9302      	str	r3, [sp, #8]
 80091b4:	9d01      	ldr	r5, [sp, #4]
 80091b6:	ee18 0a10 	vmov	r0, s16
 80091ba:	4631      	mov	r1, r6
 80091bc:	f7ff f9dc 	bl	8008578 <quorem>
 80091c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80091c4:	9b01      	ldr	r3, [sp, #4]
 80091c6:	f805 ab01 	strb.w	sl, [r5], #1
 80091ca:	1aea      	subs	r2, r5, r3
 80091cc:	9b02      	ldr	r3, [sp, #8]
 80091ce:	4293      	cmp	r3, r2
 80091d0:	dd09      	ble.n	80091e6 <_dtoa_r+0xb56>
 80091d2:	ee18 1a10 	vmov	r1, s16
 80091d6:	2300      	movs	r3, #0
 80091d8:	220a      	movs	r2, #10
 80091da:	4620      	mov	r0, r4
 80091dc:	f000 fc44 	bl	8009a68 <__multadd>
 80091e0:	ee08 0a10 	vmov	s16, r0
 80091e4:	e7e7      	b.n	80091b6 <_dtoa_r+0xb26>
 80091e6:	9b02      	ldr	r3, [sp, #8]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	bfc8      	it	gt
 80091ec:	461d      	movgt	r5, r3
 80091ee:	9b01      	ldr	r3, [sp, #4]
 80091f0:	bfd8      	it	le
 80091f2:	2501      	movle	r5, #1
 80091f4:	441d      	add	r5, r3
 80091f6:	f04f 0800 	mov.w	r8, #0
 80091fa:	ee18 1a10 	vmov	r1, s16
 80091fe:	2201      	movs	r2, #1
 8009200:	4620      	mov	r0, r4
 8009202:	f000 fe2b 	bl	8009e5c <__lshift>
 8009206:	4631      	mov	r1, r6
 8009208:	ee08 0a10 	vmov	s16, r0
 800920c:	f000 fe96 	bl	8009f3c <__mcmp>
 8009210:	2800      	cmp	r0, #0
 8009212:	dc91      	bgt.n	8009138 <_dtoa_r+0xaa8>
 8009214:	d102      	bne.n	800921c <_dtoa_r+0xb8c>
 8009216:	f01a 0f01 	tst.w	sl, #1
 800921a:	d18d      	bne.n	8009138 <_dtoa_r+0xaa8>
 800921c:	462b      	mov	r3, r5
 800921e:	461d      	mov	r5, r3
 8009220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009224:	2a30      	cmp	r2, #48	; 0x30
 8009226:	d0fa      	beq.n	800921e <_dtoa_r+0xb8e>
 8009228:	e6d7      	b.n	8008fda <_dtoa_r+0x94a>
 800922a:	9a01      	ldr	r2, [sp, #4]
 800922c:	429a      	cmp	r2, r3
 800922e:	d184      	bne.n	800913a <_dtoa_r+0xaaa>
 8009230:	9b00      	ldr	r3, [sp, #0]
 8009232:	3301      	adds	r3, #1
 8009234:	9300      	str	r3, [sp, #0]
 8009236:	2331      	movs	r3, #49	; 0x31
 8009238:	7013      	strb	r3, [r2, #0]
 800923a:	e6ce      	b.n	8008fda <_dtoa_r+0x94a>
 800923c:	4b09      	ldr	r3, [pc, #36]	; (8009264 <_dtoa_r+0xbd4>)
 800923e:	f7ff ba95 	b.w	800876c <_dtoa_r+0xdc>
 8009242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009244:	2b00      	cmp	r3, #0
 8009246:	f47f aa6e 	bne.w	8008726 <_dtoa_r+0x96>
 800924a:	4b07      	ldr	r3, [pc, #28]	; (8009268 <_dtoa_r+0xbd8>)
 800924c:	f7ff ba8e 	b.w	800876c <_dtoa_r+0xdc>
 8009250:	9b02      	ldr	r3, [sp, #8]
 8009252:	2b00      	cmp	r3, #0
 8009254:	dcae      	bgt.n	80091b4 <_dtoa_r+0xb24>
 8009256:	9b06      	ldr	r3, [sp, #24]
 8009258:	2b02      	cmp	r3, #2
 800925a:	f73f aea8 	bgt.w	8008fae <_dtoa_r+0x91e>
 800925e:	e7a9      	b.n	80091b4 <_dtoa_r+0xb24>
 8009260:	0800b678 	.word	0x0800b678
 8009264:	0800b478 	.word	0x0800b478
 8009268:	0800b5f9 	.word	0x0800b5f9

0800926c <rshift>:
 800926c:	6903      	ldr	r3, [r0, #16]
 800926e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009272:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009276:	ea4f 1261 	mov.w	r2, r1, asr #5
 800927a:	f100 0414 	add.w	r4, r0, #20
 800927e:	dd45      	ble.n	800930c <rshift+0xa0>
 8009280:	f011 011f 	ands.w	r1, r1, #31
 8009284:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009288:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800928c:	d10c      	bne.n	80092a8 <rshift+0x3c>
 800928e:	f100 0710 	add.w	r7, r0, #16
 8009292:	4629      	mov	r1, r5
 8009294:	42b1      	cmp	r1, r6
 8009296:	d334      	bcc.n	8009302 <rshift+0x96>
 8009298:	1a9b      	subs	r3, r3, r2
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	1eea      	subs	r2, r5, #3
 800929e:	4296      	cmp	r6, r2
 80092a0:	bf38      	it	cc
 80092a2:	2300      	movcc	r3, #0
 80092a4:	4423      	add	r3, r4
 80092a6:	e015      	b.n	80092d4 <rshift+0x68>
 80092a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80092ac:	f1c1 0820 	rsb	r8, r1, #32
 80092b0:	40cf      	lsrs	r7, r1
 80092b2:	f105 0e04 	add.w	lr, r5, #4
 80092b6:	46a1      	mov	r9, r4
 80092b8:	4576      	cmp	r6, lr
 80092ba:	46f4      	mov	ip, lr
 80092bc:	d815      	bhi.n	80092ea <rshift+0x7e>
 80092be:	1a9a      	subs	r2, r3, r2
 80092c0:	0092      	lsls	r2, r2, #2
 80092c2:	3a04      	subs	r2, #4
 80092c4:	3501      	adds	r5, #1
 80092c6:	42ae      	cmp	r6, r5
 80092c8:	bf38      	it	cc
 80092ca:	2200      	movcc	r2, #0
 80092cc:	18a3      	adds	r3, r4, r2
 80092ce:	50a7      	str	r7, [r4, r2]
 80092d0:	b107      	cbz	r7, 80092d4 <rshift+0x68>
 80092d2:	3304      	adds	r3, #4
 80092d4:	1b1a      	subs	r2, r3, r4
 80092d6:	42a3      	cmp	r3, r4
 80092d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80092dc:	bf08      	it	eq
 80092de:	2300      	moveq	r3, #0
 80092e0:	6102      	str	r2, [r0, #16]
 80092e2:	bf08      	it	eq
 80092e4:	6143      	streq	r3, [r0, #20]
 80092e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092ea:	f8dc c000 	ldr.w	ip, [ip]
 80092ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80092f2:	ea4c 0707 	orr.w	r7, ip, r7
 80092f6:	f849 7b04 	str.w	r7, [r9], #4
 80092fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092fe:	40cf      	lsrs	r7, r1
 8009300:	e7da      	b.n	80092b8 <rshift+0x4c>
 8009302:	f851 cb04 	ldr.w	ip, [r1], #4
 8009306:	f847 cf04 	str.w	ip, [r7, #4]!
 800930a:	e7c3      	b.n	8009294 <rshift+0x28>
 800930c:	4623      	mov	r3, r4
 800930e:	e7e1      	b.n	80092d4 <rshift+0x68>

08009310 <__hexdig_fun>:
 8009310:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009314:	2b09      	cmp	r3, #9
 8009316:	d802      	bhi.n	800931e <__hexdig_fun+0xe>
 8009318:	3820      	subs	r0, #32
 800931a:	b2c0      	uxtb	r0, r0
 800931c:	4770      	bx	lr
 800931e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009322:	2b05      	cmp	r3, #5
 8009324:	d801      	bhi.n	800932a <__hexdig_fun+0x1a>
 8009326:	3847      	subs	r0, #71	; 0x47
 8009328:	e7f7      	b.n	800931a <__hexdig_fun+0xa>
 800932a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800932e:	2b05      	cmp	r3, #5
 8009330:	d801      	bhi.n	8009336 <__hexdig_fun+0x26>
 8009332:	3827      	subs	r0, #39	; 0x27
 8009334:	e7f1      	b.n	800931a <__hexdig_fun+0xa>
 8009336:	2000      	movs	r0, #0
 8009338:	4770      	bx	lr
	...

0800933c <__gethex>:
 800933c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009340:	ed2d 8b02 	vpush	{d8}
 8009344:	b089      	sub	sp, #36	; 0x24
 8009346:	ee08 0a10 	vmov	s16, r0
 800934a:	9304      	str	r3, [sp, #16]
 800934c:	4bb4      	ldr	r3, [pc, #720]	; (8009620 <__gethex+0x2e4>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	9301      	str	r3, [sp, #4]
 8009352:	4618      	mov	r0, r3
 8009354:	468b      	mov	fp, r1
 8009356:	4690      	mov	r8, r2
 8009358:	f7f6 ff42 	bl	80001e0 <strlen>
 800935c:	9b01      	ldr	r3, [sp, #4]
 800935e:	f8db 2000 	ldr.w	r2, [fp]
 8009362:	4403      	add	r3, r0
 8009364:	4682      	mov	sl, r0
 8009366:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800936a:	9305      	str	r3, [sp, #20]
 800936c:	1c93      	adds	r3, r2, #2
 800936e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009372:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009376:	32fe      	adds	r2, #254	; 0xfe
 8009378:	18d1      	adds	r1, r2, r3
 800937a:	461f      	mov	r7, r3
 800937c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009380:	9100      	str	r1, [sp, #0]
 8009382:	2830      	cmp	r0, #48	; 0x30
 8009384:	d0f8      	beq.n	8009378 <__gethex+0x3c>
 8009386:	f7ff ffc3 	bl	8009310 <__hexdig_fun>
 800938a:	4604      	mov	r4, r0
 800938c:	2800      	cmp	r0, #0
 800938e:	d13a      	bne.n	8009406 <__gethex+0xca>
 8009390:	9901      	ldr	r1, [sp, #4]
 8009392:	4652      	mov	r2, sl
 8009394:	4638      	mov	r0, r7
 8009396:	f7fe fa2d 	bl	80077f4 <strncmp>
 800939a:	4605      	mov	r5, r0
 800939c:	2800      	cmp	r0, #0
 800939e:	d168      	bne.n	8009472 <__gethex+0x136>
 80093a0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80093a4:	eb07 060a 	add.w	r6, r7, sl
 80093a8:	f7ff ffb2 	bl	8009310 <__hexdig_fun>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d062      	beq.n	8009476 <__gethex+0x13a>
 80093b0:	4633      	mov	r3, r6
 80093b2:	7818      	ldrb	r0, [r3, #0]
 80093b4:	2830      	cmp	r0, #48	; 0x30
 80093b6:	461f      	mov	r7, r3
 80093b8:	f103 0301 	add.w	r3, r3, #1
 80093bc:	d0f9      	beq.n	80093b2 <__gethex+0x76>
 80093be:	f7ff ffa7 	bl	8009310 <__hexdig_fun>
 80093c2:	2301      	movs	r3, #1
 80093c4:	fab0 f480 	clz	r4, r0
 80093c8:	0964      	lsrs	r4, r4, #5
 80093ca:	4635      	mov	r5, r6
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	463a      	mov	r2, r7
 80093d0:	4616      	mov	r6, r2
 80093d2:	3201      	adds	r2, #1
 80093d4:	7830      	ldrb	r0, [r6, #0]
 80093d6:	f7ff ff9b 	bl	8009310 <__hexdig_fun>
 80093da:	2800      	cmp	r0, #0
 80093dc:	d1f8      	bne.n	80093d0 <__gethex+0x94>
 80093de:	9901      	ldr	r1, [sp, #4]
 80093e0:	4652      	mov	r2, sl
 80093e2:	4630      	mov	r0, r6
 80093e4:	f7fe fa06 	bl	80077f4 <strncmp>
 80093e8:	b980      	cbnz	r0, 800940c <__gethex+0xd0>
 80093ea:	b94d      	cbnz	r5, 8009400 <__gethex+0xc4>
 80093ec:	eb06 050a 	add.w	r5, r6, sl
 80093f0:	462a      	mov	r2, r5
 80093f2:	4616      	mov	r6, r2
 80093f4:	3201      	adds	r2, #1
 80093f6:	7830      	ldrb	r0, [r6, #0]
 80093f8:	f7ff ff8a 	bl	8009310 <__hexdig_fun>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d1f8      	bne.n	80093f2 <__gethex+0xb6>
 8009400:	1bad      	subs	r5, r5, r6
 8009402:	00ad      	lsls	r5, r5, #2
 8009404:	e004      	b.n	8009410 <__gethex+0xd4>
 8009406:	2400      	movs	r4, #0
 8009408:	4625      	mov	r5, r4
 800940a:	e7e0      	b.n	80093ce <__gethex+0x92>
 800940c:	2d00      	cmp	r5, #0
 800940e:	d1f7      	bne.n	8009400 <__gethex+0xc4>
 8009410:	7833      	ldrb	r3, [r6, #0]
 8009412:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009416:	2b50      	cmp	r3, #80	; 0x50
 8009418:	d13b      	bne.n	8009492 <__gethex+0x156>
 800941a:	7873      	ldrb	r3, [r6, #1]
 800941c:	2b2b      	cmp	r3, #43	; 0x2b
 800941e:	d02c      	beq.n	800947a <__gethex+0x13e>
 8009420:	2b2d      	cmp	r3, #45	; 0x2d
 8009422:	d02e      	beq.n	8009482 <__gethex+0x146>
 8009424:	1c71      	adds	r1, r6, #1
 8009426:	f04f 0900 	mov.w	r9, #0
 800942a:	7808      	ldrb	r0, [r1, #0]
 800942c:	f7ff ff70 	bl	8009310 <__hexdig_fun>
 8009430:	1e43      	subs	r3, r0, #1
 8009432:	b2db      	uxtb	r3, r3
 8009434:	2b18      	cmp	r3, #24
 8009436:	d82c      	bhi.n	8009492 <__gethex+0x156>
 8009438:	f1a0 0210 	sub.w	r2, r0, #16
 800943c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009440:	f7ff ff66 	bl	8009310 <__hexdig_fun>
 8009444:	1e43      	subs	r3, r0, #1
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2b18      	cmp	r3, #24
 800944a:	d91d      	bls.n	8009488 <__gethex+0x14c>
 800944c:	f1b9 0f00 	cmp.w	r9, #0
 8009450:	d000      	beq.n	8009454 <__gethex+0x118>
 8009452:	4252      	negs	r2, r2
 8009454:	4415      	add	r5, r2
 8009456:	f8cb 1000 	str.w	r1, [fp]
 800945a:	b1e4      	cbz	r4, 8009496 <__gethex+0x15a>
 800945c:	9b00      	ldr	r3, [sp, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	bf14      	ite	ne
 8009462:	2700      	movne	r7, #0
 8009464:	2706      	moveq	r7, #6
 8009466:	4638      	mov	r0, r7
 8009468:	b009      	add	sp, #36	; 0x24
 800946a:	ecbd 8b02 	vpop	{d8}
 800946e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009472:	463e      	mov	r6, r7
 8009474:	4625      	mov	r5, r4
 8009476:	2401      	movs	r4, #1
 8009478:	e7ca      	b.n	8009410 <__gethex+0xd4>
 800947a:	f04f 0900 	mov.w	r9, #0
 800947e:	1cb1      	adds	r1, r6, #2
 8009480:	e7d3      	b.n	800942a <__gethex+0xee>
 8009482:	f04f 0901 	mov.w	r9, #1
 8009486:	e7fa      	b.n	800947e <__gethex+0x142>
 8009488:	230a      	movs	r3, #10
 800948a:	fb03 0202 	mla	r2, r3, r2, r0
 800948e:	3a10      	subs	r2, #16
 8009490:	e7d4      	b.n	800943c <__gethex+0x100>
 8009492:	4631      	mov	r1, r6
 8009494:	e7df      	b.n	8009456 <__gethex+0x11a>
 8009496:	1bf3      	subs	r3, r6, r7
 8009498:	3b01      	subs	r3, #1
 800949a:	4621      	mov	r1, r4
 800949c:	2b07      	cmp	r3, #7
 800949e:	dc0b      	bgt.n	80094b8 <__gethex+0x17c>
 80094a0:	ee18 0a10 	vmov	r0, s16
 80094a4:	f000 fa7e 	bl	80099a4 <_Balloc>
 80094a8:	4604      	mov	r4, r0
 80094aa:	b940      	cbnz	r0, 80094be <__gethex+0x182>
 80094ac:	4b5d      	ldr	r3, [pc, #372]	; (8009624 <__gethex+0x2e8>)
 80094ae:	4602      	mov	r2, r0
 80094b0:	21de      	movs	r1, #222	; 0xde
 80094b2:	485d      	ldr	r0, [pc, #372]	; (8009628 <__gethex+0x2ec>)
 80094b4:	f001 f9b2 	bl	800a81c <__assert_func>
 80094b8:	3101      	adds	r1, #1
 80094ba:	105b      	asrs	r3, r3, #1
 80094bc:	e7ee      	b.n	800949c <__gethex+0x160>
 80094be:	f100 0914 	add.w	r9, r0, #20
 80094c2:	f04f 0b00 	mov.w	fp, #0
 80094c6:	f1ca 0301 	rsb	r3, sl, #1
 80094ca:	f8cd 9008 	str.w	r9, [sp, #8]
 80094ce:	f8cd b000 	str.w	fp, [sp]
 80094d2:	9306      	str	r3, [sp, #24]
 80094d4:	42b7      	cmp	r7, r6
 80094d6:	d340      	bcc.n	800955a <__gethex+0x21e>
 80094d8:	9802      	ldr	r0, [sp, #8]
 80094da:	9b00      	ldr	r3, [sp, #0]
 80094dc:	f840 3b04 	str.w	r3, [r0], #4
 80094e0:	eba0 0009 	sub.w	r0, r0, r9
 80094e4:	1080      	asrs	r0, r0, #2
 80094e6:	0146      	lsls	r6, r0, #5
 80094e8:	6120      	str	r0, [r4, #16]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 fb4c 	bl	8009b88 <__hi0bits>
 80094f0:	1a30      	subs	r0, r6, r0
 80094f2:	f8d8 6000 	ldr.w	r6, [r8]
 80094f6:	42b0      	cmp	r0, r6
 80094f8:	dd63      	ble.n	80095c2 <__gethex+0x286>
 80094fa:	1b87      	subs	r7, r0, r6
 80094fc:	4639      	mov	r1, r7
 80094fe:	4620      	mov	r0, r4
 8009500:	f000 fef0 	bl	800a2e4 <__any_on>
 8009504:	4682      	mov	sl, r0
 8009506:	b1a8      	cbz	r0, 8009534 <__gethex+0x1f8>
 8009508:	1e7b      	subs	r3, r7, #1
 800950a:	1159      	asrs	r1, r3, #5
 800950c:	f003 021f 	and.w	r2, r3, #31
 8009510:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009514:	f04f 0a01 	mov.w	sl, #1
 8009518:	fa0a f202 	lsl.w	r2, sl, r2
 800951c:	420a      	tst	r2, r1
 800951e:	d009      	beq.n	8009534 <__gethex+0x1f8>
 8009520:	4553      	cmp	r3, sl
 8009522:	dd05      	ble.n	8009530 <__gethex+0x1f4>
 8009524:	1eb9      	subs	r1, r7, #2
 8009526:	4620      	mov	r0, r4
 8009528:	f000 fedc 	bl	800a2e4 <__any_on>
 800952c:	2800      	cmp	r0, #0
 800952e:	d145      	bne.n	80095bc <__gethex+0x280>
 8009530:	f04f 0a02 	mov.w	sl, #2
 8009534:	4639      	mov	r1, r7
 8009536:	4620      	mov	r0, r4
 8009538:	f7ff fe98 	bl	800926c <rshift>
 800953c:	443d      	add	r5, r7
 800953e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009542:	42ab      	cmp	r3, r5
 8009544:	da4c      	bge.n	80095e0 <__gethex+0x2a4>
 8009546:	ee18 0a10 	vmov	r0, s16
 800954a:	4621      	mov	r1, r4
 800954c:	f000 fa6a 	bl	8009a24 <_Bfree>
 8009550:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009552:	2300      	movs	r3, #0
 8009554:	6013      	str	r3, [r2, #0]
 8009556:	27a3      	movs	r7, #163	; 0xa3
 8009558:	e785      	b.n	8009466 <__gethex+0x12a>
 800955a:	1e73      	subs	r3, r6, #1
 800955c:	9a05      	ldr	r2, [sp, #20]
 800955e:	9303      	str	r3, [sp, #12]
 8009560:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009564:	4293      	cmp	r3, r2
 8009566:	d019      	beq.n	800959c <__gethex+0x260>
 8009568:	f1bb 0f20 	cmp.w	fp, #32
 800956c:	d107      	bne.n	800957e <__gethex+0x242>
 800956e:	9b02      	ldr	r3, [sp, #8]
 8009570:	9a00      	ldr	r2, [sp, #0]
 8009572:	f843 2b04 	str.w	r2, [r3], #4
 8009576:	9302      	str	r3, [sp, #8]
 8009578:	2300      	movs	r3, #0
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	469b      	mov	fp, r3
 800957e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009582:	f7ff fec5 	bl	8009310 <__hexdig_fun>
 8009586:	9b00      	ldr	r3, [sp, #0]
 8009588:	f000 000f 	and.w	r0, r0, #15
 800958c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009590:	4303      	orrs	r3, r0
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	f10b 0b04 	add.w	fp, fp, #4
 8009598:	9b03      	ldr	r3, [sp, #12]
 800959a:	e00d      	b.n	80095b8 <__gethex+0x27c>
 800959c:	9b03      	ldr	r3, [sp, #12]
 800959e:	9a06      	ldr	r2, [sp, #24]
 80095a0:	4413      	add	r3, r2
 80095a2:	42bb      	cmp	r3, r7
 80095a4:	d3e0      	bcc.n	8009568 <__gethex+0x22c>
 80095a6:	4618      	mov	r0, r3
 80095a8:	9901      	ldr	r1, [sp, #4]
 80095aa:	9307      	str	r3, [sp, #28]
 80095ac:	4652      	mov	r2, sl
 80095ae:	f7fe f921 	bl	80077f4 <strncmp>
 80095b2:	9b07      	ldr	r3, [sp, #28]
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d1d7      	bne.n	8009568 <__gethex+0x22c>
 80095b8:	461e      	mov	r6, r3
 80095ba:	e78b      	b.n	80094d4 <__gethex+0x198>
 80095bc:	f04f 0a03 	mov.w	sl, #3
 80095c0:	e7b8      	b.n	8009534 <__gethex+0x1f8>
 80095c2:	da0a      	bge.n	80095da <__gethex+0x29e>
 80095c4:	1a37      	subs	r7, r6, r0
 80095c6:	4621      	mov	r1, r4
 80095c8:	ee18 0a10 	vmov	r0, s16
 80095cc:	463a      	mov	r2, r7
 80095ce:	f000 fc45 	bl	8009e5c <__lshift>
 80095d2:	1bed      	subs	r5, r5, r7
 80095d4:	4604      	mov	r4, r0
 80095d6:	f100 0914 	add.w	r9, r0, #20
 80095da:	f04f 0a00 	mov.w	sl, #0
 80095de:	e7ae      	b.n	800953e <__gethex+0x202>
 80095e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80095e4:	42a8      	cmp	r0, r5
 80095e6:	dd72      	ble.n	80096ce <__gethex+0x392>
 80095e8:	1b45      	subs	r5, r0, r5
 80095ea:	42ae      	cmp	r6, r5
 80095ec:	dc36      	bgt.n	800965c <__gethex+0x320>
 80095ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	d02a      	beq.n	800964c <__gethex+0x310>
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d02c      	beq.n	8009654 <__gethex+0x318>
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d11c      	bne.n	8009638 <__gethex+0x2fc>
 80095fe:	42ae      	cmp	r6, r5
 8009600:	d11a      	bne.n	8009638 <__gethex+0x2fc>
 8009602:	2e01      	cmp	r6, #1
 8009604:	d112      	bne.n	800962c <__gethex+0x2f0>
 8009606:	9a04      	ldr	r2, [sp, #16]
 8009608:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800960c:	6013      	str	r3, [r2, #0]
 800960e:	2301      	movs	r3, #1
 8009610:	6123      	str	r3, [r4, #16]
 8009612:	f8c9 3000 	str.w	r3, [r9]
 8009616:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009618:	2762      	movs	r7, #98	; 0x62
 800961a:	601c      	str	r4, [r3, #0]
 800961c:	e723      	b.n	8009466 <__gethex+0x12a>
 800961e:	bf00      	nop
 8009620:	0800b6f0 	.word	0x0800b6f0
 8009624:	0800b678 	.word	0x0800b678
 8009628:	0800b689 	.word	0x0800b689
 800962c:	1e71      	subs	r1, r6, #1
 800962e:	4620      	mov	r0, r4
 8009630:	f000 fe58 	bl	800a2e4 <__any_on>
 8009634:	2800      	cmp	r0, #0
 8009636:	d1e6      	bne.n	8009606 <__gethex+0x2ca>
 8009638:	ee18 0a10 	vmov	r0, s16
 800963c:	4621      	mov	r1, r4
 800963e:	f000 f9f1 	bl	8009a24 <_Bfree>
 8009642:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009644:	2300      	movs	r3, #0
 8009646:	6013      	str	r3, [r2, #0]
 8009648:	2750      	movs	r7, #80	; 0x50
 800964a:	e70c      	b.n	8009466 <__gethex+0x12a>
 800964c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1f2      	bne.n	8009638 <__gethex+0x2fc>
 8009652:	e7d8      	b.n	8009606 <__gethex+0x2ca>
 8009654:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1d5      	bne.n	8009606 <__gethex+0x2ca>
 800965a:	e7ed      	b.n	8009638 <__gethex+0x2fc>
 800965c:	1e6f      	subs	r7, r5, #1
 800965e:	f1ba 0f00 	cmp.w	sl, #0
 8009662:	d131      	bne.n	80096c8 <__gethex+0x38c>
 8009664:	b127      	cbz	r7, 8009670 <__gethex+0x334>
 8009666:	4639      	mov	r1, r7
 8009668:	4620      	mov	r0, r4
 800966a:	f000 fe3b 	bl	800a2e4 <__any_on>
 800966e:	4682      	mov	sl, r0
 8009670:	117b      	asrs	r3, r7, #5
 8009672:	2101      	movs	r1, #1
 8009674:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009678:	f007 071f 	and.w	r7, r7, #31
 800967c:	fa01 f707 	lsl.w	r7, r1, r7
 8009680:	421f      	tst	r7, r3
 8009682:	4629      	mov	r1, r5
 8009684:	4620      	mov	r0, r4
 8009686:	bf18      	it	ne
 8009688:	f04a 0a02 	orrne.w	sl, sl, #2
 800968c:	1b76      	subs	r6, r6, r5
 800968e:	f7ff fded 	bl	800926c <rshift>
 8009692:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009696:	2702      	movs	r7, #2
 8009698:	f1ba 0f00 	cmp.w	sl, #0
 800969c:	d048      	beq.n	8009730 <__gethex+0x3f4>
 800969e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d015      	beq.n	80096d2 <__gethex+0x396>
 80096a6:	2b03      	cmp	r3, #3
 80096a8:	d017      	beq.n	80096da <__gethex+0x39e>
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d109      	bne.n	80096c2 <__gethex+0x386>
 80096ae:	f01a 0f02 	tst.w	sl, #2
 80096b2:	d006      	beq.n	80096c2 <__gethex+0x386>
 80096b4:	f8d9 0000 	ldr.w	r0, [r9]
 80096b8:	ea4a 0a00 	orr.w	sl, sl, r0
 80096bc:	f01a 0f01 	tst.w	sl, #1
 80096c0:	d10e      	bne.n	80096e0 <__gethex+0x3a4>
 80096c2:	f047 0710 	orr.w	r7, r7, #16
 80096c6:	e033      	b.n	8009730 <__gethex+0x3f4>
 80096c8:	f04f 0a01 	mov.w	sl, #1
 80096cc:	e7d0      	b.n	8009670 <__gethex+0x334>
 80096ce:	2701      	movs	r7, #1
 80096d0:	e7e2      	b.n	8009698 <__gethex+0x35c>
 80096d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096d4:	f1c3 0301 	rsb	r3, r3, #1
 80096d8:	9315      	str	r3, [sp, #84]	; 0x54
 80096da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d0f0      	beq.n	80096c2 <__gethex+0x386>
 80096e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80096e4:	f104 0314 	add.w	r3, r4, #20
 80096e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80096ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80096f0:	f04f 0c00 	mov.w	ip, #0
 80096f4:	4618      	mov	r0, r3
 80096f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 80096fe:	d01c      	beq.n	800973a <__gethex+0x3fe>
 8009700:	3201      	adds	r2, #1
 8009702:	6002      	str	r2, [r0, #0]
 8009704:	2f02      	cmp	r7, #2
 8009706:	f104 0314 	add.w	r3, r4, #20
 800970a:	d13f      	bne.n	800978c <__gethex+0x450>
 800970c:	f8d8 2000 	ldr.w	r2, [r8]
 8009710:	3a01      	subs	r2, #1
 8009712:	42b2      	cmp	r2, r6
 8009714:	d10a      	bne.n	800972c <__gethex+0x3f0>
 8009716:	1171      	asrs	r1, r6, #5
 8009718:	2201      	movs	r2, #1
 800971a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800971e:	f006 061f 	and.w	r6, r6, #31
 8009722:	fa02 f606 	lsl.w	r6, r2, r6
 8009726:	421e      	tst	r6, r3
 8009728:	bf18      	it	ne
 800972a:	4617      	movne	r7, r2
 800972c:	f047 0720 	orr.w	r7, r7, #32
 8009730:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009732:	601c      	str	r4, [r3, #0]
 8009734:	9b04      	ldr	r3, [sp, #16]
 8009736:	601d      	str	r5, [r3, #0]
 8009738:	e695      	b.n	8009466 <__gethex+0x12a>
 800973a:	4299      	cmp	r1, r3
 800973c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009740:	d8d8      	bhi.n	80096f4 <__gethex+0x3b8>
 8009742:	68a3      	ldr	r3, [r4, #8]
 8009744:	459b      	cmp	fp, r3
 8009746:	db19      	blt.n	800977c <__gethex+0x440>
 8009748:	6861      	ldr	r1, [r4, #4]
 800974a:	ee18 0a10 	vmov	r0, s16
 800974e:	3101      	adds	r1, #1
 8009750:	f000 f928 	bl	80099a4 <_Balloc>
 8009754:	4681      	mov	r9, r0
 8009756:	b918      	cbnz	r0, 8009760 <__gethex+0x424>
 8009758:	4b1a      	ldr	r3, [pc, #104]	; (80097c4 <__gethex+0x488>)
 800975a:	4602      	mov	r2, r0
 800975c:	2184      	movs	r1, #132	; 0x84
 800975e:	e6a8      	b.n	80094b2 <__gethex+0x176>
 8009760:	6922      	ldr	r2, [r4, #16]
 8009762:	3202      	adds	r2, #2
 8009764:	f104 010c 	add.w	r1, r4, #12
 8009768:	0092      	lsls	r2, r2, #2
 800976a:	300c      	adds	r0, #12
 800976c:	f000 f90c 	bl	8009988 <memcpy>
 8009770:	4621      	mov	r1, r4
 8009772:	ee18 0a10 	vmov	r0, s16
 8009776:	f000 f955 	bl	8009a24 <_Bfree>
 800977a:	464c      	mov	r4, r9
 800977c:	6923      	ldr	r3, [r4, #16]
 800977e:	1c5a      	adds	r2, r3, #1
 8009780:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009784:	6122      	str	r2, [r4, #16]
 8009786:	2201      	movs	r2, #1
 8009788:	615a      	str	r2, [r3, #20]
 800978a:	e7bb      	b.n	8009704 <__gethex+0x3c8>
 800978c:	6922      	ldr	r2, [r4, #16]
 800978e:	455a      	cmp	r2, fp
 8009790:	dd0b      	ble.n	80097aa <__gethex+0x46e>
 8009792:	2101      	movs	r1, #1
 8009794:	4620      	mov	r0, r4
 8009796:	f7ff fd69 	bl	800926c <rshift>
 800979a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800979e:	3501      	adds	r5, #1
 80097a0:	42ab      	cmp	r3, r5
 80097a2:	f6ff aed0 	blt.w	8009546 <__gethex+0x20a>
 80097a6:	2701      	movs	r7, #1
 80097a8:	e7c0      	b.n	800972c <__gethex+0x3f0>
 80097aa:	f016 061f 	ands.w	r6, r6, #31
 80097ae:	d0fa      	beq.n	80097a6 <__gethex+0x46a>
 80097b0:	4453      	add	r3, sl
 80097b2:	f1c6 0620 	rsb	r6, r6, #32
 80097b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80097ba:	f000 f9e5 	bl	8009b88 <__hi0bits>
 80097be:	42b0      	cmp	r0, r6
 80097c0:	dbe7      	blt.n	8009792 <__gethex+0x456>
 80097c2:	e7f0      	b.n	80097a6 <__gethex+0x46a>
 80097c4:	0800b678 	.word	0x0800b678

080097c8 <L_shift>:
 80097c8:	f1c2 0208 	rsb	r2, r2, #8
 80097cc:	0092      	lsls	r2, r2, #2
 80097ce:	b570      	push	{r4, r5, r6, lr}
 80097d0:	f1c2 0620 	rsb	r6, r2, #32
 80097d4:	6843      	ldr	r3, [r0, #4]
 80097d6:	6804      	ldr	r4, [r0, #0]
 80097d8:	fa03 f506 	lsl.w	r5, r3, r6
 80097dc:	432c      	orrs	r4, r5
 80097de:	40d3      	lsrs	r3, r2
 80097e0:	6004      	str	r4, [r0, #0]
 80097e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80097e6:	4288      	cmp	r0, r1
 80097e8:	d3f4      	bcc.n	80097d4 <L_shift+0xc>
 80097ea:	bd70      	pop	{r4, r5, r6, pc}

080097ec <__match>:
 80097ec:	b530      	push	{r4, r5, lr}
 80097ee:	6803      	ldr	r3, [r0, #0]
 80097f0:	3301      	adds	r3, #1
 80097f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097f6:	b914      	cbnz	r4, 80097fe <__match+0x12>
 80097f8:	6003      	str	r3, [r0, #0]
 80097fa:	2001      	movs	r0, #1
 80097fc:	bd30      	pop	{r4, r5, pc}
 80097fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009802:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009806:	2d19      	cmp	r5, #25
 8009808:	bf98      	it	ls
 800980a:	3220      	addls	r2, #32
 800980c:	42a2      	cmp	r2, r4
 800980e:	d0f0      	beq.n	80097f2 <__match+0x6>
 8009810:	2000      	movs	r0, #0
 8009812:	e7f3      	b.n	80097fc <__match+0x10>

08009814 <__hexnan>:
 8009814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009818:	680b      	ldr	r3, [r1, #0]
 800981a:	115e      	asrs	r6, r3, #5
 800981c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009820:	f013 031f 	ands.w	r3, r3, #31
 8009824:	b087      	sub	sp, #28
 8009826:	bf18      	it	ne
 8009828:	3604      	addne	r6, #4
 800982a:	2500      	movs	r5, #0
 800982c:	1f37      	subs	r7, r6, #4
 800982e:	4690      	mov	r8, r2
 8009830:	6802      	ldr	r2, [r0, #0]
 8009832:	9301      	str	r3, [sp, #4]
 8009834:	4682      	mov	sl, r0
 8009836:	f846 5c04 	str.w	r5, [r6, #-4]
 800983a:	46b9      	mov	r9, r7
 800983c:	463c      	mov	r4, r7
 800983e:	9502      	str	r5, [sp, #8]
 8009840:	46ab      	mov	fp, r5
 8009842:	7851      	ldrb	r1, [r2, #1]
 8009844:	1c53      	adds	r3, r2, #1
 8009846:	9303      	str	r3, [sp, #12]
 8009848:	b341      	cbz	r1, 800989c <__hexnan+0x88>
 800984a:	4608      	mov	r0, r1
 800984c:	9205      	str	r2, [sp, #20]
 800984e:	9104      	str	r1, [sp, #16]
 8009850:	f7ff fd5e 	bl	8009310 <__hexdig_fun>
 8009854:	2800      	cmp	r0, #0
 8009856:	d14f      	bne.n	80098f8 <__hexnan+0xe4>
 8009858:	9904      	ldr	r1, [sp, #16]
 800985a:	9a05      	ldr	r2, [sp, #20]
 800985c:	2920      	cmp	r1, #32
 800985e:	d818      	bhi.n	8009892 <__hexnan+0x7e>
 8009860:	9b02      	ldr	r3, [sp, #8]
 8009862:	459b      	cmp	fp, r3
 8009864:	dd13      	ble.n	800988e <__hexnan+0x7a>
 8009866:	454c      	cmp	r4, r9
 8009868:	d206      	bcs.n	8009878 <__hexnan+0x64>
 800986a:	2d07      	cmp	r5, #7
 800986c:	dc04      	bgt.n	8009878 <__hexnan+0x64>
 800986e:	462a      	mov	r2, r5
 8009870:	4649      	mov	r1, r9
 8009872:	4620      	mov	r0, r4
 8009874:	f7ff ffa8 	bl	80097c8 <L_shift>
 8009878:	4544      	cmp	r4, r8
 800987a:	d950      	bls.n	800991e <__hexnan+0x10a>
 800987c:	2300      	movs	r3, #0
 800987e:	f1a4 0904 	sub.w	r9, r4, #4
 8009882:	f844 3c04 	str.w	r3, [r4, #-4]
 8009886:	f8cd b008 	str.w	fp, [sp, #8]
 800988a:	464c      	mov	r4, r9
 800988c:	461d      	mov	r5, r3
 800988e:	9a03      	ldr	r2, [sp, #12]
 8009890:	e7d7      	b.n	8009842 <__hexnan+0x2e>
 8009892:	2929      	cmp	r1, #41	; 0x29
 8009894:	d156      	bne.n	8009944 <__hexnan+0x130>
 8009896:	3202      	adds	r2, #2
 8009898:	f8ca 2000 	str.w	r2, [sl]
 800989c:	f1bb 0f00 	cmp.w	fp, #0
 80098a0:	d050      	beq.n	8009944 <__hexnan+0x130>
 80098a2:	454c      	cmp	r4, r9
 80098a4:	d206      	bcs.n	80098b4 <__hexnan+0xa0>
 80098a6:	2d07      	cmp	r5, #7
 80098a8:	dc04      	bgt.n	80098b4 <__hexnan+0xa0>
 80098aa:	462a      	mov	r2, r5
 80098ac:	4649      	mov	r1, r9
 80098ae:	4620      	mov	r0, r4
 80098b0:	f7ff ff8a 	bl	80097c8 <L_shift>
 80098b4:	4544      	cmp	r4, r8
 80098b6:	d934      	bls.n	8009922 <__hexnan+0x10e>
 80098b8:	f1a8 0204 	sub.w	r2, r8, #4
 80098bc:	4623      	mov	r3, r4
 80098be:	f853 1b04 	ldr.w	r1, [r3], #4
 80098c2:	f842 1f04 	str.w	r1, [r2, #4]!
 80098c6:	429f      	cmp	r7, r3
 80098c8:	d2f9      	bcs.n	80098be <__hexnan+0xaa>
 80098ca:	1b3b      	subs	r3, r7, r4
 80098cc:	f023 0303 	bic.w	r3, r3, #3
 80098d0:	3304      	adds	r3, #4
 80098d2:	3401      	adds	r4, #1
 80098d4:	3e03      	subs	r6, #3
 80098d6:	42b4      	cmp	r4, r6
 80098d8:	bf88      	it	hi
 80098da:	2304      	movhi	r3, #4
 80098dc:	4443      	add	r3, r8
 80098de:	2200      	movs	r2, #0
 80098e0:	f843 2b04 	str.w	r2, [r3], #4
 80098e4:	429f      	cmp	r7, r3
 80098e6:	d2fb      	bcs.n	80098e0 <__hexnan+0xcc>
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	b91b      	cbnz	r3, 80098f4 <__hexnan+0xe0>
 80098ec:	4547      	cmp	r7, r8
 80098ee:	d127      	bne.n	8009940 <__hexnan+0x12c>
 80098f0:	2301      	movs	r3, #1
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	2005      	movs	r0, #5
 80098f6:	e026      	b.n	8009946 <__hexnan+0x132>
 80098f8:	3501      	adds	r5, #1
 80098fa:	2d08      	cmp	r5, #8
 80098fc:	f10b 0b01 	add.w	fp, fp, #1
 8009900:	dd06      	ble.n	8009910 <__hexnan+0xfc>
 8009902:	4544      	cmp	r4, r8
 8009904:	d9c3      	bls.n	800988e <__hexnan+0x7a>
 8009906:	2300      	movs	r3, #0
 8009908:	f844 3c04 	str.w	r3, [r4, #-4]
 800990c:	2501      	movs	r5, #1
 800990e:	3c04      	subs	r4, #4
 8009910:	6822      	ldr	r2, [r4, #0]
 8009912:	f000 000f 	and.w	r0, r0, #15
 8009916:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800991a:	6022      	str	r2, [r4, #0]
 800991c:	e7b7      	b.n	800988e <__hexnan+0x7a>
 800991e:	2508      	movs	r5, #8
 8009920:	e7b5      	b.n	800988e <__hexnan+0x7a>
 8009922:	9b01      	ldr	r3, [sp, #4]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d0df      	beq.n	80098e8 <__hexnan+0xd4>
 8009928:	f04f 32ff 	mov.w	r2, #4294967295
 800992c:	f1c3 0320 	rsb	r3, r3, #32
 8009930:	fa22 f303 	lsr.w	r3, r2, r3
 8009934:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009938:	401a      	ands	r2, r3
 800993a:	f846 2c04 	str.w	r2, [r6, #-4]
 800993e:	e7d3      	b.n	80098e8 <__hexnan+0xd4>
 8009940:	3f04      	subs	r7, #4
 8009942:	e7d1      	b.n	80098e8 <__hexnan+0xd4>
 8009944:	2004      	movs	r0, #4
 8009946:	b007      	add	sp, #28
 8009948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800994c <_localeconv_r>:
 800994c:	4800      	ldr	r0, [pc, #0]	; (8009950 <_localeconv_r+0x4>)
 800994e:	4770      	bx	lr
 8009950:	20000164 	.word	0x20000164

08009954 <malloc>:
 8009954:	4b02      	ldr	r3, [pc, #8]	; (8009960 <malloc+0xc>)
 8009956:	4601      	mov	r1, r0
 8009958:	6818      	ldr	r0, [r3, #0]
 800995a:	f000 bd67 	b.w	800a42c <_malloc_r>
 800995e:	bf00      	nop
 8009960:	2000000c 	.word	0x2000000c

08009964 <__ascii_mbtowc>:
 8009964:	b082      	sub	sp, #8
 8009966:	b901      	cbnz	r1, 800996a <__ascii_mbtowc+0x6>
 8009968:	a901      	add	r1, sp, #4
 800996a:	b142      	cbz	r2, 800997e <__ascii_mbtowc+0x1a>
 800996c:	b14b      	cbz	r3, 8009982 <__ascii_mbtowc+0x1e>
 800996e:	7813      	ldrb	r3, [r2, #0]
 8009970:	600b      	str	r3, [r1, #0]
 8009972:	7812      	ldrb	r2, [r2, #0]
 8009974:	1e10      	subs	r0, r2, #0
 8009976:	bf18      	it	ne
 8009978:	2001      	movne	r0, #1
 800997a:	b002      	add	sp, #8
 800997c:	4770      	bx	lr
 800997e:	4610      	mov	r0, r2
 8009980:	e7fb      	b.n	800997a <__ascii_mbtowc+0x16>
 8009982:	f06f 0001 	mvn.w	r0, #1
 8009986:	e7f8      	b.n	800997a <__ascii_mbtowc+0x16>

08009988 <memcpy>:
 8009988:	440a      	add	r2, r1
 800998a:	4291      	cmp	r1, r2
 800998c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009990:	d100      	bne.n	8009994 <memcpy+0xc>
 8009992:	4770      	bx	lr
 8009994:	b510      	push	{r4, lr}
 8009996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800999a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800999e:	4291      	cmp	r1, r2
 80099a0:	d1f9      	bne.n	8009996 <memcpy+0xe>
 80099a2:	bd10      	pop	{r4, pc}

080099a4 <_Balloc>:
 80099a4:	b570      	push	{r4, r5, r6, lr}
 80099a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099a8:	4604      	mov	r4, r0
 80099aa:	460d      	mov	r5, r1
 80099ac:	b976      	cbnz	r6, 80099cc <_Balloc+0x28>
 80099ae:	2010      	movs	r0, #16
 80099b0:	f7ff ffd0 	bl	8009954 <malloc>
 80099b4:	4602      	mov	r2, r0
 80099b6:	6260      	str	r0, [r4, #36]	; 0x24
 80099b8:	b920      	cbnz	r0, 80099c4 <_Balloc+0x20>
 80099ba:	4b18      	ldr	r3, [pc, #96]	; (8009a1c <_Balloc+0x78>)
 80099bc:	4818      	ldr	r0, [pc, #96]	; (8009a20 <_Balloc+0x7c>)
 80099be:	2166      	movs	r1, #102	; 0x66
 80099c0:	f000 ff2c 	bl	800a81c <__assert_func>
 80099c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099c8:	6006      	str	r6, [r0, #0]
 80099ca:	60c6      	str	r6, [r0, #12]
 80099cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80099ce:	68f3      	ldr	r3, [r6, #12]
 80099d0:	b183      	cbz	r3, 80099f4 <_Balloc+0x50>
 80099d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099da:	b9b8      	cbnz	r0, 8009a0c <_Balloc+0x68>
 80099dc:	2101      	movs	r1, #1
 80099de:	fa01 f605 	lsl.w	r6, r1, r5
 80099e2:	1d72      	adds	r2, r6, #5
 80099e4:	0092      	lsls	r2, r2, #2
 80099e6:	4620      	mov	r0, r4
 80099e8:	f000 fc9d 	bl	800a326 <_calloc_r>
 80099ec:	b160      	cbz	r0, 8009a08 <_Balloc+0x64>
 80099ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80099f2:	e00e      	b.n	8009a12 <_Balloc+0x6e>
 80099f4:	2221      	movs	r2, #33	; 0x21
 80099f6:	2104      	movs	r1, #4
 80099f8:	4620      	mov	r0, r4
 80099fa:	f000 fc94 	bl	800a326 <_calloc_r>
 80099fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a00:	60f0      	str	r0, [r6, #12]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d1e4      	bne.n	80099d2 <_Balloc+0x2e>
 8009a08:	2000      	movs	r0, #0
 8009a0a:	bd70      	pop	{r4, r5, r6, pc}
 8009a0c:	6802      	ldr	r2, [r0, #0]
 8009a0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a12:	2300      	movs	r3, #0
 8009a14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a18:	e7f7      	b.n	8009a0a <_Balloc+0x66>
 8009a1a:	bf00      	nop
 8009a1c:	0800b606 	.word	0x0800b606
 8009a20:	0800b704 	.word	0x0800b704

08009a24 <_Bfree>:
 8009a24:	b570      	push	{r4, r5, r6, lr}
 8009a26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a28:	4605      	mov	r5, r0
 8009a2a:	460c      	mov	r4, r1
 8009a2c:	b976      	cbnz	r6, 8009a4c <_Bfree+0x28>
 8009a2e:	2010      	movs	r0, #16
 8009a30:	f7ff ff90 	bl	8009954 <malloc>
 8009a34:	4602      	mov	r2, r0
 8009a36:	6268      	str	r0, [r5, #36]	; 0x24
 8009a38:	b920      	cbnz	r0, 8009a44 <_Bfree+0x20>
 8009a3a:	4b09      	ldr	r3, [pc, #36]	; (8009a60 <_Bfree+0x3c>)
 8009a3c:	4809      	ldr	r0, [pc, #36]	; (8009a64 <_Bfree+0x40>)
 8009a3e:	218a      	movs	r1, #138	; 0x8a
 8009a40:	f000 feec 	bl	800a81c <__assert_func>
 8009a44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a48:	6006      	str	r6, [r0, #0]
 8009a4a:	60c6      	str	r6, [r0, #12]
 8009a4c:	b13c      	cbz	r4, 8009a5e <_Bfree+0x3a>
 8009a4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a50:	6862      	ldr	r2, [r4, #4]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a58:	6021      	str	r1, [r4, #0]
 8009a5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a5e:	bd70      	pop	{r4, r5, r6, pc}
 8009a60:	0800b606 	.word	0x0800b606
 8009a64:	0800b704 	.word	0x0800b704

08009a68 <__multadd>:
 8009a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a6c:	690d      	ldr	r5, [r1, #16]
 8009a6e:	4607      	mov	r7, r0
 8009a70:	460c      	mov	r4, r1
 8009a72:	461e      	mov	r6, r3
 8009a74:	f101 0c14 	add.w	ip, r1, #20
 8009a78:	2000      	movs	r0, #0
 8009a7a:	f8dc 3000 	ldr.w	r3, [ip]
 8009a7e:	b299      	uxth	r1, r3
 8009a80:	fb02 6101 	mla	r1, r2, r1, r6
 8009a84:	0c1e      	lsrs	r6, r3, #16
 8009a86:	0c0b      	lsrs	r3, r1, #16
 8009a88:	fb02 3306 	mla	r3, r2, r6, r3
 8009a8c:	b289      	uxth	r1, r1
 8009a8e:	3001      	adds	r0, #1
 8009a90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a94:	4285      	cmp	r5, r0
 8009a96:	f84c 1b04 	str.w	r1, [ip], #4
 8009a9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a9e:	dcec      	bgt.n	8009a7a <__multadd+0x12>
 8009aa0:	b30e      	cbz	r6, 8009ae6 <__multadd+0x7e>
 8009aa2:	68a3      	ldr	r3, [r4, #8]
 8009aa4:	42ab      	cmp	r3, r5
 8009aa6:	dc19      	bgt.n	8009adc <__multadd+0x74>
 8009aa8:	6861      	ldr	r1, [r4, #4]
 8009aaa:	4638      	mov	r0, r7
 8009aac:	3101      	adds	r1, #1
 8009aae:	f7ff ff79 	bl	80099a4 <_Balloc>
 8009ab2:	4680      	mov	r8, r0
 8009ab4:	b928      	cbnz	r0, 8009ac2 <__multadd+0x5a>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	4b0c      	ldr	r3, [pc, #48]	; (8009aec <__multadd+0x84>)
 8009aba:	480d      	ldr	r0, [pc, #52]	; (8009af0 <__multadd+0x88>)
 8009abc:	21b5      	movs	r1, #181	; 0xb5
 8009abe:	f000 fead 	bl	800a81c <__assert_func>
 8009ac2:	6922      	ldr	r2, [r4, #16]
 8009ac4:	3202      	adds	r2, #2
 8009ac6:	f104 010c 	add.w	r1, r4, #12
 8009aca:	0092      	lsls	r2, r2, #2
 8009acc:	300c      	adds	r0, #12
 8009ace:	f7ff ff5b 	bl	8009988 <memcpy>
 8009ad2:	4621      	mov	r1, r4
 8009ad4:	4638      	mov	r0, r7
 8009ad6:	f7ff ffa5 	bl	8009a24 <_Bfree>
 8009ada:	4644      	mov	r4, r8
 8009adc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ae0:	3501      	adds	r5, #1
 8009ae2:	615e      	str	r6, [r3, #20]
 8009ae4:	6125      	str	r5, [r4, #16]
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aec:	0800b678 	.word	0x0800b678
 8009af0:	0800b704 	.word	0x0800b704

08009af4 <__s2b>:
 8009af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009af8:	460c      	mov	r4, r1
 8009afa:	4615      	mov	r5, r2
 8009afc:	461f      	mov	r7, r3
 8009afe:	2209      	movs	r2, #9
 8009b00:	3308      	adds	r3, #8
 8009b02:	4606      	mov	r6, r0
 8009b04:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b08:	2100      	movs	r1, #0
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	db09      	blt.n	8009b24 <__s2b+0x30>
 8009b10:	4630      	mov	r0, r6
 8009b12:	f7ff ff47 	bl	80099a4 <_Balloc>
 8009b16:	b940      	cbnz	r0, 8009b2a <__s2b+0x36>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	4b19      	ldr	r3, [pc, #100]	; (8009b80 <__s2b+0x8c>)
 8009b1c:	4819      	ldr	r0, [pc, #100]	; (8009b84 <__s2b+0x90>)
 8009b1e:	21ce      	movs	r1, #206	; 0xce
 8009b20:	f000 fe7c 	bl	800a81c <__assert_func>
 8009b24:	0052      	lsls	r2, r2, #1
 8009b26:	3101      	adds	r1, #1
 8009b28:	e7f0      	b.n	8009b0c <__s2b+0x18>
 8009b2a:	9b08      	ldr	r3, [sp, #32]
 8009b2c:	6143      	str	r3, [r0, #20]
 8009b2e:	2d09      	cmp	r5, #9
 8009b30:	f04f 0301 	mov.w	r3, #1
 8009b34:	6103      	str	r3, [r0, #16]
 8009b36:	dd16      	ble.n	8009b66 <__s2b+0x72>
 8009b38:	f104 0909 	add.w	r9, r4, #9
 8009b3c:	46c8      	mov	r8, r9
 8009b3e:	442c      	add	r4, r5
 8009b40:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009b44:	4601      	mov	r1, r0
 8009b46:	3b30      	subs	r3, #48	; 0x30
 8009b48:	220a      	movs	r2, #10
 8009b4a:	4630      	mov	r0, r6
 8009b4c:	f7ff ff8c 	bl	8009a68 <__multadd>
 8009b50:	45a0      	cmp	r8, r4
 8009b52:	d1f5      	bne.n	8009b40 <__s2b+0x4c>
 8009b54:	f1a5 0408 	sub.w	r4, r5, #8
 8009b58:	444c      	add	r4, r9
 8009b5a:	1b2d      	subs	r5, r5, r4
 8009b5c:	1963      	adds	r3, r4, r5
 8009b5e:	42bb      	cmp	r3, r7
 8009b60:	db04      	blt.n	8009b6c <__s2b+0x78>
 8009b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b66:	340a      	adds	r4, #10
 8009b68:	2509      	movs	r5, #9
 8009b6a:	e7f6      	b.n	8009b5a <__s2b+0x66>
 8009b6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b70:	4601      	mov	r1, r0
 8009b72:	3b30      	subs	r3, #48	; 0x30
 8009b74:	220a      	movs	r2, #10
 8009b76:	4630      	mov	r0, r6
 8009b78:	f7ff ff76 	bl	8009a68 <__multadd>
 8009b7c:	e7ee      	b.n	8009b5c <__s2b+0x68>
 8009b7e:	bf00      	nop
 8009b80:	0800b678 	.word	0x0800b678
 8009b84:	0800b704 	.word	0x0800b704

08009b88 <__hi0bits>:
 8009b88:	0c03      	lsrs	r3, r0, #16
 8009b8a:	041b      	lsls	r3, r3, #16
 8009b8c:	b9d3      	cbnz	r3, 8009bc4 <__hi0bits+0x3c>
 8009b8e:	0400      	lsls	r0, r0, #16
 8009b90:	2310      	movs	r3, #16
 8009b92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b96:	bf04      	itt	eq
 8009b98:	0200      	lsleq	r0, r0, #8
 8009b9a:	3308      	addeq	r3, #8
 8009b9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009ba0:	bf04      	itt	eq
 8009ba2:	0100      	lsleq	r0, r0, #4
 8009ba4:	3304      	addeq	r3, #4
 8009ba6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009baa:	bf04      	itt	eq
 8009bac:	0080      	lsleq	r0, r0, #2
 8009bae:	3302      	addeq	r3, #2
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	db05      	blt.n	8009bc0 <__hi0bits+0x38>
 8009bb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009bb8:	f103 0301 	add.w	r3, r3, #1
 8009bbc:	bf08      	it	eq
 8009bbe:	2320      	moveq	r3, #32
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	4770      	bx	lr
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	e7e4      	b.n	8009b92 <__hi0bits+0xa>

08009bc8 <__lo0bits>:
 8009bc8:	6803      	ldr	r3, [r0, #0]
 8009bca:	f013 0207 	ands.w	r2, r3, #7
 8009bce:	4601      	mov	r1, r0
 8009bd0:	d00b      	beq.n	8009bea <__lo0bits+0x22>
 8009bd2:	07da      	lsls	r2, r3, #31
 8009bd4:	d423      	bmi.n	8009c1e <__lo0bits+0x56>
 8009bd6:	0798      	lsls	r0, r3, #30
 8009bd8:	bf49      	itett	mi
 8009bda:	085b      	lsrmi	r3, r3, #1
 8009bdc:	089b      	lsrpl	r3, r3, #2
 8009bde:	2001      	movmi	r0, #1
 8009be0:	600b      	strmi	r3, [r1, #0]
 8009be2:	bf5c      	itt	pl
 8009be4:	600b      	strpl	r3, [r1, #0]
 8009be6:	2002      	movpl	r0, #2
 8009be8:	4770      	bx	lr
 8009bea:	b298      	uxth	r0, r3
 8009bec:	b9a8      	cbnz	r0, 8009c1a <__lo0bits+0x52>
 8009bee:	0c1b      	lsrs	r3, r3, #16
 8009bf0:	2010      	movs	r0, #16
 8009bf2:	b2da      	uxtb	r2, r3
 8009bf4:	b90a      	cbnz	r2, 8009bfa <__lo0bits+0x32>
 8009bf6:	3008      	adds	r0, #8
 8009bf8:	0a1b      	lsrs	r3, r3, #8
 8009bfa:	071a      	lsls	r2, r3, #28
 8009bfc:	bf04      	itt	eq
 8009bfe:	091b      	lsreq	r3, r3, #4
 8009c00:	3004      	addeq	r0, #4
 8009c02:	079a      	lsls	r2, r3, #30
 8009c04:	bf04      	itt	eq
 8009c06:	089b      	lsreq	r3, r3, #2
 8009c08:	3002      	addeq	r0, #2
 8009c0a:	07da      	lsls	r2, r3, #31
 8009c0c:	d403      	bmi.n	8009c16 <__lo0bits+0x4e>
 8009c0e:	085b      	lsrs	r3, r3, #1
 8009c10:	f100 0001 	add.w	r0, r0, #1
 8009c14:	d005      	beq.n	8009c22 <__lo0bits+0x5a>
 8009c16:	600b      	str	r3, [r1, #0]
 8009c18:	4770      	bx	lr
 8009c1a:	4610      	mov	r0, r2
 8009c1c:	e7e9      	b.n	8009bf2 <__lo0bits+0x2a>
 8009c1e:	2000      	movs	r0, #0
 8009c20:	4770      	bx	lr
 8009c22:	2020      	movs	r0, #32
 8009c24:	4770      	bx	lr
	...

08009c28 <__i2b>:
 8009c28:	b510      	push	{r4, lr}
 8009c2a:	460c      	mov	r4, r1
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	f7ff feb9 	bl	80099a4 <_Balloc>
 8009c32:	4602      	mov	r2, r0
 8009c34:	b928      	cbnz	r0, 8009c42 <__i2b+0x1a>
 8009c36:	4b05      	ldr	r3, [pc, #20]	; (8009c4c <__i2b+0x24>)
 8009c38:	4805      	ldr	r0, [pc, #20]	; (8009c50 <__i2b+0x28>)
 8009c3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009c3e:	f000 fded 	bl	800a81c <__assert_func>
 8009c42:	2301      	movs	r3, #1
 8009c44:	6144      	str	r4, [r0, #20]
 8009c46:	6103      	str	r3, [r0, #16]
 8009c48:	bd10      	pop	{r4, pc}
 8009c4a:	bf00      	nop
 8009c4c:	0800b678 	.word	0x0800b678
 8009c50:	0800b704 	.word	0x0800b704

08009c54 <__multiply>:
 8009c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c58:	4691      	mov	r9, r2
 8009c5a:	690a      	ldr	r2, [r1, #16]
 8009c5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	bfb8      	it	lt
 8009c64:	460b      	movlt	r3, r1
 8009c66:	460c      	mov	r4, r1
 8009c68:	bfbc      	itt	lt
 8009c6a:	464c      	movlt	r4, r9
 8009c6c:	4699      	movlt	r9, r3
 8009c6e:	6927      	ldr	r7, [r4, #16]
 8009c70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c74:	68a3      	ldr	r3, [r4, #8]
 8009c76:	6861      	ldr	r1, [r4, #4]
 8009c78:	eb07 060a 	add.w	r6, r7, sl
 8009c7c:	42b3      	cmp	r3, r6
 8009c7e:	b085      	sub	sp, #20
 8009c80:	bfb8      	it	lt
 8009c82:	3101      	addlt	r1, #1
 8009c84:	f7ff fe8e 	bl	80099a4 <_Balloc>
 8009c88:	b930      	cbnz	r0, 8009c98 <__multiply+0x44>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	4b44      	ldr	r3, [pc, #272]	; (8009da0 <__multiply+0x14c>)
 8009c8e:	4845      	ldr	r0, [pc, #276]	; (8009da4 <__multiply+0x150>)
 8009c90:	f240 115d 	movw	r1, #349	; 0x15d
 8009c94:	f000 fdc2 	bl	800a81c <__assert_func>
 8009c98:	f100 0514 	add.w	r5, r0, #20
 8009c9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ca0:	462b      	mov	r3, r5
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	4543      	cmp	r3, r8
 8009ca6:	d321      	bcc.n	8009cec <__multiply+0x98>
 8009ca8:	f104 0314 	add.w	r3, r4, #20
 8009cac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009cb0:	f109 0314 	add.w	r3, r9, #20
 8009cb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009cb8:	9202      	str	r2, [sp, #8]
 8009cba:	1b3a      	subs	r2, r7, r4
 8009cbc:	3a15      	subs	r2, #21
 8009cbe:	f022 0203 	bic.w	r2, r2, #3
 8009cc2:	3204      	adds	r2, #4
 8009cc4:	f104 0115 	add.w	r1, r4, #21
 8009cc8:	428f      	cmp	r7, r1
 8009cca:	bf38      	it	cc
 8009ccc:	2204      	movcc	r2, #4
 8009cce:	9201      	str	r2, [sp, #4]
 8009cd0:	9a02      	ldr	r2, [sp, #8]
 8009cd2:	9303      	str	r3, [sp, #12]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d80c      	bhi.n	8009cf2 <__multiply+0x9e>
 8009cd8:	2e00      	cmp	r6, #0
 8009cda:	dd03      	ble.n	8009ce4 <__multiply+0x90>
 8009cdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d05a      	beq.n	8009d9a <__multiply+0x146>
 8009ce4:	6106      	str	r6, [r0, #16]
 8009ce6:	b005      	add	sp, #20
 8009ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cec:	f843 2b04 	str.w	r2, [r3], #4
 8009cf0:	e7d8      	b.n	8009ca4 <__multiply+0x50>
 8009cf2:	f8b3 a000 	ldrh.w	sl, [r3]
 8009cf6:	f1ba 0f00 	cmp.w	sl, #0
 8009cfa:	d024      	beq.n	8009d46 <__multiply+0xf2>
 8009cfc:	f104 0e14 	add.w	lr, r4, #20
 8009d00:	46a9      	mov	r9, r5
 8009d02:	f04f 0c00 	mov.w	ip, #0
 8009d06:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009d0a:	f8d9 1000 	ldr.w	r1, [r9]
 8009d0e:	fa1f fb82 	uxth.w	fp, r2
 8009d12:	b289      	uxth	r1, r1
 8009d14:	fb0a 110b 	mla	r1, sl, fp, r1
 8009d18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009d1c:	f8d9 2000 	ldr.w	r2, [r9]
 8009d20:	4461      	add	r1, ip
 8009d22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d26:	fb0a c20b 	mla	r2, sl, fp, ip
 8009d2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009d2e:	b289      	uxth	r1, r1
 8009d30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d34:	4577      	cmp	r7, lr
 8009d36:	f849 1b04 	str.w	r1, [r9], #4
 8009d3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d3e:	d8e2      	bhi.n	8009d06 <__multiply+0xb2>
 8009d40:	9a01      	ldr	r2, [sp, #4]
 8009d42:	f845 c002 	str.w	ip, [r5, r2]
 8009d46:	9a03      	ldr	r2, [sp, #12]
 8009d48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009d4c:	3304      	adds	r3, #4
 8009d4e:	f1b9 0f00 	cmp.w	r9, #0
 8009d52:	d020      	beq.n	8009d96 <__multiply+0x142>
 8009d54:	6829      	ldr	r1, [r5, #0]
 8009d56:	f104 0c14 	add.w	ip, r4, #20
 8009d5a:	46ae      	mov	lr, r5
 8009d5c:	f04f 0a00 	mov.w	sl, #0
 8009d60:	f8bc b000 	ldrh.w	fp, [ip]
 8009d64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d68:	fb09 220b 	mla	r2, r9, fp, r2
 8009d6c:	4492      	add	sl, r2
 8009d6e:	b289      	uxth	r1, r1
 8009d70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009d74:	f84e 1b04 	str.w	r1, [lr], #4
 8009d78:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009d7c:	f8be 1000 	ldrh.w	r1, [lr]
 8009d80:	0c12      	lsrs	r2, r2, #16
 8009d82:	fb09 1102 	mla	r1, r9, r2, r1
 8009d86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009d8a:	4567      	cmp	r7, ip
 8009d8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d90:	d8e6      	bhi.n	8009d60 <__multiply+0x10c>
 8009d92:	9a01      	ldr	r2, [sp, #4]
 8009d94:	50a9      	str	r1, [r5, r2]
 8009d96:	3504      	adds	r5, #4
 8009d98:	e79a      	b.n	8009cd0 <__multiply+0x7c>
 8009d9a:	3e01      	subs	r6, #1
 8009d9c:	e79c      	b.n	8009cd8 <__multiply+0x84>
 8009d9e:	bf00      	nop
 8009da0:	0800b678 	.word	0x0800b678
 8009da4:	0800b704 	.word	0x0800b704

08009da8 <__pow5mult>:
 8009da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dac:	4615      	mov	r5, r2
 8009dae:	f012 0203 	ands.w	r2, r2, #3
 8009db2:	4606      	mov	r6, r0
 8009db4:	460f      	mov	r7, r1
 8009db6:	d007      	beq.n	8009dc8 <__pow5mult+0x20>
 8009db8:	4c25      	ldr	r4, [pc, #148]	; (8009e50 <__pow5mult+0xa8>)
 8009dba:	3a01      	subs	r2, #1
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009dc2:	f7ff fe51 	bl	8009a68 <__multadd>
 8009dc6:	4607      	mov	r7, r0
 8009dc8:	10ad      	asrs	r5, r5, #2
 8009dca:	d03d      	beq.n	8009e48 <__pow5mult+0xa0>
 8009dcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009dce:	b97c      	cbnz	r4, 8009df0 <__pow5mult+0x48>
 8009dd0:	2010      	movs	r0, #16
 8009dd2:	f7ff fdbf 	bl	8009954 <malloc>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	6270      	str	r0, [r6, #36]	; 0x24
 8009dda:	b928      	cbnz	r0, 8009de8 <__pow5mult+0x40>
 8009ddc:	4b1d      	ldr	r3, [pc, #116]	; (8009e54 <__pow5mult+0xac>)
 8009dde:	481e      	ldr	r0, [pc, #120]	; (8009e58 <__pow5mult+0xb0>)
 8009de0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009de4:	f000 fd1a 	bl	800a81c <__assert_func>
 8009de8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009dec:	6004      	str	r4, [r0, #0]
 8009dee:	60c4      	str	r4, [r0, #12]
 8009df0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009df4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009df8:	b94c      	cbnz	r4, 8009e0e <__pow5mult+0x66>
 8009dfa:	f240 2171 	movw	r1, #625	; 0x271
 8009dfe:	4630      	mov	r0, r6
 8009e00:	f7ff ff12 	bl	8009c28 <__i2b>
 8009e04:	2300      	movs	r3, #0
 8009e06:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	6003      	str	r3, [r0, #0]
 8009e0e:	f04f 0900 	mov.w	r9, #0
 8009e12:	07eb      	lsls	r3, r5, #31
 8009e14:	d50a      	bpl.n	8009e2c <__pow5mult+0x84>
 8009e16:	4639      	mov	r1, r7
 8009e18:	4622      	mov	r2, r4
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	f7ff ff1a 	bl	8009c54 <__multiply>
 8009e20:	4639      	mov	r1, r7
 8009e22:	4680      	mov	r8, r0
 8009e24:	4630      	mov	r0, r6
 8009e26:	f7ff fdfd 	bl	8009a24 <_Bfree>
 8009e2a:	4647      	mov	r7, r8
 8009e2c:	106d      	asrs	r5, r5, #1
 8009e2e:	d00b      	beq.n	8009e48 <__pow5mult+0xa0>
 8009e30:	6820      	ldr	r0, [r4, #0]
 8009e32:	b938      	cbnz	r0, 8009e44 <__pow5mult+0x9c>
 8009e34:	4622      	mov	r2, r4
 8009e36:	4621      	mov	r1, r4
 8009e38:	4630      	mov	r0, r6
 8009e3a:	f7ff ff0b 	bl	8009c54 <__multiply>
 8009e3e:	6020      	str	r0, [r4, #0]
 8009e40:	f8c0 9000 	str.w	r9, [r0]
 8009e44:	4604      	mov	r4, r0
 8009e46:	e7e4      	b.n	8009e12 <__pow5mult+0x6a>
 8009e48:	4638      	mov	r0, r7
 8009e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e4e:	bf00      	nop
 8009e50:	0800b850 	.word	0x0800b850
 8009e54:	0800b606 	.word	0x0800b606
 8009e58:	0800b704 	.word	0x0800b704

08009e5c <__lshift>:
 8009e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e60:	460c      	mov	r4, r1
 8009e62:	6849      	ldr	r1, [r1, #4]
 8009e64:	6923      	ldr	r3, [r4, #16]
 8009e66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e6a:	68a3      	ldr	r3, [r4, #8]
 8009e6c:	4607      	mov	r7, r0
 8009e6e:	4691      	mov	r9, r2
 8009e70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e74:	f108 0601 	add.w	r6, r8, #1
 8009e78:	42b3      	cmp	r3, r6
 8009e7a:	db0b      	blt.n	8009e94 <__lshift+0x38>
 8009e7c:	4638      	mov	r0, r7
 8009e7e:	f7ff fd91 	bl	80099a4 <_Balloc>
 8009e82:	4605      	mov	r5, r0
 8009e84:	b948      	cbnz	r0, 8009e9a <__lshift+0x3e>
 8009e86:	4602      	mov	r2, r0
 8009e88:	4b2a      	ldr	r3, [pc, #168]	; (8009f34 <__lshift+0xd8>)
 8009e8a:	482b      	ldr	r0, [pc, #172]	; (8009f38 <__lshift+0xdc>)
 8009e8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e90:	f000 fcc4 	bl	800a81c <__assert_func>
 8009e94:	3101      	adds	r1, #1
 8009e96:	005b      	lsls	r3, r3, #1
 8009e98:	e7ee      	b.n	8009e78 <__lshift+0x1c>
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	f100 0114 	add.w	r1, r0, #20
 8009ea0:	f100 0210 	add.w	r2, r0, #16
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	4553      	cmp	r3, sl
 8009ea8:	db37      	blt.n	8009f1a <__lshift+0xbe>
 8009eaa:	6920      	ldr	r0, [r4, #16]
 8009eac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009eb0:	f104 0314 	add.w	r3, r4, #20
 8009eb4:	f019 091f 	ands.w	r9, r9, #31
 8009eb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ebc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ec0:	d02f      	beq.n	8009f22 <__lshift+0xc6>
 8009ec2:	f1c9 0e20 	rsb	lr, r9, #32
 8009ec6:	468a      	mov	sl, r1
 8009ec8:	f04f 0c00 	mov.w	ip, #0
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	fa02 f209 	lsl.w	r2, r2, r9
 8009ed2:	ea42 020c 	orr.w	r2, r2, ip
 8009ed6:	f84a 2b04 	str.w	r2, [sl], #4
 8009eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ede:	4298      	cmp	r0, r3
 8009ee0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009ee4:	d8f2      	bhi.n	8009ecc <__lshift+0x70>
 8009ee6:	1b03      	subs	r3, r0, r4
 8009ee8:	3b15      	subs	r3, #21
 8009eea:	f023 0303 	bic.w	r3, r3, #3
 8009eee:	3304      	adds	r3, #4
 8009ef0:	f104 0215 	add.w	r2, r4, #21
 8009ef4:	4290      	cmp	r0, r2
 8009ef6:	bf38      	it	cc
 8009ef8:	2304      	movcc	r3, #4
 8009efa:	f841 c003 	str.w	ip, [r1, r3]
 8009efe:	f1bc 0f00 	cmp.w	ip, #0
 8009f02:	d001      	beq.n	8009f08 <__lshift+0xac>
 8009f04:	f108 0602 	add.w	r6, r8, #2
 8009f08:	3e01      	subs	r6, #1
 8009f0a:	4638      	mov	r0, r7
 8009f0c:	612e      	str	r6, [r5, #16]
 8009f0e:	4621      	mov	r1, r4
 8009f10:	f7ff fd88 	bl	8009a24 <_Bfree>
 8009f14:	4628      	mov	r0, r5
 8009f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f1e:	3301      	adds	r3, #1
 8009f20:	e7c1      	b.n	8009ea6 <__lshift+0x4a>
 8009f22:	3904      	subs	r1, #4
 8009f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f28:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f2c:	4298      	cmp	r0, r3
 8009f2e:	d8f9      	bhi.n	8009f24 <__lshift+0xc8>
 8009f30:	e7ea      	b.n	8009f08 <__lshift+0xac>
 8009f32:	bf00      	nop
 8009f34:	0800b678 	.word	0x0800b678
 8009f38:	0800b704 	.word	0x0800b704

08009f3c <__mcmp>:
 8009f3c:	b530      	push	{r4, r5, lr}
 8009f3e:	6902      	ldr	r2, [r0, #16]
 8009f40:	690c      	ldr	r4, [r1, #16]
 8009f42:	1b12      	subs	r2, r2, r4
 8009f44:	d10e      	bne.n	8009f64 <__mcmp+0x28>
 8009f46:	f100 0314 	add.w	r3, r0, #20
 8009f4a:	3114      	adds	r1, #20
 8009f4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009f50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009f54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009f58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009f5c:	42a5      	cmp	r5, r4
 8009f5e:	d003      	beq.n	8009f68 <__mcmp+0x2c>
 8009f60:	d305      	bcc.n	8009f6e <__mcmp+0x32>
 8009f62:	2201      	movs	r2, #1
 8009f64:	4610      	mov	r0, r2
 8009f66:	bd30      	pop	{r4, r5, pc}
 8009f68:	4283      	cmp	r3, r0
 8009f6a:	d3f3      	bcc.n	8009f54 <__mcmp+0x18>
 8009f6c:	e7fa      	b.n	8009f64 <__mcmp+0x28>
 8009f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f72:	e7f7      	b.n	8009f64 <__mcmp+0x28>

08009f74 <__mdiff>:
 8009f74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f78:	460c      	mov	r4, r1
 8009f7a:	4606      	mov	r6, r0
 8009f7c:	4611      	mov	r1, r2
 8009f7e:	4620      	mov	r0, r4
 8009f80:	4690      	mov	r8, r2
 8009f82:	f7ff ffdb 	bl	8009f3c <__mcmp>
 8009f86:	1e05      	subs	r5, r0, #0
 8009f88:	d110      	bne.n	8009fac <__mdiff+0x38>
 8009f8a:	4629      	mov	r1, r5
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	f7ff fd09 	bl	80099a4 <_Balloc>
 8009f92:	b930      	cbnz	r0, 8009fa2 <__mdiff+0x2e>
 8009f94:	4b3a      	ldr	r3, [pc, #232]	; (800a080 <__mdiff+0x10c>)
 8009f96:	4602      	mov	r2, r0
 8009f98:	f240 2132 	movw	r1, #562	; 0x232
 8009f9c:	4839      	ldr	r0, [pc, #228]	; (800a084 <__mdiff+0x110>)
 8009f9e:	f000 fc3d 	bl	800a81c <__assert_func>
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009fa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fac:	bfa4      	itt	ge
 8009fae:	4643      	movge	r3, r8
 8009fb0:	46a0      	movge	r8, r4
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009fb8:	bfa6      	itte	ge
 8009fba:	461c      	movge	r4, r3
 8009fbc:	2500      	movge	r5, #0
 8009fbe:	2501      	movlt	r5, #1
 8009fc0:	f7ff fcf0 	bl	80099a4 <_Balloc>
 8009fc4:	b920      	cbnz	r0, 8009fd0 <__mdiff+0x5c>
 8009fc6:	4b2e      	ldr	r3, [pc, #184]	; (800a080 <__mdiff+0x10c>)
 8009fc8:	4602      	mov	r2, r0
 8009fca:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009fce:	e7e5      	b.n	8009f9c <__mdiff+0x28>
 8009fd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009fd4:	6926      	ldr	r6, [r4, #16]
 8009fd6:	60c5      	str	r5, [r0, #12]
 8009fd8:	f104 0914 	add.w	r9, r4, #20
 8009fdc:	f108 0514 	add.w	r5, r8, #20
 8009fe0:	f100 0e14 	add.w	lr, r0, #20
 8009fe4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009fe8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009fec:	f108 0210 	add.w	r2, r8, #16
 8009ff0:	46f2      	mov	sl, lr
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ff8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ffc:	fa1f f883 	uxth.w	r8, r3
 800a000:	fa11 f18b 	uxtah	r1, r1, fp
 800a004:	0c1b      	lsrs	r3, r3, #16
 800a006:	eba1 0808 	sub.w	r8, r1, r8
 800a00a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a00e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a012:	fa1f f888 	uxth.w	r8, r8
 800a016:	1419      	asrs	r1, r3, #16
 800a018:	454e      	cmp	r6, r9
 800a01a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a01e:	f84a 3b04 	str.w	r3, [sl], #4
 800a022:	d8e7      	bhi.n	8009ff4 <__mdiff+0x80>
 800a024:	1b33      	subs	r3, r6, r4
 800a026:	3b15      	subs	r3, #21
 800a028:	f023 0303 	bic.w	r3, r3, #3
 800a02c:	3304      	adds	r3, #4
 800a02e:	3415      	adds	r4, #21
 800a030:	42a6      	cmp	r6, r4
 800a032:	bf38      	it	cc
 800a034:	2304      	movcc	r3, #4
 800a036:	441d      	add	r5, r3
 800a038:	4473      	add	r3, lr
 800a03a:	469e      	mov	lr, r3
 800a03c:	462e      	mov	r6, r5
 800a03e:	4566      	cmp	r6, ip
 800a040:	d30e      	bcc.n	800a060 <__mdiff+0xec>
 800a042:	f10c 0203 	add.w	r2, ip, #3
 800a046:	1b52      	subs	r2, r2, r5
 800a048:	f022 0203 	bic.w	r2, r2, #3
 800a04c:	3d03      	subs	r5, #3
 800a04e:	45ac      	cmp	ip, r5
 800a050:	bf38      	it	cc
 800a052:	2200      	movcc	r2, #0
 800a054:	441a      	add	r2, r3
 800a056:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a05a:	b17b      	cbz	r3, 800a07c <__mdiff+0x108>
 800a05c:	6107      	str	r7, [r0, #16]
 800a05e:	e7a3      	b.n	8009fa8 <__mdiff+0x34>
 800a060:	f856 8b04 	ldr.w	r8, [r6], #4
 800a064:	fa11 f288 	uxtah	r2, r1, r8
 800a068:	1414      	asrs	r4, r2, #16
 800a06a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a06e:	b292      	uxth	r2, r2
 800a070:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a074:	f84e 2b04 	str.w	r2, [lr], #4
 800a078:	1421      	asrs	r1, r4, #16
 800a07a:	e7e0      	b.n	800a03e <__mdiff+0xca>
 800a07c:	3f01      	subs	r7, #1
 800a07e:	e7ea      	b.n	800a056 <__mdiff+0xe2>
 800a080:	0800b678 	.word	0x0800b678
 800a084:	0800b704 	.word	0x0800b704

0800a088 <__ulp>:
 800a088:	b082      	sub	sp, #8
 800a08a:	ed8d 0b00 	vstr	d0, [sp]
 800a08e:	9b01      	ldr	r3, [sp, #4]
 800a090:	4912      	ldr	r1, [pc, #72]	; (800a0dc <__ulp+0x54>)
 800a092:	4019      	ands	r1, r3
 800a094:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a098:	2900      	cmp	r1, #0
 800a09a:	dd05      	ble.n	800a0a8 <__ulp+0x20>
 800a09c:	2200      	movs	r2, #0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	ec43 2b10 	vmov	d0, r2, r3
 800a0a4:	b002      	add	sp, #8
 800a0a6:	4770      	bx	lr
 800a0a8:	4249      	negs	r1, r1
 800a0aa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a0ae:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a0b2:	f04f 0200 	mov.w	r2, #0
 800a0b6:	f04f 0300 	mov.w	r3, #0
 800a0ba:	da04      	bge.n	800a0c6 <__ulp+0x3e>
 800a0bc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a0c0:	fa41 f300 	asr.w	r3, r1, r0
 800a0c4:	e7ec      	b.n	800a0a0 <__ulp+0x18>
 800a0c6:	f1a0 0114 	sub.w	r1, r0, #20
 800a0ca:	291e      	cmp	r1, #30
 800a0cc:	bfda      	itte	le
 800a0ce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a0d2:	fa20 f101 	lsrle.w	r1, r0, r1
 800a0d6:	2101      	movgt	r1, #1
 800a0d8:	460a      	mov	r2, r1
 800a0da:	e7e1      	b.n	800a0a0 <__ulp+0x18>
 800a0dc:	7ff00000 	.word	0x7ff00000

0800a0e0 <__b2d>:
 800a0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e2:	6905      	ldr	r5, [r0, #16]
 800a0e4:	f100 0714 	add.w	r7, r0, #20
 800a0e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a0ec:	1f2e      	subs	r6, r5, #4
 800a0ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	f7ff fd48 	bl	8009b88 <__hi0bits>
 800a0f8:	f1c0 0320 	rsb	r3, r0, #32
 800a0fc:	280a      	cmp	r0, #10
 800a0fe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a17c <__b2d+0x9c>
 800a102:	600b      	str	r3, [r1, #0]
 800a104:	dc14      	bgt.n	800a130 <__b2d+0x50>
 800a106:	f1c0 0e0b 	rsb	lr, r0, #11
 800a10a:	fa24 f10e 	lsr.w	r1, r4, lr
 800a10e:	42b7      	cmp	r7, r6
 800a110:	ea41 030c 	orr.w	r3, r1, ip
 800a114:	bf34      	ite	cc
 800a116:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a11a:	2100      	movcs	r1, #0
 800a11c:	3015      	adds	r0, #21
 800a11e:	fa04 f000 	lsl.w	r0, r4, r0
 800a122:	fa21 f10e 	lsr.w	r1, r1, lr
 800a126:	ea40 0201 	orr.w	r2, r0, r1
 800a12a:	ec43 2b10 	vmov	d0, r2, r3
 800a12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a130:	42b7      	cmp	r7, r6
 800a132:	bf3a      	itte	cc
 800a134:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a138:	f1a5 0608 	subcc.w	r6, r5, #8
 800a13c:	2100      	movcs	r1, #0
 800a13e:	380b      	subs	r0, #11
 800a140:	d017      	beq.n	800a172 <__b2d+0x92>
 800a142:	f1c0 0c20 	rsb	ip, r0, #32
 800a146:	fa04 f500 	lsl.w	r5, r4, r0
 800a14a:	42be      	cmp	r6, r7
 800a14c:	fa21 f40c 	lsr.w	r4, r1, ip
 800a150:	ea45 0504 	orr.w	r5, r5, r4
 800a154:	bf8c      	ite	hi
 800a156:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a15a:	2400      	movls	r4, #0
 800a15c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a160:	fa01 f000 	lsl.w	r0, r1, r0
 800a164:	fa24 f40c 	lsr.w	r4, r4, ip
 800a168:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a16c:	ea40 0204 	orr.w	r2, r0, r4
 800a170:	e7db      	b.n	800a12a <__b2d+0x4a>
 800a172:	ea44 030c 	orr.w	r3, r4, ip
 800a176:	460a      	mov	r2, r1
 800a178:	e7d7      	b.n	800a12a <__b2d+0x4a>
 800a17a:	bf00      	nop
 800a17c:	3ff00000 	.word	0x3ff00000

0800a180 <__d2b>:
 800a180:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a184:	4689      	mov	r9, r1
 800a186:	2101      	movs	r1, #1
 800a188:	ec57 6b10 	vmov	r6, r7, d0
 800a18c:	4690      	mov	r8, r2
 800a18e:	f7ff fc09 	bl	80099a4 <_Balloc>
 800a192:	4604      	mov	r4, r0
 800a194:	b930      	cbnz	r0, 800a1a4 <__d2b+0x24>
 800a196:	4602      	mov	r2, r0
 800a198:	4b25      	ldr	r3, [pc, #148]	; (800a230 <__d2b+0xb0>)
 800a19a:	4826      	ldr	r0, [pc, #152]	; (800a234 <__d2b+0xb4>)
 800a19c:	f240 310a 	movw	r1, #778	; 0x30a
 800a1a0:	f000 fb3c 	bl	800a81c <__assert_func>
 800a1a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a1a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a1ac:	bb35      	cbnz	r5, 800a1fc <__d2b+0x7c>
 800a1ae:	2e00      	cmp	r6, #0
 800a1b0:	9301      	str	r3, [sp, #4]
 800a1b2:	d028      	beq.n	800a206 <__d2b+0x86>
 800a1b4:	4668      	mov	r0, sp
 800a1b6:	9600      	str	r6, [sp, #0]
 800a1b8:	f7ff fd06 	bl	8009bc8 <__lo0bits>
 800a1bc:	9900      	ldr	r1, [sp, #0]
 800a1be:	b300      	cbz	r0, 800a202 <__d2b+0x82>
 800a1c0:	9a01      	ldr	r2, [sp, #4]
 800a1c2:	f1c0 0320 	rsb	r3, r0, #32
 800a1c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ca:	430b      	orrs	r3, r1
 800a1cc:	40c2      	lsrs	r2, r0
 800a1ce:	6163      	str	r3, [r4, #20]
 800a1d0:	9201      	str	r2, [sp, #4]
 800a1d2:	9b01      	ldr	r3, [sp, #4]
 800a1d4:	61a3      	str	r3, [r4, #24]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	bf14      	ite	ne
 800a1da:	2202      	movne	r2, #2
 800a1dc:	2201      	moveq	r2, #1
 800a1de:	6122      	str	r2, [r4, #16]
 800a1e0:	b1d5      	cbz	r5, 800a218 <__d2b+0x98>
 800a1e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a1e6:	4405      	add	r5, r0
 800a1e8:	f8c9 5000 	str.w	r5, [r9]
 800a1ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a1f0:	f8c8 0000 	str.w	r0, [r8]
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	b003      	add	sp, #12
 800a1f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a200:	e7d5      	b.n	800a1ae <__d2b+0x2e>
 800a202:	6161      	str	r1, [r4, #20]
 800a204:	e7e5      	b.n	800a1d2 <__d2b+0x52>
 800a206:	a801      	add	r0, sp, #4
 800a208:	f7ff fcde 	bl	8009bc8 <__lo0bits>
 800a20c:	9b01      	ldr	r3, [sp, #4]
 800a20e:	6163      	str	r3, [r4, #20]
 800a210:	2201      	movs	r2, #1
 800a212:	6122      	str	r2, [r4, #16]
 800a214:	3020      	adds	r0, #32
 800a216:	e7e3      	b.n	800a1e0 <__d2b+0x60>
 800a218:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a21c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a220:	f8c9 0000 	str.w	r0, [r9]
 800a224:	6918      	ldr	r0, [r3, #16]
 800a226:	f7ff fcaf 	bl	8009b88 <__hi0bits>
 800a22a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a22e:	e7df      	b.n	800a1f0 <__d2b+0x70>
 800a230:	0800b678 	.word	0x0800b678
 800a234:	0800b704 	.word	0x0800b704

0800a238 <__ratio>:
 800a238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23c:	4688      	mov	r8, r1
 800a23e:	4669      	mov	r1, sp
 800a240:	4681      	mov	r9, r0
 800a242:	f7ff ff4d 	bl	800a0e0 <__b2d>
 800a246:	a901      	add	r1, sp, #4
 800a248:	4640      	mov	r0, r8
 800a24a:	ec55 4b10 	vmov	r4, r5, d0
 800a24e:	f7ff ff47 	bl	800a0e0 <__b2d>
 800a252:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a256:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a25a:	eba3 0c02 	sub.w	ip, r3, r2
 800a25e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a262:	1a9b      	subs	r3, r3, r2
 800a264:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a268:	ec51 0b10 	vmov	r0, r1, d0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	bfd6      	itet	le
 800a270:	460a      	movle	r2, r1
 800a272:	462a      	movgt	r2, r5
 800a274:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a278:	468b      	mov	fp, r1
 800a27a:	462f      	mov	r7, r5
 800a27c:	bfd4      	ite	le
 800a27e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a282:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a286:	4620      	mov	r0, r4
 800a288:	ee10 2a10 	vmov	r2, s0
 800a28c:	465b      	mov	r3, fp
 800a28e:	4639      	mov	r1, r7
 800a290:	f7f6 fae4 	bl	800085c <__aeabi_ddiv>
 800a294:	ec41 0b10 	vmov	d0, r0, r1
 800a298:	b003      	add	sp, #12
 800a29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a29e <__copybits>:
 800a29e:	3901      	subs	r1, #1
 800a2a0:	b570      	push	{r4, r5, r6, lr}
 800a2a2:	1149      	asrs	r1, r1, #5
 800a2a4:	6914      	ldr	r4, [r2, #16]
 800a2a6:	3101      	adds	r1, #1
 800a2a8:	f102 0314 	add.w	r3, r2, #20
 800a2ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a2b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a2b4:	1f05      	subs	r5, r0, #4
 800a2b6:	42a3      	cmp	r3, r4
 800a2b8:	d30c      	bcc.n	800a2d4 <__copybits+0x36>
 800a2ba:	1aa3      	subs	r3, r4, r2
 800a2bc:	3b11      	subs	r3, #17
 800a2be:	f023 0303 	bic.w	r3, r3, #3
 800a2c2:	3211      	adds	r2, #17
 800a2c4:	42a2      	cmp	r2, r4
 800a2c6:	bf88      	it	hi
 800a2c8:	2300      	movhi	r3, #0
 800a2ca:	4418      	add	r0, r3
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	4288      	cmp	r0, r1
 800a2d0:	d305      	bcc.n	800a2de <__copybits+0x40>
 800a2d2:	bd70      	pop	{r4, r5, r6, pc}
 800a2d4:	f853 6b04 	ldr.w	r6, [r3], #4
 800a2d8:	f845 6f04 	str.w	r6, [r5, #4]!
 800a2dc:	e7eb      	b.n	800a2b6 <__copybits+0x18>
 800a2de:	f840 3b04 	str.w	r3, [r0], #4
 800a2e2:	e7f4      	b.n	800a2ce <__copybits+0x30>

0800a2e4 <__any_on>:
 800a2e4:	f100 0214 	add.w	r2, r0, #20
 800a2e8:	6900      	ldr	r0, [r0, #16]
 800a2ea:	114b      	asrs	r3, r1, #5
 800a2ec:	4298      	cmp	r0, r3
 800a2ee:	b510      	push	{r4, lr}
 800a2f0:	db11      	blt.n	800a316 <__any_on+0x32>
 800a2f2:	dd0a      	ble.n	800a30a <__any_on+0x26>
 800a2f4:	f011 011f 	ands.w	r1, r1, #31
 800a2f8:	d007      	beq.n	800a30a <__any_on+0x26>
 800a2fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a2fe:	fa24 f001 	lsr.w	r0, r4, r1
 800a302:	fa00 f101 	lsl.w	r1, r0, r1
 800a306:	428c      	cmp	r4, r1
 800a308:	d10b      	bne.n	800a322 <__any_on+0x3e>
 800a30a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a30e:	4293      	cmp	r3, r2
 800a310:	d803      	bhi.n	800a31a <__any_on+0x36>
 800a312:	2000      	movs	r0, #0
 800a314:	bd10      	pop	{r4, pc}
 800a316:	4603      	mov	r3, r0
 800a318:	e7f7      	b.n	800a30a <__any_on+0x26>
 800a31a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a31e:	2900      	cmp	r1, #0
 800a320:	d0f5      	beq.n	800a30e <__any_on+0x2a>
 800a322:	2001      	movs	r0, #1
 800a324:	e7f6      	b.n	800a314 <__any_on+0x30>

0800a326 <_calloc_r>:
 800a326:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a328:	fba1 2402 	umull	r2, r4, r1, r2
 800a32c:	b94c      	cbnz	r4, 800a342 <_calloc_r+0x1c>
 800a32e:	4611      	mov	r1, r2
 800a330:	9201      	str	r2, [sp, #4]
 800a332:	f000 f87b 	bl	800a42c <_malloc_r>
 800a336:	9a01      	ldr	r2, [sp, #4]
 800a338:	4605      	mov	r5, r0
 800a33a:	b930      	cbnz	r0, 800a34a <_calloc_r+0x24>
 800a33c:	4628      	mov	r0, r5
 800a33e:	b003      	add	sp, #12
 800a340:	bd30      	pop	{r4, r5, pc}
 800a342:	220c      	movs	r2, #12
 800a344:	6002      	str	r2, [r0, #0]
 800a346:	2500      	movs	r5, #0
 800a348:	e7f8      	b.n	800a33c <_calloc_r+0x16>
 800a34a:	4621      	mov	r1, r4
 800a34c:	f7fc fbaa 	bl	8006aa4 <memset>
 800a350:	e7f4      	b.n	800a33c <_calloc_r+0x16>
	...

0800a354 <_free_r>:
 800a354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a356:	2900      	cmp	r1, #0
 800a358:	d044      	beq.n	800a3e4 <_free_r+0x90>
 800a35a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a35e:	9001      	str	r0, [sp, #4]
 800a360:	2b00      	cmp	r3, #0
 800a362:	f1a1 0404 	sub.w	r4, r1, #4
 800a366:	bfb8      	it	lt
 800a368:	18e4      	addlt	r4, r4, r3
 800a36a:	f000 faa1 	bl	800a8b0 <__malloc_lock>
 800a36e:	4a1e      	ldr	r2, [pc, #120]	; (800a3e8 <_free_r+0x94>)
 800a370:	9801      	ldr	r0, [sp, #4]
 800a372:	6813      	ldr	r3, [r2, #0]
 800a374:	b933      	cbnz	r3, 800a384 <_free_r+0x30>
 800a376:	6063      	str	r3, [r4, #4]
 800a378:	6014      	str	r4, [r2, #0]
 800a37a:	b003      	add	sp, #12
 800a37c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a380:	f000 ba9c 	b.w	800a8bc <__malloc_unlock>
 800a384:	42a3      	cmp	r3, r4
 800a386:	d908      	bls.n	800a39a <_free_r+0x46>
 800a388:	6825      	ldr	r5, [r4, #0]
 800a38a:	1961      	adds	r1, r4, r5
 800a38c:	428b      	cmp	r3, r1
 800a38e:	bf01      	itttt	eq
 800a390:	6819      	ldreq	r1, [r3, #0]
 800a392:	685b      	ldreq	r3, [r3, #4]
 800a394:	1949      	addeq	r1, r1, r5
 800a396:	6021      	streq	r1, [r4, #0]
 800a398:	e7ed      	b.n	800a376 <_free_r+0x22>
 800a39a:	461a      	mov	r2, r3
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	b10b      	cbz	r3, 800a3a4 <_free_r+0x50>
 800a3a0:	42a3      	cmp	r3, r4
 800a3a2:	d9fa      	bls.n	800a39a <_free_r+0x46>
 800a3a4:	6811      	ldr	r1, [r2, #0]
 800a3a6:	1855      	adds	r5, r2, r1
 800a3a8:	42a5      	cmp	r5, r4
 800a3aa:	d10b      	bne.n	800a3c4 <_free_r+0x70>
 800a3ac:	6824      	ldr	r4, [r4, #0]
 800a3ae:	4421      	add	r1, r4
 800a3b0:	1854      	adds	r4, r2, r1
 800a3b2:	42a3      	cmp	r3, r4
 800a3b4:	6011      	str	r1, [r2, #0]
 800a3b6:	d1e0      	bne.n	800a37a <_free_r+0x26>
 800a3b8:	681c      	ldr	r4, [r3, #0]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	6053      	str	r3, [r2, #4]
 800a3be:	4421      	add	r1, r4
 800a3c0:	6011      	str	r1, [r2, #0]
 800a3c2:	e7da      	b.n	800a37a <_free_r+0x26>
 800a3c4:	d902      	bls.n	800a3cc <_free_r+0x78>
 800a3c6:	230c      	movs	r3, #12
 800a3c8:	6003      	str	r3, [r0, #0]
 800a3ca:	e7d6      	b.n	800a37a <_free_r+0x26>
 800a3cc:	6825      	ldr	r5, [r4, #0]
 800a3ce:	1961      	adds	r1, r4, r5
 800a3d0:	428b      	cmp	r3, r1
 800a3d2:	bf04      	itt	eq
 800a3d4:	6819      	ldreq	r1, [r3, #0]
 800a3d6:	685b      	ldreq	r3, [r3, #4]
 800a3d8:	6063      	str	r3, [r4, #4]
 800a3da:	bf04      	itt	eq
 800a3dc:	1949      	addeq	r1, r1, r5
 800a3de:	6021      	streq	r1, [r4, #0]
 800a3e0:	6054      	str	r4, [r2, #4]
 800a3e2:	e7ca      	b.n	800a37a <_free_r+0x26>
 800a3e4:	b003      	add	sp, #12
 800a3e6:	bd30      	pop	{r4, r5, pc}
 800a3e8:	2000049c 	.word	0x2000049c

0800a3ec <sbrk_aligned>:
 800a3ec:	b570      	push	{r4, r5, r6, lr}
 800a3ee:	4e0e      	ldr	r6, [pc, #56]	; (800a428 <sbrk_aligned+0x3c>)
 800a3f0:	460c      	mov	r4, r1
 800a3f2:	6831      	ldr	r1, [r6, #0]
 800a3f4:	4605      	mov	r5, r0
 800a3f6:	b911      	cbnz	r1, 800a3fe <sbrk_aligned+0x12>
 800a3f8:	f000 f9f2 	bl	800a7e0 <_sbrk_r>
 800a3fc:	6030      	str	r0, [r6, #0]
 800a3fe:	4621      	mov	r1, r4
 800a400:	4628      	mov	r0, r5
 800a402:	f000 f9ed 	bl	800a7e0 <_sbrk_r>
 800a406:	1c43      	adds	r3, r0, #1
 800a408:	d00a      	beq.n	800a420 <sbrk_aligned+0x34>
 800a40a:	1cc4      	adds	r4, r0, #3
 800a40c:	f024 0403 	bic.w	r4, r4, #3
 800a410:	42a0      	cmp	r0, r4
 800a412:	d007      	beq.n	800a424 <sbrk_aligned+0x38>
 800a414:	1a21      	subs	r1, r4, r0
 800a416:	4628      	mov	r0, r5
 800a418:	f000 f9e2 	bl	800a7e0 <_sbrk_r>
 800a41c:	3001      	adds	r0, #1
 800a41e:	d101      	bne.n	800a424 <sbrk_aligned+0x38>
 800a420:	f04f 34ff 	mov.w	r4, #4294967295
 800a424:	4620      	mov	r0, r4
 800a426:	bd70      	pop	{r4, r5, r6, pc}
 800a428:	200004a0 	.word	0x200004a0

0800a42c <_malloc_r>:
 800a42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a430:	1ccd      	adds	r5, r1, #3
 800a432:	f025 0503 	bic.w	r5, r5, #3
 800a436:	3508      	adds	r5, #8
 800a438:	2d0c      	cmp	r5, #12
 800a43a:	bf38      	it	cc
 800a43c:	250c      	movcc	r5, #12
 800a43e:	2d00      	cmp	r5, #0
 800a440:	4607      	mov	r7, r0
 800a442:	db01      	blt.n	800a448 <_malloc_r+0x1c>
 800a444:	42a9      	cmp	r1, r5
 800a446:	d905      	bls.n	800a454 <_malloc_r+0x28>
 800a448:	230c      	movs	r3, #12
 800a44a:	603b      	str	r3, [r7, #0]
 800a44c:	2600      	movs	r6, #0
 800a44e:	4630      	mov	r0, r6
 800a450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a454:	4e2e      	ldr	r6, [pc, #184]	; (800a510 <_malloc_r+0xe4>)
 800a456:	f000 fa2b 	bl	800a8b0 <__malloc_lock>
 800a45a:	6833      	ldr	r3, [r6, #0]
 800a45c:	461c      	mov	r4, r3
 800a45e:	bb34      	cbnz	r4, 800a4ae <_malloc_r+0x82>
 800a460:	4629      	mov	r1, r5
 800a462:	4638      	mov	r0, r7
 800a464:	f7ff ffc2 	bl	800a3ec <sbrk_aligned>
 800a468:	1c43      	adds	r3, r0, #1
 800a46a:	4604      	mov	r4, r0
 800a46c:	d14d      	bne.n	800a50a <_malloc_r+0xde>
 800a46e:	6834      	ldr	r4, [r6, #0]
 800a470:	4626      	mov	r6, r4
 800a472:	2e00      	cmp	r6, #0
 800a474:	d140      	bne.n	800a4f8 <_malloc_r+0xcc>
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	4631      	mov	r1, r6
 800a47a:	4638      	mov	r0, r7
 800a47c:	eb04 0803 	add.w	r8, r4, r3
 800a480:	f000 f9ae 	bl	800a7e0 <_sbrk_r>
 800a484:	4580      	cmp	r8, r0
 800a486:	d13a      	bne.n	800a4fe <_malloc_r+0xd2>
 800a488:	6821      	ldr	r1, [r4, #0]
 800a48a:	3503      	adds	r5, #3
 800a48c:	1a6d      	subs	r5, r5, r1
 800a48e:	f025 0503 	bic.w	r5, r5, #3
 800a492:	3508      	adds	r5, #8
 800a494:	2d0c      	cmp	r5, #12
 800a496:	bf38      	it	cc
 800a498:	250c      	movcc	r5, #12
 800a49a:	4629      	mov	r1, r5
 800a49c:	4638      	mov	r0, r7
 800a49e:	f7ff ffa5 	bl	800a3ec <sbrk_aligned>
 800a4a2:	3001      	adds	r0, #1
 800a4a4:	d02b      	beq.n	800a4fe <_malloc_r+0xd2>
 800a4a6:	6823      	ldr	r3, [r4, #0]
 800a4a8:	442b      	add	r3, r5
 800a4aa:	6023      	str	r3, [r4, #0]
 800a4ac:	e00e      	b.n	800a4cc <_malloc_r+0xa0>
 800a4ae:	6822      	ldr	r2, [r4, #0]
 800a4b0:	1b52      	subs	r2, r2, r5
 800a4b2:	d41e      	bmi.n	800a4f2 <_malloc_r+0xc6>
 800a4b4:	2a0b      	cmp	r2, #11
 800a4b6:	d916      	bls.n	800a4e6 <_malloc_r+0xba>
 800a4b8:	1961      	adds	r1, r4, r5
 800a4ba:	42a3      	cmp	r3, r4
 800a4bc:	6025      	str	r5, [r4, #0]
 800a4be:	bf18      	it	ne
 800a4c0:	6059      	strne	r1, [r3, #4]
 800a4c2:	6863      	ldr	r3, [r4, #4]
 800a4c4:	bf08      	it	eq
 800a4c6:	6031      	streq	r1, [r6, #0]
 800a4c8:	5162      	str	r2, [r4, r5]
 800a4ca:	604b      	str	r3, [r1, #4]
 800a4cc:	4638      	mov	r0, r7
 800a4ce:	f104 060b 	add.w	r6, r4, #11
 800a4d2:	f000 f9f3 	bl	800a8bc <__malloc_unlock>
 800a4d6:	f026 0607 	bic.w	r6, r6, #7
 800a4da:	1d23      	adds	r3, r4, #4
 800a4dc:	1af2      	subs	r2, r6, r3
 800a4de:	d0b6      	beq.n	800a44e <_malloc_r+0x22>
 800a4e0:	1b9b      	subs	r3, r3, r6
 800a4e2:	50a3      	str	r3, [r4, r2]
 800a4e4:	e7b3      	b.n	800a44e <_malloc_r+0x22>
 800a4e6:	6862      	ldr	r2, [r4, #4]
 800a4e8:	42a3      	cmp	r3, r4
 800a4ea:	bf0c      	ite	eq
 800a4ec:	6032      	streq	r2, [r6, #0]
 800a4ee:	605a      	strne	r2, [r3, #4]
 800a4f0:	e7ec      	b.n	800a4cc <_malloc_r+0xa0>
 800a4f2:	4623      	mov	r3, r4
 800a4f4:	6864      	ldr	r4, [r4, #4]
 800a4f6:	e7b2      	b.n	800a45e <_malloc_r+0x32>
 800a4f8:	4634      	mov	r4, r6
 800a4fa:	6876      	ldr	r6, [r6, #4]
 800a4fc:	e7b9      	b.n	800a472 <_malloc_r+0x46>
 800a4fe:	230c      	movs	r3, #12
 800a500:	603b      	str	r3, [r7, #0]
 800a502:	4638      	mov	r0, r7
 800a504:	f000 f9da 	bl	800a8bc <__malloc_unlock>
 800a508:	e7a1      	b.n	800a44e <_malloc_r+0x22>
 800a50a:	6025      	str	r5, [r4, #0]
 800a50c:	e7de      	b.n	800a4cc <_malloc_r+0xa0>
 800a50e:	bf00      	nop
 800a510:	2000049c 	.word	0x2000049c

0800a514 <__ssputs_r>:
 800a514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a518:	688e      	ldr	r6, [r1, #8]
 800a51a:	429e      	cmp	r6, r3
 800a51c:	4682      	mov	sl, r0
 800a51e:	460c      	mov	r4, r1
 800a520:	4690      	mov	r8, r2
 800a522:	461f      	mov	r7, r3
 800a524:	d838      	bhi.n	800a598 <__ssputs_r+0x84>
 800a526:	898a      	ldrh	r2, [r1, #12]
 800a528:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a52c:	d032      	beq.n	800a594 <__ssputs_r+0x80>
 800a52e:	6825      	ldr	r5, [r4, #0]
 800a530:	6909      	ldr	r1, [r1, #16]
 800a532:	eba5 0901 	sub.w	r9, r5, r1
 800a536:	6965      	ldr	r5, [r4, #20]
 800a538:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a53c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a540:	3301      	adds	r3, #1
 800a542:	444b      	add	r3, r9
 800a544:	106d      	asrs	r5, r5, #1
 800a546:	429d      	cmp	r5, r3
 800a548:	bf38      	it	cc
 800a54a:	461d      	movcc	r5, r3
 800a54c:	0553      	lsls	r3, r2, #21
 800a54e:	d531      	bpl.n	800a5b4 <__ssputs_r+0xa0>
 800a550:	4629      	mov	r1, r5
 800a552:	f7ff ff6b 	bl	800a42c <_malloc_r>
 800a556:	4606      	mov	r6, r0
 800a558:	b950      	cbnz	r0, 800a570 <__ssputs_r+0x5c>
 800a55a:	230c      	movs	r3, #12
 800a55c:	f8ca 3000 	str.w	r3, [sl]
 800a560:	89a3      	ldrh	r3, [r4, #12]
 800a562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a566:	81a3      	strh	r3, [r4, #12]
 800a568:	f04f 30ff 	mov.w	r0, #4294967295
 800a56c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a570:	6921      	ldr	r1, [r4, #16]
 800a572:	464a      	mov	r2, r9
 800a574:	f7ff fa08 	bl	8009988 <memcpy>
 800a578:	89a3      	ldrh	r3, [r4, #12]
 800a57a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a57e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a582:	81a3      	strh	r3, [r4, #12]
 800a584:	6126      	str	r6, [r4, #16]
 800a586:	6165      	str	r5, [r4, #20]
 800a588:	444e      	add	r6, r9
 800a58a:	eba5 0509 	sub.w	r5, r5, r9
 800a58e:	6026      	str	r6, [r4, #0]
 800a590:	60a5      	str	r5, [r4, #8]
 800a592:	463e      	mov	r6, r7
 800a594:	42be      	cmp	r6, r7
 800a596:	d900      	bls.n	800a59a <__ssputs_r+0x86>
 800a598:	463e      	mov	r6, r7
 800a59a:	6820      	ldr	r0, [r4, #0]
 800a59c:	4632      	mov	r2, r6
 800a59e:	4641      	mov	r1, r8
 800a5a0:	f000 f96c 	bl	800a87c <memmove>
 800a5a4:	68a3      	ldr	r3, [r4, #8]
 800a5a6:	1b9b      	subs	r3, r3, r6
 800a5a8:	60a3      	str	r3, [r4, #8]
 800a5aa:	6823      	ldr	r3, [r4, #0]
 800a5ac:	4433      	add	r3, r6
 800a5ae:	6023      	str	r3, [r4, #0]
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	e7db      	b.n	800a56c <__ssputs_r+0x58>
 800a5b4:	462a      	mov	r2, r5
 800a5b6:	f000 f987 	bl	800a8c8 <_realloc_r>
 800a5ba:	4606      	mov	r6, r0
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	d1e1      	bne.n	800a584 <__ssputs_r+0x70>
 800a5c0:	6921      	ldr	r1, [r4, #16]
 800a5c2:	4650      	mov	r0, sl
 800a5c4:	f7ff fec6 	bl	800a354 <_free_r>
 800a5c8:	e7c7      	b.n	800a55a <__ssputs_r+0x46>
	...

0800a5cc <_svfiprintf_r>:
 800a5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d0:	4698      	mov	r8, r3
 800a5d2:	898b      	ldrh	r3, [r1, #12]
 800a5d4:	061b      	lsls	r3, r3, #24
 800a5d6:	b09d      	sub	sp, #116	; 0x74
 800a5d8:	4607      	mov	r7, r0
 800a5da:	460d      	mov	r5, r1
 800a5dc:	4614      	mov	r4, r2
 800a5de:	d50e      	bpl.n	800a5fe <_svfiprintf_r+0x32>
 800a5e0:	690b      	ldr	r3, [r1, #16]
 800a5e2:	b963      	cbnz	r3, 800a5fe <_svfiprintf_r+0x32>
 800a5e4:	2140      	movs	r1, #64	; 0x40
 800a5e6:	f7ff ff21 	bl	800a42c <_malloc_r>
 800a5ea:	6028      	str	r0, [r5, #0]
 800a5ec:	6128      	str	r0, [r5, #16]
 800a5ee:	b920      	cbnz	r0, 800a5fa <_svfiprintf_r+0x2e>
 800a5f0:	230c      	movs	r3, #12
 800a5f2:	603b      	str	r3, [r7, #0]
 800a5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f8:	e0d1      	b.n	800a79e <_svfiprintf_r+0x1d2>
 800a5fa:	2340      	movs	r3, #64	; 0x40
 800a5fc:	616b      	str	r3, [r5, #20]
 800a5fe:	2300      	movs	r3, #0
 800a600:	9309      	str	r3, [sp, #36]	; 0x24
 800a602:	2320      	movs	r3, #32
 800a604:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a608:	f8cd 800c 	str.w	r8, [sp, #12]
 800a60c:	2330      	movs	r3, #48	; 0x30
 800a60e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a7b8 <_svfiprintf_r+0x1ec>
 800a612:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a616:	f04f 0901 	mov.w	r9, #1
 800a61a:	4623      	mov	r3, r4
 800a61c:	469a      	mov	sl, r3
 800a61e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a622:	b10a      	cbz	r2, 800a628 <_svfiprintf_r+0x5c>
 800a624:	2a25      	cmp	r2, #37	; 0x25
 800a626:	d1f9      	bne.n	800a61c <_svfiprintf_r+0x50>
 800a628:	ebba 0b04 	subs.w	fp, sl, r4
 800a62c:	d00b      	beq.n	800a646 <_svfiprintf_r+0x7a>
 800a62e:	465b      	mov	r3, fp
 800a630:	4622      	mov	r2, r4
 800a632:	4629      	mov	r1, r5
 800a634:	4638      	mov	r0, r7
 800a636:	f7ff ff6d 	bl	800a514 <__ssputs_r>
 800a63a:	3001      	adds	r0, #1
 800a63c:	f000 80aa 	beq.w	800a794 <_svfiprintf_r+0x1c8>
 800a640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a642:	445a      	add	r2, fp
 800a644:	9209      	str	r2, [sp, #36]	; 0x24
 800a646:	f89a 3000 	ldrb.w	r3, [sl]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f000 80a2 	beq.w	800a794 <_svfiprintf_r+0x1c8>
 800a650:	2300      	movs	r3, #0
 800a652:	f04f 32ff 	mov.w	r2, #4294967295
 800a656:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a65a:	f10a 0a01 	add.w	sl, sl, #1
 800a65e:	9304      	str	r3, [sp, #16]
 800a660:	9307      	str	r3, [sp, #28]
 800a662:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a666:	931a      	str	r3, [sp, #104]	; 0x68
 800a668:	4654      	mov	r4, sl
 800a66a:	2205      	movs	r2, #5
 800a66c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a670:	4851      	ldr	r0, [pc, #324]	; (800a7b8 <_svfiprintf_r+0x1ec>)
 800a672:	f7f5 fdbd 	bl	80001f0 <memchr>
 800a676:	9a04      	ldr	r2, [sp, #16]
 800a678:	b9d8      	cbnz	r0, 800a6b2 <_svfiprintf_r+0xe6>
 800a67a:	06d0      	lsls	r0, r2, #27
 800a67c:	bf44      	itt	mi
 800a67e:	2320      	movmi	r3, #32
 800a680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a684:	0711      	lsls	r1, r2, #28
 800a686:	bf44      	itt	mi
 800a688:	232b      	movmi	r3, #43	; 0x2b
 800a68a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a68e:	f89a 3000 	ldrb.w	r3, [sl]
 800a692:	2b2a      	cmp	r3, #42	; 0x2a
 800a694:	d015      	beq.n	800a6c2 <_svfiprintf_r+0xf6>
 800a696:	9a07      	ldr	r2, [sp, #28]
 800a698:	4654      	mov	r4, sl
 800a69a:	2000      	movs	r0, #0
 800a69c:	f04f 0c0a 	mov.w	ip, #10
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6a6:	3b30      	subs	r3, #48	; 0x30
 800a6a8:	2b09      	cmp	r3, #9
 800a6aa:	d94e      	bls.n	800a74a <_svfiprintf_r+0x17e>
 800a6ac:	b1b0      	cbz	r0, 800a6dc <_svfiprintf_r+0x110>
 800a6ae:	9207      	str	r2, [sp, #28]
 800a6b0:	e014      	b.n	800a6dc <_svfiprintf_r+0x110>
 800a6b2:	eba0 0308 	sub.w	r3, r0, r8
 800a6b6:	fa09 f303 	lsl.w	r3, r9, r3
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	9304      	str	r3, [sp, #16]
 800a6be:	46a2      	mov	sl, r4
 800a6c0:	e7d2      	b.n	800a668 <_svfiprintf_r+0x9c>
 800a6c2:	9b03      	ldr	r3, [sp, #12]
 800a6c4:	1d19      	adds	r1, r3, #4
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	9103      	str	r1, [sp, #12]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	bfbb      	ittet	lt
 800a6ce:	425b      	neglt	r3, r3
 800a6d0:	f042 0202 	orrlt.w	r2, r2, #2
 800a6d4:	9307      	strge	r3, [sp, #28]
 800a6d6:	9307      	strlt	r3, [sp, #28]
 800a6d8:	bfb8      	it	lt
 800a6da:	9204      	strlt	r2, [sp, #16]
 800a6dc:	7823      	ldrb	r3, [r4, #0]
 800a6de:	2b2e      	cmp	r3, #46	; 0x2e
 800a6e0:	d10c      	bne.n	800a6fc <_svfiprintf_r+0x130>
 800a6e2:	7863      	ldrb	r3, [r4, #1]
 800a6e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a6e6:	d135      	bne.n	800a754 <_svfiprintf_r+0x188>
 800a6e8:	9b03      	ldr	r3, [sp, #12]
 800a6ea:	1d1a      	adds	r2, r3, #4
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	9203      	str	r2, [sp, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	bfb8      	it	lt
 800a6f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6f8:	3402      	adds	r4, #2
 800a6fa:	9305      	str	r3, [sp, #20]
 800a6fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a7c8 <_svfiprintf_r+0x1fc>
 800a700:	7821      	ldrb	r1, [r4, #0]
 800a702:	2203      	movs	r2, #3
 800a704:	4650      	mov	r0, sl
 800a706:	f7f5 fd73 	bl	80001f0 <memchr>
 800a70a:	b140      	cbz	r0, 800a71e <_svfiprintf_r+0x152>
 800a70c:	2340      	movs	r3, #64	; 0x40
 800a70e:	eba0 000a 	sub.w	r0, r0, sl
 800a712:	fa03 f000 	lsl.w	r0, r3, r0
 800a716:	9b04      	ldr	r3, [sp, #16]
 800a718:	4303      	orrs	r3, r0
 800a71a:	3401      	adds	r4, #1
 800a71c:	9304      	str	r3, [sp, #16]
 800a71e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a722:	4826      	ldr	r0, [pc, #152]	; (800a7bc <_svfiprintf_r+0x1f0>)
 800a724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a728:	2206      	movs	r2, #6
 800a72a:	f7f5 fd61 	bl	80001f0 <memchr>
 800a72e:	2800      	cmp	r0, #0
 800a730:	d038      	beq.n	800a7a4 <_svfiprintf_r+0x1d8>
 800a732:	4b23      	ldr	r3, [pc, #140]	; (800a7c0 <_svfiprintf_r+0x1f4>)
 800a734:	bb1b      	cbnz	r3, 800a77e <_svfiprintf_r+0x1b2>
 800a736:	9b03      	ldr	r3, [sp, #12]
 800a738:	3307      	adds	r3, #7
 800a73a:	f023 0307 	bic.w	r3, r3, #7
 800a73e:	3308      	adds	r3, #8
 800a740:	9303      	str	r3, [sp, #12]
 800a742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a744:	4433      	add	r3, r6
 800a746:	9309      	str	r3, [sp, #36]	; 0x24
 800a748:	e767      	b.n	800a61a <_svfiprintf_r+0x4e>
 800a74a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a74e:	460c      	mov	r4, r1
 800a750:	2001      	movs	r0, #1
 800a752:	e7a5      	b.n	800a6a0 <_svfiprintf_r+0xd4>
 800a754:	2300      	movs	r3, #0
 800a756:	3401      	adds	r4, #1
 800a758:	9305      	str	r3, [sp, #20]
 800a75a:	4619      	mov	r1, r3
 800a75c:	f04f 0c0a 	mov.w	ip, #10
 800a760:	4620      	mov	r0, r4
 800a762:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a766:	3a30      	subs	r2, #48	; 0x30
 800a768:	2a09      	cmp	r2, #9
 800a76a:	d903      	bls.n	800a774 <_svfiprintf_r+0x1a8>
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d0c5      	beq.n	800a6fc <_svfiprintf_r+0x130>
 800a770:	9105      	str	r1, [sp, #20]
 800a772:	e7c3      	b.n	800a6fc <_svfiprintf_r+0x130>
 800a774:	fb0c 2101 	mla	r1, ip, r1, r2
 800a778:	4604      	mov	r4, r0
 800a77a:	2301      	movs	r3, #1
 800a77c:	e7f0      	b.n	800a760 <_svfiprintf_r+0x194>
 800a77e:	ab03      	add	r3, sp, #12
 800a780:	9300      	str	r3, [sp, #0]
 800a782:	462a      	mov	r2, r5
 800a784:	4b0f      	ldr	r3, [pc, #60]	; (800a7c4 <_svfiprintf_r+0x1f8>)
 800a786:	a904      	add	r1, sp, #16
 800a788:	4638      	mov	r0, r7
 800a78a:	f7fc fa33 	bl	8006bf4 <_printf_float>
 800a78e:	1c42      	adds	r2, r0, #1
 800a790:	4606      	mov	r6, r0
 800a792:	d1d6      	bne.n	800a742 <_svfiprintf_r+0x176>
 800a794:	89ab      	ldrh	r3, [r5, #12]
 800a796:	065b      	lsls	r3, r3, #25
 800a798:	f53f af2c 	bmi.w	800a5f4 <_svfiprintf_r+0x28>
 800a79c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a79e:	b01d      	add	sp, #116	; 0x74
 800a7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a4:	ab03      	add	r3, sp, #12
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	462a      	mov	r2, r5
 800a7aa:	4b06      	ldr	r3, [pc, #24]	; (800a7c4 <_svfiprintf_r+0x1f8>)
 800a7ac:	a904      	add	r1, sp, #16
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	f7fc fcc4 	bl	800713c <_printf_i>
 800a7b4:	e7eb      	b.n	800a78e <_svfiprintf_r+0x1c2>
 800a7b6:	bf00      	nop
 800a7b8:	0800b85c 	.word	0x0800b85c
 800a7bc:	0800b866 	.word	0x0800b866
 800a7c0:	08006bf5 	.word	0x08006bf5
 800a7c4:	0800a515 	.word	0x0800a515
 800a7c8:	0800b862 	.word	0x0800b862
 800a7cc:	00000000 	.word	0x00000000

0800a7d0 <nan>:
 800a7d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a7d8 <nan+0x8>
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop
 800a7d8:	00000000 	.word	0x00000000
 800a7dc:	7ff80000 	.word	0x7ff80000

0800a7e0 <_sbrk_r>:
 800a7e0:	b538      	push	{r3, r4, r5, lr}
 800a7e2:	4d06      	ldr	r5, [pc, #24]	; (800a7fc <_sbrk_r+0x1c>)
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	4604      	mov	r4, r0
 800a7e8:	4608      	mov	r0, r1
 800a7ea:	602b      	str	r3, [r5, #0]
 800a7ec:	f7f7 fe5e 	bl	80024ac <_sbrk>
 800a7f0:	1c43      	adds	r3, r0, #1
 800a7f2:	d102      	bne.n	800a7fa <_sbrk_r+0x1a>
 800a7f4:	682b      	ldr	r3, [r5, #0]
 800a7f6:	b103      	cbz	r3, 800a7fa <_sbrk_r+0x1a>
 800a7f8:	6023      	str	r3, [r4, #0]
 800a7fa:	bd38      	pop	{r3, r4, r5, pc}
 800a7fc:	200004a4 	.word	0x200004a4

0800a800 <__ascii_wctomb>:
 800a800:	b149      	cbz	r1, 800a816 <__ascii_wctomb+0x16>
 800a802:	2aff      	cmp	r2, #255	; 0xff
 800a804:	bf85      	ittet	hi
 800a806:	238a      	movhi	r3, #138	; 0x8a
 800a808:	6003      	strhi	r3, [r0, #0]
 800a80a:	700a      	strbls	r2, [r1, #0]
 800a80c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a810:	bf98      	it	ls
 800a812:	2001      	movls	r0, #1
 800a814:	4770      	bx	lr
 800a816:	4608      	mov	r0, r1
 800a818:	4770      	bx	lr
	...

0800a81c <__assert_func>:
 800a81c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a81e:	4614      	mov	r4, r2
 800a820:	461a      	mov	r2, r3
 800a822:	4b09      	ldr	r3, [pc, #36]	; (800a848 <__assert_func+0x2c>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4605      	mov	r5, r0
 800a828:	68d8      	ldr	r0, [r3, #12]
 800a82a:	b14c      	cbz	r4, 800a840 <__assert_func+0x24>
 800a82c:	4b07      	ldr	r3, [pc, #28]	; (800a84c <__assert_func+0x30>)
 800a82e:	9100      	str	r1, [sp, #0]
 800a830:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a834:	4906      	ldr	r1, [pc, #24]	; (800a850 <__assert_func+0x34>)
 800a836:	462b      	mov	r3, r5
 800a838:	f000 f80e 	bl	800a858 <fiprintf>
 800a83c:	f000 fa8c 	bl	800ad58 <abort>
 800a840:	4b04      	ldr	r3, [pc, #16]	; (800a854 <__assert_func+0x38>)
 800a842:	461c      	mov	r4, r3
 800a844:	e7f3      	b.n	800a82e <__assert_func+0x12>
 800a846:	bf00      	nop
 800a848:	2000000c 	.word	0x2000000c
 800a84c:	0800b86d 	.word	0x0800b86d
 800a850:	0800b87a 	.word	0x0800b87a
 800a854:	0800b8a8 	.word	0x0800b8a8

0800a858 <fiprintf>:
 800a858:	b40e      	push	{r1, r2, r3}
 800a85a:	b503      	push	{r0, r1, lr}
 800a85c:	4601      	mov	r1, r0
 800a85e:	ab03      	add	r3, sp, #12
 800a860:	4805      	ldr	r0, [pc, #20]	; (800a878 <fiprintf+0x20>)
 800a862:	f853 2b04 	ldr.w	r2, [r3], #4
 800a866:	6800      	ldr	r0, [r0, #0]
 800a868:	9301      	str	r3, [sp, #4]
 800a86a:	f000 f885 	bl	800a978 <_vfiprintf_r>
 800a86e:	b002      	add	sp, #8
 800a870:	f85d eb04 	ldr.w	lr, [sp], #4
 800a874:	b003      	add	sp, #12
 800a876:	4770      	bx	lr
 800a878:	2000000c 	.word	0x2000000c

0800a87c <memmove>:
 800a87c:	4288      	cmp	r0, r1
 800a87e:	b510      	push	{r4, lr}
 800a880:	eb01 0402 	add.w	r4, r1, r2
 800a884:	d902      	bls.n	800a88c <memmove+0x10>
 800a886:	4284      	cmp	r4, r0
 800a888:	4623      	mov	r3, r4
 800a88a:	d807      	bhi.n	800a89c <memmove+0x20>
 800a88c:	1e43      	subs	r3, r0, #1
 800a88e:	42a1      	cmp	r1, r4
 800a890:	d008      	beq.n	800a8a4 <memmove+0x28>
 800a892:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a896:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a89a:	e7f8      	b.n	800a88e <memmove+0x12>
 800a89c:	4402      	add	r2, r0
 800a89e:	4601      	mov	r1, r0
 800a8a0:	428a      	cmp	r2, r1
 800a8a2:	d100      	bne.n	800a8a6 <memmove+0x2a>
 800a8a4:	bd10      	pop	{r4, pc}
 800a8a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8ae:	e7f7      	b.n	800a8a0 <memmove+0x24>

0800a8b0 <__malloc_lock>:
 800a8b0:	4801      	ldr	r0, [pc, #4]	; (800a8b8 <__malloc_lock+0x8>)
 800a8b2:	f000 bc11 	b.w	800b0d8 <__retarget_lock_acquire_recursive>
 800a8b6:	bf00      	nop
 800a8b8:	200004a8 	.word	0x200004a8

0800a8bc <__malloc_unlock>:
 800a8bc:	4801      	ldr	r0, [pc, #4]	; (800a8c4 <__malloc_unlock+0x8>)
 800a8be:	f000 bc0c 	b.w	800b0da <__retarget_lock_release_recursive>
 800a8c2:	bf00      	nop
 800a8c4:	200004a8 	.word	0x200004a8

0800a8c8 <_realloc_r>:
 800a8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8cc:	4680      	mov	r8, r0
 800a8ce:	4614      	mov	r4, r2
 800a8d0:	460e      	mov	r6, r1
 800a8d2:	b921      	cbnz	r1, 800a8de <_realloc_r+0x16>
 800a8d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d8:	4611      	mov	r1, r2
 800a8da:	f7ff bda7 	b.w	800a42c <_malloc_r>
 800a8de:	b92a      	cbnz	r2, 800a8ec <_realloc_r+0x24>
 800a8e0:	f7ff fd38 	bl	800a354 <_free_r>
 800a8e4:	4625      	mov	r5, r4
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ec:	f000 fc5c 	bl	800b1a8 <_malloc_usable_size_r>
 800a8f0:	4284      	cmp	r4, r0
 800a8f2:	4607      	mov	r7, r0
 800a8f4:	d802      	bhi.n	800a8fc <_realloc_r+0x34>
 800a8f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a8fa:	d812      	bhi.n	800a922 <_realloc_r+0x5a>
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	4640      	mov	r0, r8
 800a900:	f7ff fd94 	bl	800a42c <_malloc_r>
 800a904:	4605      	mov	r5, r0
 800a906:	2800      	cmp	r0, #0
 800a908:	d0ed      	beq.n	800a8e6 <_realloc_r+0x1e>
 800a90a:	42bc      	cmp	r4, r7
 800a90c:	4622      	mov	r2, r4
 800a90e:	4631      	mov	r1, r6
 800a910:	bf28      	it	cs
 800a912:	463a      	movcs	r2, r7
 800a914:	f7ff f838 	bl	8009988 <memcpy>
 800a918:	4631      	mov	r1, r6
 800a91a:	4640      	mov	r0, r8
 800a91c:	f7ff fd1a 	bl	800a354 <_free_r>
 800a920:	e7e1      	b.n	800a8e6 <_realloc_r+0x1e>
 800a922:	4635      	mov	r5, r6
 800a924:	e7df      	b.n	800a8e6 <_realloc_r+0x1e>

0800a926 <__sfputc_r>:
 800a926:	6893      	ldr	r3, [r2, #8]
 800a928:	3b01      	subs	r3, #1
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	b410      	push	{r4}
 800a92e:	6093      	str	r3, [r2, #8]
 800a930:	da08      	bge.n	800a944 <__sfputc_r+0x1e>
 800a932:	6994      	ldr	r4, [r2, #24]
 800a934:	42a3      	cmp	r3, r4
 800a936:	db01      	blt.n	800a93c <__sfputc_r+0x16>
 800a938:	290a      	cmp	r1, #10
 800a93a:	d103      	bne.n	800a944 <__sfputc_r+0x1e>
 800a93c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a940:	f000 b94a 	b.w	800abd8 <__swbuf_r>
 800a944:	6813      	ldr	r3, [r2, #0]
 800a946:	1c58      	adds	r0, r3, #1
 800a948:	6010      	str	r0, [r2, #0]
 800a94a:	7019      	strb	r1, [r3, #0]
 800a94c:	4608      	mov	r0, r1
 800a94e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <__sfputs_r>:
 800a954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a956:	4606      	mov	r6, r0
 800a958:	460f      	mov	r7, r1
 800a95a:	4614      	mov	r4, r2
 800a95c:	18d5      	adds	r5, r2, r3
 800a95e:	42ac      	cmp	r4, r5
 800a960:	d101      	bne.n	800a966 <__sfputs_r+0x12>
 800a962:	2000      	movs	r0, #0
 800a964:	e007      	b.n	800a976 <__sfputs_r+0x22>
 800a966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a96a:	463a      	mov	r2, r7
 800a96c:	4630      	mov	r0, r6
 800a96e:	f7ff ffda 	bl	800a926 <__sfputc_r>
 800a972:	1c43      	adds	r3, r0, #1
 800a974:	d1f3      	bne.n	800a95e <__sfputs_r+0xa>
 800a976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a978 <_vfiprintf_r>:
 800a978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97c:	460d      	mov	r5, r1
 800a97e:	b09d      	sub	sp, #116	; 0x74
 800a980:	4614      	mov	r4, r2
 800a982:	4698      	mov	r8, r3
 800a984:	4606      	mov	r6, r0
 800a986:	b118      	cbz	r0, 800a990 <_vfiprintf_r+0x18>
 800a988:	6983      	ldr	r3, [r0, #24]
 800a98a:	b90b      	cbnz	r3, 800a990 <_vfiprintf_r+0x18>
 800a98c:	f000 fb06 	bl	800af9c <__sinit>
 800a990:	4b89      	ldr	r3, [pc, #548]	; (800abb8 <_vfiprintf_r+0x240>)
 800a992:	429d      	cmp	r5, r3
 800a994:	d11b      	bne.n	800a9ce <_vfiprintf_r+0x56>
 800a996:	6875      	ldr	r5, [r6, #4]
 800a998:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a99a:	07d9      	lsls	r1, r3, #31
 800a99c:	d405      	bmi.n	800a9aa <_vfiprintf_r+0x32>
 800a99e:	89ab      	ldrh	r3, [r5, #12]
 800a9a0:	059a      	lsls	r2, r3, #22
 800a9a2:	d402      	bmi.n	800a9aa <_vfiprintf_r+0x32>
 800a9a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9a6:	f000 fb97 	bl	800b0d8 <__retarget_lock_acquire_recursive>
 800a9aa:	89ab      	ldrh	r3, [r5, #12]
 800a9ac:	071b      	lsls	r3, r3, #28
 800a9ae:	d501      	bpl.n	800a9b4 <_vfiprintf_r+0x3c>
 800a9b0:	692b      	ldr	r3, [r5, #16]
 800a9b2:	b9eb      	cbnz	r3, 800a9f0 <_vfiprintf_r+0x78>
 800a9b4:	4629      	mov	r1, r5
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	f000 f960 	bl	800ac7c <__swsetup_r>
 800a9bc:	b1c0      	cbz	r0, 800a9f0 <_vfiprintf_r+0x78>
 800a9be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9c0:	07dc      	lsls	r4, r3, #31
 800a9c2:	d50e      	bpl.n	800a9e2 <_vfiprintf_r+0x6a>
 800a9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c8:	b01d      	add	sp, #116	; 0x74
 800a9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ce:	4b7b      	ldr	r3, [pc, #492]	; (800abbc <_vfiprintf_r+0x244>)
 800a9d0:	429d      	cmp	r5, r3
 800a9d2:	d101      	bne.n	800a9d8 <_vfiprintf_r+0x60>
 800a9d4:	68b5      	ldr	r5, [r6, #8]
 800a9d6:	e7df      	b.n	800a998 <_vfiprintf_r+0x20>
 800a9d8:	4b79      	ldr	r3, [pc, #484]	; (800abc0 <_vfiprintf_r+0x248>)
 800a9da:	429d      	cmp	r5, r3
 800a9dc:	bf08      	it	eq
 800a9de:	68f5      	ldreq	r5, [r6, #12]
 800a9e0:	e7da      	b.n	800a998 <_vfiprintf_r+0x20>
 800a9e2:	89ab      	ldrh	r3, [r5, #12]
 800a9e4:	0598      	lsls	r0, r3, #22
 800a9e6:	d4ed      	bmi.n	800a9c4 <_vfiprintf_r+0x4c>
 800a9e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9ea:	f000 fb76 	bl	800b0da <__retarget_lock_release_recursive>
 800a9ee:	e7e9      	b.n	800a9c4 <_vfiprintf_r+0x4c>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a9f4:	2320      	movs	r3, #32
 800a9f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9fe:	2330      	movs	r3, #48	; 0x30
 800aa00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800abc4 <_vfiprintf_r+0x24c>
 800aa04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa08:	f04f 0901 	mov.w	r9, #1
 800aa0c:	4623      	mov	r3, r4
 800aa0e:	469a      	mov	sl, r3
 800aa10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa14:	b10a      	cbz	r2, 800aa1a <_vfiprintf_r+0xa2>
 800aa16:	2a25      	cmp	r2, #37	; 0x25
 800aa18:	d1f9      	bne.n	800aa0e <_vfiprintf_r+0x96>
 800aa1a:	ebba 0b04 	subs.w	fp, sl, r4
 800aa1e:	d00b      	beq.n	800aa38 <_vfiprintf_r+0xc0>
 800aa20:	465b      	mov	r3, fp
 800aa22:	4622      	mov	r2, r4
 800aa24:	4629      	mov	r1, r5
 800aa26:	4630      	mov	r0, r6
 800aa28:	f7ff ff94 	bl	800a954 <__sfputs_r>
 800aa2c:	3001      	adds	r0, #1
 800aa2e:	f000 80aa 	beq.w	800ab86 <_vfiprintf_r+0x20e>
 800aa32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa34:	445a      	add	r2, fp
 800aa36:	9209      	str	r2, [sp, #36]	; 0x24
 800aa38:	f89a 3000 	ldrb.w	r3, [sl]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f000 80a2 	beq.w	800ab86 <_vfiprintf_r+0x20e>
 800aa42:	2300      	movs	r3, #0
 800aa44:	f04f 32ff 	mov.w	r2, #4294967295
 800aa48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa4c:	f10a 0a01 	add.w	sl, sl, #1
 800aa50:	9304      	str	r3, [sp, #16]
 800aa52:	9307      	str	r3, [sp, #28]
 800aa54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa58:	931a      	str	r3, [sp, #104]	; 0x68
 800aa5a:	4654      	mov	r4, sl
 800aa5c:	2205      	movs	r2, #5
 800aa5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa62:	4858      	ldr	r0, [pc, #352]	; (800abc4 <_vfiprintf_r+0x24c>)
 800aa64:	f7f5 fbc4 	bl	80001f0 <memchr>
 800aa68:	9a04      	ldr	r2, [sp, #16]
 800aa6a:	b9d8      	cbnz	r0, 800aaa4 <_vfiprintf_r+0x12c>
 800aa6c:	06d1      	lsls	r1, r2, #27
 800aa6e:	bf44      	itt	mi
 800aa70:	2320      	movmi	r3, #32
 800aa72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa76:	0713      	lsls	r3, r2, #28
 800aa78:	bf44      	itt	mi
 800aa7a:	232b      	movmi	r3, #43	; 0x2b
 800aa7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa80:	f89a 3000 	ldrb.w	r3, [sl]
 800aa84:	2b2a      	cmp	r3, #42	; 0x2a
 800aa86:	d015      	beq.n	800aab4 <_vfiprintf_r+0x13c>
 800aa88:	9a07      	ldr	r2, [sp, #28]
 800aa8a:	4654      	mov	r4, sl
 800aa8c:	2000      	movs	r0, #0
 800aa8e:	f04f 0c0a 	mov.w	ip, #10
 800aa92:	4621      	mov	r1, r4
 800aa94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa98:	3b30      	subs	r3, #48	; 0x30
 800aa9a:	2b09      	cmp	r3, #9
 800aa9c:	d94e      	bls.n	800ab3c <_vfiprintf_r+0x1c4>
 800aa9e:	b1b0      	cbz	r0, 800aace <_vfiprintf_r+0x156>
 800aaa0:	9207      	str	r2, [sp, #28]
 800aaa2:	e014      	b.n	800aace <_vfiprintf_r+0x156>
 800aaa4:	eba0 0308 	sub.w	r3, r0, r8
 800aaa8:	fa09 f303 	lsl.w	r3, r9, r3
 800aaac:	4313      	orrs	r3, r2
 800aaae:	9304      	str	r3, [sp, #16]
 800aab0:	46a2      	mov	sl, r4
 800aab2:	e7d2      	b.n	800aa5a <_vfiprintf_r+0xe2>
 800aab4:	9b03      	ldr	r3, [sp, #12]
 800aab6:	1d19      	adds	r1, r3, #4
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	9103      	str	r1, [sp, #12]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	bfbb      	ittet	lt
 800aac0:	425b      	neglt	r3, r3
 800aac2:	f042 0202 	orrlt.w	r2, r2, #2
 800aac6:	9307      	strge	r3, [sp, #28]
 800aac8:	9307      	strlt	r3, [sp, #28]
 800aaca:	bfb8      	it	lt
 800aacc:	9204      	strlt	r2, [sp, #16]
 800aace:	7823      	ldrb	r3, [r4, #0]
 800aad0:	2b2e      	cmp	r3, #46	; 0x2e
 800aad2:	d10c      	bne.n	800aaee <_vfiprintf_r+0x176>
 800aad4:	7863      	ldrb	r3, [r4, #1]
 800aad6:	2b2a      	cmp	r3, #42	; 0x2a
 800aad8:	d135      	bne.n	800ab46 <_vfiprintf_r+0x1ce>
 800aada:	9b03      	ldr	r3, [sp, #12]
 800aadc:	1d1a      	adds	r2, r3, #4
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	9203      	str	r2, [sp, #12]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	bfb8      	it	lt
 800aae6:	f04f 33ff 	movlt.w	r3, #4294967295
 800aaea:	3402      	adds	r4, #2
 800aaec:	9305      	str	r3, [sp, #20]
 800aaee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800abd4 <_vfiprintf_r+0x25c>
 800aaf2:	7821      	ldrb	r1, [r4, #0]
 800aaf4:	2203      	movs	r2, #3
 800aaf6:	4650      	mov	r0, sl
 800aaf8:	f7f5 fb7a 	bl	80001f0 <memchr>
 800aafc:	b140      	cbz	r0, 800ab10 <_vfiprintf_r+0x198>
 800aafe:	2340      	movs	r3, #64	; 0x40
 800ab00:	eba0 000a 	sub.w	r0, r0, sl
 800ab04:	fa03 f000 	lsl.w	r0, r3, r0
 800ab08:	9b04      	ldr	r3, [sp, #16]
 800ab0a:	4303      	orrs	r3, r0
 800ab0c:	3401      	adds	r4, #1
 800ab0e:	9304      	str	r3, [sp, #16]
 800ab10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab14:	482c      	ldr	r0, [pc, #176]	; (800abc8 <_vfiprintf_r+0x250>)
 800ab16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab1a:	2206      	movs	r2, #6
 800ab1c:	f7f5 fb68 	bl	80001f0 <memchr>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d03f      	beq.n	800aba4 <_vfiprintf_r+0x22c>
 800ab24:	4b29      	ldr	r3, [pc, #164]	; (800abcc <_vfiprintf_r+0x254>)
 800ab26:	bb1b      	cbnz	r3, 800ab70 <_vfiprintf_r+0x1f8>
 800ab28:	9b03      	ldr	r3, [sp, #12]
 800ab2a:	3307      	adds	r3, #7
 800ab2c:	f023 0307 	bic.w	r3, r3, #7
 800ab30:	3308      	adds	r3, #8
 800ab32:	9303      	str	r3, [sp, #12]
 800ab34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab36:	443b      	add	r3, r7
 800ab38:	9309      	str	r3, [sp, #36]	; 0x24
 800ab3a:	e767      	b.n	800aa0c <_vfiprintf_r+0x94>
 800ab3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab40:	460c      	mov	r4, r1
 800ab42:	2001      	movs	r0, #1
 800ab44:	e7a5      	b.n	800aa92 <_vfiprintf_r+0x11a>
 800ab46:	2300      	movs	r3, #0
 800ab48:	3401      	adds	r4, #1
 800ab4a:	9305      	str	r3, [sp, #20]
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	f04f 0c0a 	mov.w	ip, #10
 800ab52:	4620      	mov	r0, r4
 800ab54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab58:	3a30      	subs	r2, #48	; 0x30
 800ab5a:	2a09      	cmp	r2, #9
 800ab5c:	d903      	bls.n	800ab66 <_vfiprintf_r+0x1ee>
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d0c5      	beq.n	800aaee <_vfiprintf_r+0x176>
 800ab62:	9105      	str	r1, [sp, #20]
 800ab64:	e7c3      	b.n	800aaee <_vfiprintf_r+0x176>
 800ab66:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e7f0      	b.n	800ab52 <_vfiprintf_r+0x1da>
 800ab70:	ab03      	add	r3, sp, #12
 800ab72:	9300      	str	r3, [sp, #0]
 800ab74:	462a      	mov	r2, r5
 800ab76:	4b16      	ldr	r3, [pc, #88]	; (800abd0 <_vfiprintf_r+0x258>)
 800ab78:	a904      	add	r1, sp, #16
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	f7fc f83a 	bl	8006bf4 <_printf_float>
 800ab80:	4607      	mov	r7, r0
 800ab82:	1c78      	adds	r0, r7, #1
 800ab84:	d1d6      	bne.n	800ab34 <_vfiprintf_r+0x1bc>
 800ab86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab88:	07d9      	lsls	r1, r3, #31
 800ab8a:	d405      	bmi.n	800ab98 <_vfiprintf_r+0x220>
 800ab8c:	89ab      	ldrh	r3, [r5, #12]
 800ab8e:	059a      	lsls	r2, r3, #22
 800ab90:	d402      	bmi.n	800ab98 <_vfiprintf_r+0x220>
 800ab92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab94:	f000 faa1 	bl	800b0da <__retarget_lock_release_recursive>
 800ab98:	89ab      	ldrh	r3, [r5, #12]
 800ab9a:	065b      	lsls	r3, r3, #25
 800ab9c:	f53f af12 	bmi.w	800a9c4 <_vfiprintf_r+0x4c>
 800aba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aba2:	e711      	b.n	800a9c8 <_vfiprintf_r+0x50>
 800aba4:	ab03      	add	r3, sp, #12
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	462a      	mov	r2, r5
 800abaa:	4b09      	ldr	r3, [pc, #36]	; (800abd0 <_vfiprintf_r+0x258>)
 800abac:	a904      	add	r1, sp, #16
 800abae:	4630      	mov	r0, r6
 800abb0:	f7fc fac4 	bl	800713c <_printf_i>
 800abb4:	e7e4      	b.n	800ab80 <_vfiprintf_r+0x208>
 800abb6:	bf00      	nop
 800abb8:	0800b8cc 	.word	0x0800b8cc
 800abbc:	0800b8ec 	.word	0x0800b8ec
 800abc0:	0800b8ac 	.word	0x0800b8ac
 800abc4:	0800b85c 	.word	0x0800b85c
 800abc8:	0800b866 	.word	0x0800b866
 800abcc:	08006bf5 	.word	0x08006bf5
 800abd0:	0800a955 	.word	0x0800a955
 800abd4:	0800b862 	.word	0x0800b862

0800abd8 <__swbuf_r>:
 800abd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abda:	460e      	mov	r6, r1
 800abdc:	4614      	mov	r4, r2
 800abde:	4605      	mov	r5, r0
 800abe0:	b118      	cbz	r0, 800abea <__swbuf_r+0x12>
 800abe2:	6983      	ldr	r3, [r0, #24]
 800abe4:	b90b      	cbnz	r3, 800abea <__swbuf_r+0x12>
 800abe6:	f000 f9d9 	bl	800af9c <__sinit>
 800abea:	4b21      	ldr	r3, [pc, #132]	; (800ac70 <__swbuf_r+0x98>)
 800abec:	429c      	cmp	r4, r3
 800abee:	d12b      	bne.n	800ac48 <__swbuf_r+0x70>
 800abf0:	686c      	ldr	r4, [r5, #4]
 800abf2:	69a3      	ldr	r3, [r4, #24]
 800abf4:	60a3      	str	r3, [r4, #8]
 800abf6:	89a3      	ldrh	r3, [r4, #12]
 800abf8:	071a      	lsls	r2, r3, #28
 800abfa:	d52f      	bpl.n	800ac5c <__swbuf_r+0x84>
 800abfc:	6923      	ldr	r3, [r4, #16]
 800abfe:	b36b      	cbz	r3, 800ac5c <__swbuf_r+0x84>
 800ac00:	6923      	ldr	r3, [r4, #16]
 800ac02:	6820      	ldr	r0, [r4, #0]
 800ac04:	1ac0      	subs	r0, r0, r3
 800ac06:	6963      	ldr	r3, [r4, #20]
 800ac08:	b2f6      	uxtb	r6, r6
 800ac0a:	4283      	cmp	r3, r0
 800ac0c:	4637      	mov	r7, r6
 800ac0e:	dc04      	bgt.n	800ac1a <__swbuf_r+0x42>
 800ac10:	4621      	mov	r1, r4
 800ac12:	4628      	mov	r0, r5
 800ac14:	f000 f92e 	bl	800ae74 <_fflush_r>
 800ac18:	bb30      	cbnz	r0, 800ac68 <__swbuf_r+0x90>
 800ac1a:	68a3      	ldr	r3, [r4, #8]
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	60a3      	str	r3, [r4, #8]
 800ac20:	6823      	ldr	r3, [r4, #0]
 800ac22:	1c5a      	adds	r2, r3, #1
 800ac24:	6022      	str	r2, [r4, #0]
 800ac26:	701e      	strb	r6, [r3, #0]
 800ac28:	6963      	ldr	r3, [r4, #20]
 800ac2a:	3001      	adds	r0, #1
 800ac2c:	4283      	cmp	r3, r0
 800ac2e:	d004      	beq.n	800ac3a <__swbuf_r+0x62>
 800ac30:	89a3      	ldrh	r3, [r4, #12]
 800ac32:	07db      	lsls	r3, r3, #31
 800ac34:	d506      	bpl.n	800ac44 <__swbuf_r+0x6c>
 800ac36:	2e0a      	cmp	r6, #10
 800ac38:	d104      	bne.n	800ac44 <__swbuf_r+0x6c>
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	f000 f919 	bl	800ae74 <_fflush_r>
 800ac42:	b988      	cbnz	r0, 800ac68 <__swbuf_r+0x90>
 800ac44:	4638      	mov	r0, r7
 800ac46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac48:	4b0a      	ldr	r3, [pc, #40]	; (800ac74 <__swbuf_r+0x9c>)
 800ac4a:	429c      	cmp	r4, r3
 800ac4c:	d101      	bne.n	800ac52 <__swbuf_r+0x7a>
 800ac4e:	68ac      	ldr	r4, [r5, #8]
 800ac50:	e7cf      	b.n	800abf2 <__swbuf_r+0x1a>
 800ac52:	4b09      	ldr	r3, [pc, #36]	; (800ac78 <__swbuf_r+0xa0>)
 800ac54:	429c      	cmp	r4, r3
 800ac56:	bf08      	it	eq
 800ac58:	68ec      	ldreq	r4, [r5, #12]
 800ac5a:	e7ca      	b.n	800abf2 <__swbuf_r+0x1a>
 800ac5c:	4621      	mov	r1, r4
 800ac5e:	4628      	mov	r0, r5
 800ac60:	f000 f80c 	bl	800ac7c <__swsetup_r>
 800ac64:	2800      	cmp	r0, #0
 800ac66:	d0cb      	beq.n	800ac00 <__swbuf_r+0x28>
 800ac68:	f04f 37ff 	mov.w	r7, #4294967295
 800ac6c:	e7ea      	b.n	800ac44 <__swbuf_r+0x6c>
 800ac6e:	bf00      	nop
 800ac70:	0800b8cc 	.word	0x0800b8cc
 800ac74:	0800b8ec 	.word	0x0800b8ec
 800ac78:	0800b8ac 	.word	0x0800b8ac

0800ac7c <__swsetup_r>:
 800ac7c:	4b32      	ldr	r3, [pc, #200]	; (800ad48 <__swsetup_r+0xcc>)
 800ac7e:	b570      	push	{r4, r5, r6, lr}
 800ac80:	681d      	ldr	r5, [r3, #0]
 800ac82:	4606      	mov	r6, r0
 800ac84:	460c      	mov	r4, r1
 800ac86:	b125      	cbz	r5, 800ac92 <__swsetup_r+0x16>
 800ac88:	69ab      	ldr	r3, [r5, #24]
 800ac8a:	b913      	cbnz	r3, 800ac92 <__swsetup_r+0x16>
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	f000 f985 	bl	800af9c <__sinit>
 800ac92:	4b2e      	ldr	r3, [pc, #184]	; (800ad4c <__swsetup_r+0xd0>)
 800ac94:	429c      	cmp	r4, r3
 800ac96:	d10f      	bne.n	800acb8 <__swsetup_r+0x3c>
 800ac98:	686c      	ldr	r4, [r5, #4]
 800ac9a:	89a3      	ldrh	r3, [r4, #12]
 800ac9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aca0:	0719      	lsls	r1, r3, #28
 800aca2:	d42c      	bmi.n	800acfe <__swsetup_r+0x82>
 800aca4:	06dd      	lsls	r5, r3, #27
 800aca6:	d411      	bmi.n	800accc <__swsetup_r+0x50>
 800aca8:	2309      	movs	r3, #9
 800acaa:	6033      	str	r3, [r6, #0]
 800acac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800acb0:	81a3      	strh	r3, [r4, #12]
 800acb2:	f04f 30ff 	mov.w	r0, #4294967295
 800acb6:	e03e      	b.n	800ad36 <__swsetup_r+0xba>
 800acb8:	4b25      	ldr	r3, [pc, #148]	; (800ad50 <__swsetup_r+0xd4>)
 800acba:	429c      	cmp	r4, r3
 800acbc:	d101      	bne.n	800acc2 <__swsetup_r+0x46>
 800acbe:	68ac      	ldr	r4, [r5, #8]
 800acc0:	e7eb      	b.n	800ac9a <__swsetup_r+0x1e>
 800acc2:	4b24      	ldr	r3, [pc, #144]	; (800ad54 <__swsetup_r+0xd8>)
 800acc4:	429c      	cmp	r4, r3
 800acc6:	bf08      	it	eq
 800acc8:	68ec      	ldreq	r4, [r5, #12]
 800acca:	e7e6      	b.n	800ac9a <__swsetup_r+0x1e>
 800accc:	0758      	lsls	r0, r3, #29
 800acce:	d512      	bpl.n	800acf6 <__swsetup_r+0x7a>
 800acd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acd2:	b141      	cbz	r1, 800ace6 <__swsetup_r+0x6a>
 800acd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acd8:	4299      	cmp	r1, r3
 800acda:	d002      	beq.n	800ace2 <__swsetup_r+0x66>
 800acdc:	4630      	mov	r0, r6
 800acde:	f7ff fb39 	bl	800a354 <_free_r>
 800ace2:	2300      	movs	r3, #0
 800ace4:	6363      	str	r3, [r4, #52]	; 0x34
 800ace6:	89a3      	ldrh	r3, [r4, #12]
 800ace8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800acec:	81a3      	strh	r3, [r4, #12]
 800acee:	2300      	movs	r3, #0
 800acf0:	6063      	str	r3, [r4, #4]
 800acf2:	6923      	ldr	r3, [r4, #16]
 800acf4:	6023      	str	r3, [r4, #0]
 800acf6:	89a3      	ldrh	r3, [r4, #12]
 800acf8:	f043 0308 	orr.w	r3, r3, #8
 800acfc:	81a3      	strh	r3, [r4, #12]
 800acfe:	6923      	ldr	r3, [r4, #16]
 800ad00:	b94b      	cbnz	r3, 800ad16 <__swsetup_r+0x9a>
 800ad02:	89a3      	ldrh	r3, [r4, #12]
 800ad04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad0c:	d003      	beq.n	800ad16 <__swsetup_r+0x9a>
 800ad0e:	4621      	mov	r1, r4
 800ad10:	4630      	mov	r0, r6
 800ad12:	f000 fa09 	bl	800b128 <__smakebuf_r>
 800ad16:	89a0      	ldrh	r0, [r4, #12]
 800ad18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad1c:	f010 0301 	ands.w	r3, r0, #1
 800ad20:	d00a      	beq.n	800ad38 <__swsetup_r+0xbc>
 800ad22:	2300      	movs	r3, #0
 800ad24:	60a3      	str	r3, [r4, #8]
 800ad26:	6963      	ldr	r3, [r4, #20]
 800ad28:	425b      	negs	r3, r3
 800ad2a:	61a3      	str	r3, [r4, #24]
 800ad2c:	6923      	ldr	r3, [r4, #16]
 800ad2e:	b943      	cbnz	r3, 800ad42 <__swsetup_r+0xc6>
 800ad30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad34:	d1ba      	bne.n	800acac <__swsetup_r+0x30>
 800ad36:	bd70      	pop	{r4, r5, r6, pc}
 800ad38:	0781      	lsls	r1, r0, #30
 800ad3a:	bf58      	it	pl
 800ad3c:	6963      	ldrpl	r3, [r4, #20]
 800ad3e:	60a3      	str	r3, [r4, #8]
 800ad40:	e7f4      	b.n	800ad2c <__swsetup_r+0xb0>
 800ad42:	2000      	movs	r0, #0
 800ad44:	e7f7      	b.n	800ad36 <__swsetup_r+0xba>
 800ad46:	bf00      	nop
 800ad48:	2000000c 	.word	0x2000000c
 800ad4c:	0800b8cc 	.word	0x0800b8cc
 800ad50:	0800b8ec 	.word	0x0800b8ec
 800ad54:	0800b8ac 	.word	0x0800b8ac

0800ad58 <abort>:
 800ad58:	b508      	push	{r3, lr}
 800ad5a:	2006      	movs	r0, #6
 800ad5c:	f000 fa54 	bl	800b208 <raise>
 800ad60:	2001      	movs	r0, #1
 800ad62:	f7f7 fb2b 	bl	80023bc <_exit>
	...

0800ad68 <__sflush_r>:
 800ad68:	898a      	ldrh	r2, [r1, #12]
 800ad6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6e:	4605      	mov	r5, r0
 800ad70:	0710      	lsls	r0, r2, #28
 800ad72:	460c      	mov	r4, r1
 800ad74:	d458      	bmi.n	800ae28 <__sflush_r+0xc0>
 800ad76:	684b      	ldr	r3, [r1, #4]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	dc05      	bgt.n	800ad88 <__sflush_r+0x20>
 800ad7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	dc02      	bgt.n	800ad88 <__sflush_r+0x20>
 800ad82:	2000      	movs	r0, #0
 800ad84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad8a:	2e00      	cmp	r6, #0
 800ad8c:	d0f9      	beq.n	800ad82 <__sflush_r+0x1a>
 800ad8e:	2300      	movs	r3, #0
 800ad90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad94:	682f      	ldr	r7, [r5, #0]
 800ad96:	602b      	str	r3, [r5, #0]
 800ad98:	d032      	beq.n	800ae00 <__sflush_r+0x98>
 800ad9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad9c:	89a3      	ldrh	r3, [r4, #12]
 800ad9e:	075a      	lsls	r2, r3, #29
 800ada0:	d505      	bpl.n	800adae <__sflush_r+0x46>
 800ada2:	6863      	ldr	r3, [r4, #4]
 800ada4:	1ac0      	subs	r0, r0, r3
 800ada6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ada8:	b10b      	cbz	r3, 800adae <__sflush_r+0x46>
 800adaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adac:	1ac0      	subs	r0, r0, r3
 800adae:	2300      	movs	r3, #0
 800adb0:	4602      	mov	r2, r0
 800adb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adb4:	6a21      	ldr	r1, [r4, #32]
 800adb6:	4628      	mov	r0, r5
 800adb8:	47b0      	blx	r6
 800adba:	1c43      	adds	r3, r0, #1
 800adbc:	89a3      	ldrh	r3, [r4, #12]
 800adbe:	d106      	bne.n	800adce <__sflush_r+0x66>
 800adc0:	6829      	ldr	r1, [r5, #0]
 800adc2:	291d      	cmp	r1, #29
 800adc4:	d82c      	bhi.n	800ae20 <__sflush_r+0xb8>
 800adc6:	4a2a      	ldr	r2, [pc, #168]	; (800ae70 <__sflush_r+0x108>)
 800adc8:	40ca      	lsrs	r2, r1
 800adca:	07d6      	lsls	r6, r2, #31
 800adcc:	d528      	bpl.n	800ae20 <__sflush_r+0xb8>
 800adce:	2200      	movs	r2, #0
 800add0:	6062      	str	r2, [r4, #4]
 800add2:	04d9      	lsls	r1, r3, #19
 800add4:	6922      	ldr	r2, [r4, #16]
 800add6:	6022      	str	r2, [r4, #0]
 800add8:	d504      	bpl.n	800ade4 <__sflush_r+0x7c>
 800adda:	1c42      	adds	r2, r0, #1
 800addc:	d101      	bne.n	800ade2 <__sflush_r+0x7a>
 800adde:	682b      	ldr	r3, [r5, #0]
 800ade0:	b903      	cbnz	r3, 800ade4 <__sflush_r+0x7c>
 800ade2:	6560      	str	r0, [r4, #84]	; 0x54
 800ade4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ade6:	602f      	str	r7, [r5, #0]
 800ade8:	2900      	cmp	r1, #0
 800adea:	d0ca      	beq.n	800ad82 <__sflush_r+0x1a>
 800adec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adf0:	4299      	cmp	r1, r3
 800adf2:	d002      	beq.n	800adfa <__sflush_r+0x92>
 800adf4:	4628      	mov	r0, r5
 800adf6:	f7ff faad 	bl	800a354 <_free_r>
 800adfa:	2000      	movs	r0, #0
 800adfc:	6360      	str	r0, [r4, #52]	; 0x34
 800adfe:	e7c1      	b.n	800ad84 <__sflush_r+0x1c>
 800ae00:	6a21      	ldr	r1, [r4, #32]
 800ae02:	2301      	movs	r3, #1
 800ae04:	4628      	mov	r0, r5
 800ae06:	47b0      	blx	r6
 800ae08:	1c41      	adds	r1, r0, #1
 800ae0a:	d1c7      	bne.n	800ad9c <__sflush_r+0x34>
 800ae0c:	682b      	ldr	r3, [r5, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d0c4      	beq.n	800ad9c <__sflush_r+0x34>
 800ae12:	2b1d      	cmp	r3, #29
 800ae14:	d001      	beq.n	800ae1a <__sflush_r+0xb2>
 800ae16:	2b16      	cmp	r3, #22
 800ae18:	d101      	bne.n	800ae1e <__sflush_r+0xb6>
 800ae1a:	602f      	str	r7, [r5, #0]
 800ae1c:	e7b1      	b.n	800ad82 <__sflush_r+0x1a>
 800ae1e:	89a3      	ldrh	r3, [r4, #12]
 800ae20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae24:	81a3      	strh	r3, [r4, #12]
 800ae26:	e7ad      	b.n	800ad84 <__sflush_r+0x1c>
 800ae28:	690f      	ldr	r7, [r1, #16]
 800ae2a:	2f00      	cmp	r7, #0
 800ae2c:	d0a9      	beq.n	800ad82 <__sflush_r+0x1a>
 800ae2e:	0793      	lsls	r3, r2, #30
 800ae30:	680e      	ldr	r6, [r1, #0]
 800ae32:	bf08      	it	eq
 800ae34:	694b      	ldreq	r3, [r1, #20]
 800ae36:	600f      	str	r7, [r1, #0]
 800ae38:	bf18      	it	ne
 800ae3a:	2300      	movne	r3, #0
 800ae3c:	eba6 0807 	sub.w	r8, r6, r7
 800ae40:	608b      	str	r3, [r1, #8]
 800ae42:	f1b8 0f00 	cmp.w	r8, #0
 800ae46:	dd9c      	ble.n	800ad82 <__sflush_r+0x1a>
 800ae48:	6a21      	ldr	r1, [r4, #32]
 800ae4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae4c:	4643      	mov	r3, r8
 800ae4e:	463a      	mov	r2, r7
 800ae50:	4628      	mov	r0, r5
 800ae52:	47b0      	blx	r6
 800ae54:	2800      	cmp	r0, #0
 800ae56:	dc06      	bgt.n	800ae66 <__sflush_r+0xfe>
 800ae58:	89a3      	ldrh	r3, [r4, #12]
 800ae5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae5e:	81a3      	strh	r3, [r4, #12]
 800ae60:	f04f 30ff 	mov.w	r0, #4294967295
 800ae64:	e78e      	b.n	800ad84 <__sflush_r+0x1c>
 800ae66:	4407      	add	r7, r0
 800ae68:	eba8 0800 	sub.w	r8, r8, r0
 800ae6c:	e7e9      	b.n	800ae42 <__sflush_r+0xda>
 800ae6e:	bf00      	nop
 800ae70:	20400001 	.word	0x20400001

0800ae74 <_fflush_r>:
 800ae74:	b538      	push	{r3, r4, r5, lr}
 800ae76:	690b      	ldr	r3, [r1, #16]
 800ae78:	4605      	mov	r5, r0
 800ae7a:	460c      	mov	r4, r1
 800ae7c:	b913      	cbnz	r3, 800ae84 <_fflush_r+0x10>
 800ae7e:	2500      	movs	r5, #0
 800ae80:	4628      	mov	r0, r5
 800ae82:	bd38      	pop	{r3, r4, r5, pc}
 800ae84:	b118      	cbz	r0, 800ae8e <_fflush_r+0x1a>
 800ae86:	6983      	ldr	r3, [r0, #24]
 800ae88:	b90b      	cbnz	r3, 800ae8e <_fflush_r+0x1a>
 800ae8a:	f000 f887 	bl	800af9c <__sinit>
 800ae8e:	4b14      	ldr	r3, [pc, #80]	; (800aee0 <_fflush_r+0x6c>)
 800ae90:	429c      	cmp	r4, r3
 800ae92:	d11b      	bne.n	800aecc <_fflush_r+0x58>
 800ae94:	686c      	ldr	r4, [r5, #4]
 800ae96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d0ef      	beq.n	800ae7e <_fflush_r+0xa>
 800ae9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aea0:	07d0      	lsls	r0, r2, #31
 800aea2:	d404      	bmi.n	800aeae <_fflush_r+0x3a>
 800aea4:	0599      	lsls	r1, r3, #22
 800aea6:	d402      	bmi.n	800aeae <_fflush_r+0x3a>
 800aea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeaa:	f000 f915 	bl	800b0d8 <__retarget_lock_acquire_recursive>
 800aeae:	4628      	mov	r0, r5
 800aeb0:	4621      	mov	r1, r4
 800aeb2:	f7ff ff59 	bl	800ad68 <__sflush_r>
 800aeb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aeb8:	07da      	lsls	r2, r3, #31
 800aeba:	4605      	mov	r5, r0
 800aebc:	d4e0      	bmi.n	800ae80 <_fflush_r+0xc>
 800aebe:	89a3      	ldrh	r3, [r4, #12]
 800aec0:	059b      	lsls	r3, r3, #22
 800aec2:	d4dd      	bmi.n	800ae80 <_fflush_r+0xc>
 800aec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aec6:	f000 f908 	bl	800b0da <__retarget_lock_release_recursive>
 800aeca:	e7d9      	b.n	800ae80 <_fflush_r+0xc>
 800aecc:	4b05      	ldr	r3, [pc, #20]	; (800aee4 <_fflush_r+0x70>)
 800aece:	429c      	cmp	r4, r3
 800aed0:	d101      	bne.n	800aed6 <_fflush_r+0x62>
 800aed2:	68ac      	ldr	r4, [r5, #8]
 800aed4:	e7df      	b.n	800ae96 <_fflush_r+0x22>
 800aed6:	4b04      	ldr	r3, [pc, #16]	; (800aee8 <_fflush_r+0x74>)
 800aed8:	429c      	cmp	r4, r3
 800aeda:	bf08      	it	eq
 800aedc:	68ec      	ldreq	r4, [r5, #12]
 800aede:	e7da      	b.n	800ae96 <_fflush_r+0x22>
 800aee0:	0800b8cc 	.word	0x0800b8cc
 800aee4:	0800b8ec 	.word	0x0800b8ec
 800aee8:	0800b8ac 	.word	0x0800b8ac

0800aeec <std>:
 800aeec:	2300      	movs	r3, #0
 800aeee:	b510      	push	{r4, lr}
 800aef0:	4604      	mov	r4, r0
 800aef2:	e9c0 3300 	strd	r3, r3, [r0]
 800aef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aefa:	6083      	str	r3, [r0, #8]
 800aefc:	8181      	strh	r1, [r0, #12]
 800aefe:	6643      	str	r3, [r0, #100]	; 0x64
 800af00:	81c2      	strh	r2, [r0, #14]
 800af02:	6183      	str	r3, [r0, #24]
 800af04:	4619      	mov	r1, r3
 800af06:	2208      	movs	r2, #8
 800af08:	305c      	adds	r0, #92	; 0x5c
 800af0a:	f7fb fdcb 	bl	8006aa4 <memset>
 800af0e:	4b05      	ldr	r3, [pc, #20]	; (800af24 <std+0x38>)
 800af10:	6263      	str	r3, [r4, #36]	; 0x24
 800af12:	4b05      	ldr	r3, [pc, #20]	; (800af28 <std+0x3c>)
 800af14:	62a3      	str	r3, [r4, #40]	; 0x28
 800af16:	4b05      	ldr	r3, [pc, #20]	; (800af2c <std+0x40>)
 800af18:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af1a:	4b05      	ldr	r3, [pc, #20]	; (800af30 <std+0x44>)
 800af1c:	6224      	str	r4, [r4, #32]
 800af1e:	6323      	str	r3, [r4, #48]	; 0x30
 800af20:	bd10      	pop	{r4, pc}
 800af22:	bf00      	nop
 800af24:	0800b241 	.word	0x0800b241
 800af28:	0800b263 	.word	0x0800b263
 800af2c:	0800b29b 	.word	0x0800b29b
 800af30:	0800b2bf 	.word	0x0800b2bf

0800af34 <_cleanup_r>:
 800af34:	4901      	ldr	r1, [pc, #4]	; (800af3c <_cleanup_r+0x8>)
 800af36:	f000 b8af 	b.w	800b098 <_fwalk_reent>
 800af3a:	bf00      	nop
 800af3c:	0800ae75 	.word	0x0800ae75

0800af40 <__sfmoreglue>:
 800af40:	b570      	push	{r4, r5, r6, lr}
 800af42:	2268      	movs	r2, #104	; 0x68
 800af44:	1e4d      	subs	r5, r1, #1
 800af46:	4355      	muls	r5, r2
 800af48:	460e      	mov	r6, r1
 800af4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af4e:	f7ff fa6d 	bl	800a42c <_malloc_r>
 800af52:	4604      	mov	r4, r0
 800af54:	b140      	cbz	r0, 800af68 <__sfmoreglue+0x28>
 800af56:	2100      	movs	r1, #0
 800af58:	e9c0 1600 	strd	r1, r6, [r0]
 800af5c:	300c      	adds	r0, #12
 800af5e:	60a0      	str	r0, [r4, #8]
 800af60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af64:	f7fb fd9e 	bl	8006aa4 <memset>
 800af68:	4620      	mov	r0, r4
 800af6a:	bd70      	pop	{r4, r5, r6, pc}

0800af6c <__sfp_lock_acquire>:
 800af6c:	4801      	ldr	r0, [pc, #4]	; (800af74 <__sfp_lock_acquire+0x8>)
 800af6e:	f000 b8b3 	b.w	800b0d8 <__retarget_lock_acquire_recursive>
 800af72:	bf00      	nop
 800af74:	200004a9 	.word	0x200004a9

0800af78 <__sfp_lock_release>:
 800af78:	4801      	ldr	r0, [pc, #4]	; (800af80 <__sfp_lock_release+0x8>)
 800af7a:	f000 b8ae 	b.w	800b0da <__retarget_lock_release_recursive>
 800af7e:	bf00      	nop
 800af80:	200004a9 	.word	0x200004a9

0800af84 <__sinit_lock_acquire>:
 800af84:	4801      	ldr	r0, [pc, #4]	; (800af8c <__sinit_lock_acquire+0x8>)
 800af86:	f000 b8a7 	b.w	800b0d8 <__retarget_lock_acquire_recursive>
 800af8a:	bf00      	nop
 800af8c:	200004aa 	.word	0x200004aa

0800af90 <__sinit_lock_release>:
 800af90:	4801      	ldr	r0, [pc, #4]	; (800af98 <__sinit_lock_release+0x8>)
 800af92:	f000 b8a2 	b.w	800b0da <__retarget_lock_release_recursive>
 800af96:	bf00      	nop
 800af98:	200004aa 	.word	0x200004aa

0800af9c <__sinit>:
 800af9c:	b510      	push	{r4, lr}
 800af9e:	4604      	mov	r4, r0
 800afa0:	f7ff fff0 	bl	800af84 <__sinit_lock_acquire>
 800afa4:	69a3      	ldr	r3, [r4, #24]
 800afa6:	b11b      	cbz	r3, 800afb0 <__sinit+0x14>
 800afa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afac:	f7ff bff0 	b.w	800af90 <__sinit_lock_release>
 800afb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afb4:	6523      	str	r3, [r4, #80]	; 0x50
 800afb6:	4b13      	ldr	r3, [pc, #76]	; (800b004 <__sinit+0x68>)
 800afb8:	4a13      	ldr	r2, [pc, #76]	; (800b008 <__sinit+0x6c>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	62a2      	str	r2, [r4, #40]	; 0x28
 800afbe:	42a3      	cmp	r3, r4
 800afc0:	bf04      	itt	eq
 800afc2:	2301      	moveq	r3, #1
 800afc4:	61a3      	streq	r3, [r4, #24]
 800afc6:	4620      	mov	r0, r4
 800afc8:	f000 f820 	bl	800b00c <__sfp>
 800afcc:	6060      	str	r0, [r4, #4]
 800afce:	4620      	mov	r0, r4
 800afd0:	f000 f81c 	bl	800b00c <__sfp>
 800afd4:	60a0      	str	r0, [r4, #8]
 800afd6:	4620      	mov	r0, r4
 800afd8:	f000 f818 	bl	800b00c <__sfp>
 800afdc:	2200      	movs	r2, #0
 800afde:	60e0      	str	r0, [r4, #12]
 800afe0:	2104      	movs	r1, #4
 800afe2:	6860      	ldr	r0, [r4, #4]
 800afe4:	f7ff ff82 	bl	800aeec <std>
 800afe8:	68a0      	ldr	r0, [r4, #8]
 800afea:	2201      	movs	r2, #1
 800afec:	2109      	movs	r1, #9
 800afee:	f7ff ff7d 	bl	800aeec <std>
 800aff2:	68e0      	ldr	r0, [r4, #12]
 800aff4:	2202      	movs	r2, #2
 800aff6:	2112      	movs	r1, #18
 800aff8:	f7ff ff78 	bl	800aeec <std>
 800affc:	2301      	movs	r3, #1
 800affe:	61a3      	str	r3, [r4, #24]
 800b000:	e7d2      	b.n	800afa8 <__sinit+0xc>
 800b002:	bf00      	nop
 800b004:	0800b464 	.word	0x0800b464
 800b008:	0800af35 	.word	0x0800af35

0800b00c <__sfp>:
 800b00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00e:	4607      	mov	r7, r0
 800b010:	f7ff ffac 	bl	800af6c <__sfp_lock_acquire>
 800b014:	4b1e      	ldr	r3, [pc, #120]	; (800b090 <__sfp+0x84>)
 800b016:	681e      	ldr	r6, [r3, #0]
 800b018:	69b3      	ldr	r3, [r6, #24]
 800b01a:	b913      	cbnz	r3, 800b022 <__sfp+0x16>
 800b01c:	4630      	mov	r0, r6
 800b01e:	f7ff ffbd 	bl	800af9c <__sinit>
 800b022:	3648      	adds	r6, #72	; 0x48
 800b024:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b028:	3b01      	subs	r3, #1
 800b02a:	d503      	bpl.n	800b034 <__sfp+0x28>
 800b02c:	6833      	ldr	r3, [r6, #0]
 800b02e:	b30b      	cbz	r3, 800b074 <__sfp+0x68>
 800b030:	6836      	ldr	r6, [r6, #0]
 800b032:	e7f7      	b.n	800b024 <__sfp+0x18>
 800b034:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b038:	b9d5      	cbnz	r5, 800b070 <__sfp+0x64>
 800b03a:	4b16      	ldr	r3, [pc, #88]	; (800b094 <__sfp+0x88>)
 800b03c:	60e3      	str	r3, [r4, #12]
 800b03e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b042:	6665      	str	r5, [r4, #100]	; 0x64
 800b044:	f000 f847 	bl	800b0d6 <__retarget_lock_init_recursive>
 800b048:	f7ff ff96 	bl	800af78 <__sfp_lock_release>
 800b04c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b050:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b054:	6025      	str	r5, [r4, #0]
 800b056:	61a5      	str	r5, [r4, #24]
 800b058:	2208      	movs	r2, #8
 800b05a:	4629      	mov	r1, r5
 800b05c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b060:	f7fb fd20 	bl	8006aa4 <memset>
 800b064:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b068:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b06c:	4620      	mov	r0, r4
 800b06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b070:	3468      	adds	r4, #104	; 0x68
 800b072:	e7d9      	b.n	800b028 <__sfp+0x1c>
 800b074:	2104      	movs	r1, #4
 800b076:	4638      	mov	r0, r7
 800b078:	f7ff ff62 	bl	800af40 <__sfmoreglue>
 800b07c:	4604      	mov	r4, r0
 800b07e:	6030      	str	r0, [r6, #0]
 800b080:	2800      	cmp	r0, #0
 800b082:	d1d5      	bne.n	800b030 <__sfp+0x24>
 800b084:	f7ff ff78 	bl	800af78 <__sfp_lock_release>
 800b088:	230c      	movs	r3, #12
 800b08a:	603b      	str	r3, [r7, #0]
 800b08c:	e7ee      	b.n	800b06c <__sfp+0x60>
 800b08e:	bf00      	nop
 800b090:	0800b464 	.word	0x0800b464
 800b094:	ffff0001 	.word	0xffff0001

0800b098 <_fwalk_reent>:
 800b098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b09c:	4606      	mov	r6, r0
 800b09e:	4688      	mov	r8, r1
 800b0a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0a4:	2700      	movs	r7, #0
 800b0a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0aa:	f1b9 0901 	subs.w	r9, r9, #1
 800b0ae:	d505      	bpl.n	800b0bc <_fwalk_reent+0x24>
 800b0b0:	6824      	ldr	r4, [r4, #0]
 800b0b2:	2c00      	cmp	r4, #0
 800b0b4:	d1f7      	bne.n	800b0a6 <_fwalk_reent+0xe>
 800b0b6:	4638      	mov	r0, r7
 800b0b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0bc:	89ab      	ldrh	r3, [r5, #12]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d907      	bls.n	800b0d2 <_fwalk_reent+0x3a>
 800b0c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	d003      	beq.n	800b0d2 <_fwalk_reent+0x3a>
 800b0ca:	4629      	mov	r1, r5
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	47c0      	blx	r8
 800b0d0:	4307      	orrs	r7, r0
 800b0d2:	3568      	adds	r5, #104	; 0x68
 800b0d4:	e7e9      	b.n	800b0aa <_fwalk_reent+0x12>

0800b0d6 <__retarget_lock_init_recursive>:
 800b0d6:	4770      	bx	lr

0800b0d8 <__retarget_lock_acquire_recursive>:
 800b0d8:	4770      	bx	lr

0800b0da <__retarget_lock_release_recursive>:
 800b0da:	4770      	bx	lr

0800b0dc <__swhatbuf_r>:
 800b0dc:	b570      	push	{r4, r5, r6, lr}
 800b0de:	460e      	mov	r6, r1
 800b0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0e4:	2900      	cmp	r1, #0
 800b0e6:	b096      	sub	sp, #88	; 0x58
 800b0e8:	4614      	mov	r4, r2
 800b0ea:	461d      	mov	r5, r3
 800b0ec:	da08      	bge.n	800b100 <__swhatbuf_r+0x24>
 800b0ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	602a      	str	r2, [r5, #0]
 800b0f6:	061a      	lsls	r2, r3, #24
 800b0f8:	d410      	bmi.n	800b11c <__swhatbuf_r+0x40>
 800b0fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0fe:	e00e      	b.n	800b11e <__swhatbuf_r+0x42>
 800b100:	466a      	mov	r2, sp
 800b102:	f000 f903 	bl	800b30c <_fstat_r>
 800b106:	2800      	cmp	r0, #0
 800b108:	dbf1      	blt.n	800b0ee <__swhatbuf_r+0x12>
 800b10a:	9a01      	ldr	r2, [sp, #4]
 800b10c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b110:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b114:	425a      	negs	r2, r3
 800b116:	415a      	adcs	r2, r3
 800b118:	602a      	str	r2, [r5, #0]
 800b11a:	e7ee      	b.n	800b0fa <__swhatbuf_r+0x1e>
 800b11c:	2340      	movs	r3, #64	; 0x40
 800b11e:	2000      	movs	r0, #0
 800b120:	6023      	str	r3, [r4, #0]
 800b122:	b016      	add	sp, #88	; 0x58
 800b124:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b128 <__smakebuf_r>:
 800b128:	898b      	ldrh	r3, [r1, #12]
 800b12a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b12c:	079d      	lsls	r5, r3, #30
 800b12e:	4606      	mov	r6, r0
 800b130:	460c      	mov	r4, r1
 800b132:	d507      	bpl.n	800b144 <__smakebuf_r+0x1c>
 800b134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b138:	6023      	str	r3, [r4, #0]
 800b13a:	6123      	str	r3, [r4, #16]
 800b13c:	2301      	movs	r3, #1
 800b13e:	6163      	str	r3, [r4, #20]
 800b140:	b002      	add	sp, #8
 800b142:	bd70      	pop	{r4, r5, r6, pc}
 800b144:	ab01      	add	r3, sp, #4
 800b146:	466a      	mov	r2, sp
 800b148:	f7ff ffc8 	bl	800b0dc <__swhatbuf_r>
 800b14c:	9900      	ldr	r1, [sp, #0]
 800b14e:	4605      	mov	r5, r0
 800b150:	4630      	mov	r0, r6
 800b152:	f7ff f96b 	bl	800a42c <_malloc_r>
 800b156:	b948      	cbnz	r0, 800b16c <__smakebuf_r+0x44>
 800b158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b15c:	059a      	lsls	r2, r3, #22
 800b15e:	d4ef      	bmi.n	800b140 <__smakebuf_r+0x18>
 800b160:	f023 0303 	bic.w	r3, r3, #3
 800b164:	f043 0302 	orr.w	r3, r3, #2
 800b168:	81a3      	strh	r3, [r4, #12]
 800b16a:	e7e3      	b.n	800b134 <__smakebuf_r+0xc>
 800b16c:	4b0d      	ldr	r3, [pc, #52]	; (800b1a4 <__smakebuf_r+0x7c>)
 800b16e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b170:	89a3      	ldrh	r3, [r4, #12]
 800b172:	6020      	str	r0, [r4, #0]
 800b174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b178:	81a3      	strh	r3, [r4, #12]
 800b17a:	9b00      	ldr	r3, [sp, #0]
 800b17c:	6163      	str	r3, [r4, #20]
 800b17e:	9b01      	ldr	r3, [sp, #4]
 800b180:	6120      	str	r0, [r4, #16]
 800b182:	b15b      	cbz	r3, 800b19c <__smakebuf_r+0x74>
 800b184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b188:	4630      	mov	r0, r6
 800b18a:	f000 f8d1 	bl	800b330 <_isatty_r>
 800b18e:	b128      	cbz	r0, 800b19c <__smakebuf_r+0x74>
 800b190:	89a3      	ldrh	r3, [r4, #12]
 800b192:	f023 0303 	bic.w	r3, r3, #3
 800b196:	f043 0301 	orr.w	r3, r3, #1
 800b19a:	81a3      	strh	r3, [r4, #12]
 800b19c:	89a0      	ldrh	r0, [r4, #12]
 800b19e:	4305      	orrs	r5, r0
 800b1a0:	81a5      	strh	r5, [r4, #12]
 800b1a2:	e7cd      	b.n	800b140 <__smakebuf_r+0x18>
 800b1a4:	0800af35 	.word	0x0800af35

0800b1a8 <_malloc_usable_size_r>:
 800b1a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1ac:	1f18      	subs	r0, r3, #4
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	bfbc      	itt	lt
 800b1b2:	580b      	ldrlt	r3, [r1, r0]
 800b1b4:	18c0      	addlt	r0, r0, r3
 800b1b6:	4770      	bx	lr

0800b1b8 <_raise_r>:
 800b1b8:	291f      	cmp	r1, #31
 800b1ba:	b538      	push	{r3, r4, r5, lr}
 800b1bc:	4604      	mov	r4, r0
 800b1be:	460d      	mov	r5, r1
 800b1c0:	d904      	bls.n	800b1cc <_raise_r+0x14>
 800b1c2:	2316      	movs	r3, #22
 800b1c4:	6003      	str	r3, [r0, #0]
 800b1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ca:	bd38      	pop	{r3, r4, r5, pc}
 800b1cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b1ce:	b112      	cbz	r2, 800b1d6 <_raise_r+0x1e>
 800b1d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1d4:	b94b      	cbnz	r3, 800b1ea <_raise_r+0x32>
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	f000 f830 	bl	800b23c <_getpid_r>
 800b1dc:	462a      	mov	r2, r5
 800b1de:	4601      	mov	r1, r0
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1e6:	f000 b817 	b.w	800b218 <_kill_r>
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d00a      	beq.n	800b204 <_raise_r+0x4c>
 800b1ee:	1c59      	adds	r1, r3, #1
 800b1f0:	d103      	bne.n	800b1fa <_raise_r+0x42>
 800b1f2:	2316      	movs	r3, #22
 800b1f4:	6003      	str	r3, [r0, #0]
 800b1f6:	2001      	movs	r0, #1
 800b1f8:	e7e7      	b.n	800b1ca <_raise_r+0x12>
 800b1fa:	2400      	movs	r4, #0
 800b1fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b200:	4628      	mov	r0, r5
 800b202:	4798      	blx	r3
 800b204:	2000      	movs	r0, #0
 800b206:	e7e0      	b.n	800b1ca <_raise_r+0x12>

0800b208 <raise>:
 800b208:	4b02      	ldr	r3, [pc, #8]	; (800b214 <raise+0xc>)
 800b20a:	4601      	mov	r1, r0
 800b20c:	6818      	ldr	r0, [r3, #0]
 800b20e:	f7ff bfd3 	b.w	800b1b8 <_raise_r>
 800b212:	bf00      	nop
 800b214:	2000000c 	.word	0x2000000c

0800b218 <_kill_r>:
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	4d07      	ldr	r5, [pc, #28]	; (800b238 <_kill_r+0x20>)
 800b21c:	2300      	movs	r3, #0
 800b21e:	4604      	mov	r4, r0
 800b220:	4608      	mov	r0, r1
 800b222:	4611      	mov	r1, r2
 800b224:	602b      	str	r3, [r5, #0]
 800b226:	f7f7 f8b9 	bl	800239c <_kill>
 800b22a:	1c43      	adds	r3, r0, #1
 800b22c:	d102      	bne.n	800b234 <_kill_r+0x1c>
 800b22e:	682b      	ldr	r3, [r5, #0]
 800b230:	b103      	cbz	r3, 800b234 <_kill_r+0x1c>
 800b232:	6023      	str	r3, [r4, #0]
 800b234:	bd38      	pop	{r3, r4, r5, pc}
 800b236:	bf00      	nop
 800b238:	200004a4 	.word	0x200004a4

0800b23c <_getpid_r>:
 800b23c:	f7f7 b8a6 	b.w	800238c <_getpid>

0800b240 <__sread>:
 800b240:	b510      	push	{r4, lr}
 800b242:	460c      	mov	r4, r1
 800b244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b248:	f000 f894 	bl	800b374 <_read_r>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	bfab      	itete	ge
 800b250:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b252:	89a3      	ldrhlt	r3, [r4, #12]
 800b254:	181b      	addge	r3, r3, r0
 800b256:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b25a:	bfac      	ite	ge
 800b25c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b25e:	81a3      	strhlt	r3, [r4, #12]
 800b260:	bd10      	pop	{r4, pc}

0800b262 <__swrite>:
 800b262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b266:	461f      	mov	r7, r3
 800b268:	898b      	ldrh	r3, [r1, #12]
 800b26a:	05db      	lsls	r3, r3, #23
 800b26c:	4605      	mov	r5, r0
 800b26e:	460c      	mov	r4, r1
 800b270:	4616      	mov	r6, r2
 800b272:	d505      	bpl.n	800b280 <__swrite+0x1e>
 800b274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b278:	2302      	movs	r3, #2
 800b27a:	2200      	movs	r2, #0
 800b27c:	f000 f868 	bl	800b350 <_lseek_r>
 800b280:	89a3      	ldrh	r3, [r4, #12]
 800b282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b286:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b28a:	81a3      	strh	r3, [r4, #12]
 800b28c:	4632      	mov	r2, r6
 800b28e:	463b      	mov	r3, r7
 800b290:	4628      	mov	r0, r5
 800b292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b296:	f000 b817 	b.w	800b2c8 <_write_r>

0800b29a <__sseek>:
 800b29a:	b510      	push	{r4, lr}
 800b29c:	460c      	mov	r4, r1
 800b29e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2a2:	f000 f855 	bl	800b350 <_lseek_r>
 800b2a6:	1c43      	adds	r3, r0, #1
 800b2a8:	89a3      	ldrh	r3, [r4, #12]
 800b2aa:	bf15      	itete	ne
 800b2ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2b6:	81a3      	strheq	r3, [r4, #12]
 800b2b8:	bf18      	it	ne
 800b2ba:	81a3      	strhne	r3, [r4, #12]
 800b2bc:	bd10      	pop	{r4, pc}

0800b2be <__sclose>:
 800b2be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2c2:	f000 b813 	b.w	800b2ec <_close_r>
	...

0800b2c8 <_write_r>:
 800b2c8:	b538      	push	{r3, r4, r5, lr}
 800b2ca:	4d07      	ldr	r5, [pc, #28]	; (800b2e8 <_write_r+0x20>)
 800b2cc:	4604      	mov	r4, r0
 800b2ce:	4608      	mov	r0, r1
 800b2d0:	4611      	mov	r1, r2
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	602a      	str	r2, [r5, #0]
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	f7f7 f897 	bl	800240a <_write>
 800b2dc:	1c43      	adds	r3, r0, #1
 800b2de:	d102      	bne.n	800b2e6 <_write_r+0x1e>
 800b2e0:	682b      	ldr	r3, [r5, #0]
 800b2e2:	b103      	cbz	r3, 800b2e6 <_write_r+0x1e>
 800b2e4:	6023      	str	r3, [r4, #0]
 800b2e6:	bd38      	pop	{r3, r4, r5, pc}
 800b2e8:	200004a4 	.word	0x200004a4

0800b2ec <_close_r>:
 800b2ec:	b538      	push	{r3, r4, r5, lr}
 800b2ee:	4d06      	ldr	r5, [pc, #24]	; (800b308 <_close_r+0x1c>)
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	4608      	mov	r0, r1
 800b2f6:	602b      	str	r3, [r5, #0]
 800b2f8:	f7f7 f8a3 	bl	8002442 <_close>
 800b2fc:	1c43      	adds	r3, r0, #1
 800b2fe:	d102      	bne.n	800b306 <_close_r+0x1a>
 800b300:	682b      	ldr	r3, [r5, #0]
 800b302:	b103      	cbz	r3, 800b306 <_close_r+0x1a>
 800b304:	6023      	str	r3, [r4, #0]
 800b306:	bd38      	pop	{r3, r4, r5, pc}
 800b308:	200004a4 	.word	0x200004a4

0800b30c <_fstat_r>:
 800b30c:	b538      	push	{r3, r4, r5, lr}
 800b30e:	4d07      	ldr	r5, [pc, #28]	; (800b32c <_fstat_r+0x20>)
 800b310:	2300      	movs	r3, #0
 800b312:	4604      	mov	r4, r0
 800b314:	4608      	mov	r0, r1
 800b316:	4611      	mov	r1, r2
 800b318:	602b      	str	r3, [r5, #0]
 800b31a:	f7f7 f89e 	bl	800245a <_fstat>
 800b31e:	1c43      	adds	r3, r0, #1
 800b320:	d102      	bne.n	800b328 <_fstat_r+0x1c>
 800b322:	682b      	ldr	r3, [r5, #0]
 800b324:	b103      	cbz	r3, 800b328 <_fstat_r+0x1c>
 800b326:	6023      	str	r3, [r4, #0]
 800b328:	bd38      	pop	{r3, r4, r5, pc}
 800b32a:	bf00      	nop
 800b32c:	200004a4 	.word	0x200004a4

0800b330 <_isatty_r>:
 800b330:	b538      	push	{r3, r4, r5, lr}
 800b332:	4d06      	ldr	r5, [pc, #24]	; (800b34c <_isatty_r+0x1c>)
 800b334:	2300      	movs	r3, #0
 800b336:	4604      	mov	r4, r0
 800b338:	4608      	mov	r0, r1
 800b33a:	602b      	str	r3, [r5, #0]
 800b33c:	f7f7 f89d 	bl	800247a <_isatty>
 800b340:	1c43      	adds	r3, r0, #1
 800b342:	d102      	bne.n	800b34a <_isatty_r+0x1a>
 800b344:	682b      	ldr	r3, [r5, #0]
 800b346:	b103      	cbz	r3, 800b34a <_isatty_r+0x1a>
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	bd38      	pop	{r3, r4, r5, pc}
 800b34c:	200004a4 	.word	0x200004a4

0800b350 <_lseek_r>:
 800b350:	b538      	push	{r3, r4, r5, lr}
 800b352:	4d07      	ldr	r5, [pc, #28]	; (800b370 <_lseek_r+0x20>)
 800b354:	4604      	mov	r4, r0
 800b356:	4608      	mov	r0, r1
 800b358:	4611      	mov	r1, r2
 800b35a:	2200      	movs	r2, #0
 800b35c:	602a      	str	r2, [r5, #0]
 800b35e:	461a      	mov	r2, r3
 800b360:	f7f7 f896 	bl	8002490 <_lseek>
 800b364:	1c43      	adds	r3, r0, #1
 800b366:	d102      	bne.n	800b36e <_lseek_r+0x1e>
 800b368:	682b      	ldr	r3, [r5, #0]
 800b36a:	b103      	cbz	r3, 800b36e <_lseek_r+0x1e>
 800b36c:	6023      	str	r3, [r4, #0]
 800b36e:	bd38      	pop	{r3, r4, r5, pc}
 800b370:	200004a4 	.word	0x200004a4

0800b374 <_read_r>:
 800b374:	b538      	push	{r3, r4, r5, lr}
 800b376:	4d07      	ldr	r5, [pc, #28]	; (800b394 <_read_r+0x20>)
 800b378:	4604      	mov	r4, r0
 800b37a:	4608      	mov	r0, r1
 800b37c:	4611      	mov	r1, r2
 800b37e:	2200      	movs	r2, #0
 800b380:	602a      	str	r2, [r5, #0]
 800b382:	461a      	mov	r2, r3
 800b384:	f7f7 f824 	bl	80023d0 <_read>
 800b388:	1c43      	adds	r3, r0, #1
 800b38a:	d102      	bne.n	800b392 <_read_r+0x1e>
 800b38c:	682b      	ldr	r3, [r5, #0]
 800b38e:	b103      	cbz	r3, 800b392 <_read_r+0x1e>
 800b390:	6023      	str	r3, [r4, #0]
 800b392:	bd38      	pop	{r3, r4, r5, pc}
 800b394:	200004a4 	.word	0x200004a4

0800b398 <_init>:
 800b398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39a:	bf00      	nop
 800b39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b39e:	bc08      	pop	{r3}
 800b3a0:	469e      	mov	lr, r3
 800b3a2:	4770      	bx	lr

0800b3a4 <_fini>:
 800b3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3a6:	bf00      	nop
 800b3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3aa:	bc08      	pop	{r3}
 800b3ac:	469e      	mov	lr, r3
 800b3ae:	4770      	bx	lr
